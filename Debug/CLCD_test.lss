
CLCD_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000054a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  000054a8  0000551c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000039c0  00000000  00000000  00005580  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010cf  00000000  00000000  00008f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  0000a00f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018e  00000000  00000000  0000a16f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ec8  00000000  00000000  0000a2fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001045  00000000  00000000  0000c1c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e80  00000000  00000000  0000d20a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000e08c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000295  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000080a  00000000  00000000  0000e4a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ecab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f4 e5       	ldi	r31, 0x54	; 84
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3c       	cpi	r26, 0xC4	; 196
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 99 14 	call	0x2932	; 0x2932 <main>
      7a:	0c 94 52 2a 	jmp	0x54a4	; 0x54a4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 1b 2a 	jmp	0x5436	; 0x5436 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 ea       	ldi	r26, 0xA0	; 160
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 37 2a 	jmp	0x546e	; 0x546e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 27 2a 	jmp	0x544e	; 0x544e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 25 04 	call	0x84a	; 0x84a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 43 2a 	jmp	0x5486	; 0x5486 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 27 2a 	jmp	0x544e	; 0x544e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 25 04 	call	0x84a	; 0x84a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 43 2a 	jmp	0x5486	; 0x5486 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 1b 2a 	jmp	0x5436	; 0x5436 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 ea       	ldi	r24, 0xA0	; 160
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 25 04 	call	0x84a	; 0x84a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 37 2a 	jmp	0x546e	; 0x546e <__epilogue_restores__>

00000622 <__eqsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 27 2a 	jmp	0x544e	; 0x544e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__eqsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__eqsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 72 05 	call	0xae4	; 0xae4 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__eqsf2+0x58>
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 43 2a 	jmp	0x5486	; 0x5486 <__epilogue_restores__+0x18>

00000682 <__gtsf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 27 2a 	jmp	0x544e	; 0x544e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gtsf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gtsf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 72 05 	call	0xae4	; 0xae4 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gtsf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 43 2a 	jmp	0x5486	; 0x5486 <__epilogue_restores__+0x18>

000006e2 <__gesf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 27 2a 	jmp	0x544e	; 0x544e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__gesf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__gesf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 72 05 	call	0xae4	; 0xae4 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__gesf2+0x58>
     738:	8f ef       	ldi	r24, 0xFF	; 255
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 43 2a 	jmp	0x5486	; 0x5486 <__epilogue_restores__+0x18>

00000742 <__ltsf2>:
     742:	a8 e1       	ldi	r26, 0x18	; 24
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 27 2a 	jmp	0x544e	; 0x544e <__prologue_saves__+0x18>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	2d 83       	std	Y+5, r18	; 0x05
     758:	3e 83       	std	Y+6, r19	; 0x06
     75a:	4f 83       	std	Y+7, r20	; 0x07
     75c:	58 87       	std	Y+8, r21	; 0x08
     75e:	89 e0       	ldi	r24, 0x09	; 9
     760:	e8 2e       	mov	r14, r24
     762:	f1 2c       	mov	r15, r1
     764:	ec 0e       	add	r14, r28
     766:	fd 1e       	adc	r15, r29
     768:	ce 01       	movw	r24, r28
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	b7 01       	movw	r22, r14
     76e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     772:	8e 01       	movw	r16, r28
     774:	0f 5e       	subi	r16, 0xEF	; 239
     776:	1f 4f       	sbci	r17, 0xFF	; 255
     778:	ce 01       	movw	r24, r28
     77a:	05 96       	adiw	r24, 0x05	; 5
     77c:	b8 01       	movw	r22, r16
     77e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     782:	89 85       	ldd	r24, Y+9	; 0x09
     784:	82 30       	cpi	r24, 0x02	; 2
     786:	40 f0       	brcs	.+16     	; 0x798 <__ltsf2+0x56>
     788:	89 89       	ldd	r24, Y+17	; 0x11
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	28 f0       	brcs	.+10     	; 0x798 <__ltsf2+0x56>
     78e:	c7 01       	movw	r24, r14
     790:	b8 01       	movw	r22, r16
     792:	0e 94 72 05 	call	0xae4	; 0xae4 <__fpcmp_parts_f>
     796:	01 c0       	rjmp	.+2      	; 0x79a <__ltsf2+0x58>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	68 96       	adiw	r28, 0x18	; 24
     79c:	e6 e0       	ldi	r30, 0x06	; 6
     79e:	0c 94 43 2a 	jmp	0x5486	; 0x5486 <__epilogue_restores__+0x18>

000007a2 <__fixsfsi>:
     7a2:	ac e0       	ldi	r26, 0x0C	; 12
     7a4:	b0 e0       	ldi	r27, 0x00	; 0
     7a6:	e7 ed       	ldi	r30, 0xD7	; 215
     7a8:	f3 e0       	ldi	r31, 0x03	; 3
     7aa:	0c 94 2b 2a 	jmp	0x5456	; 0x5456 <__prologue_saves__+0x20>
     7ae:	69 83       	std	Y+1, r22	; 0x01
     7b0:	7a 83       	std	Y+2, r23	; 0x02
     7b2:	8b 83       	std	Y+3, r24	; 0x03
     7b4:	9c 83       	std	Y+4, r25	; 0x04
     7b6:	ce 01       	movw	r24, r28
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	be 01       	movw	r22, r28
     7bc:	6b 5f       	subi	r22, 0xFB	; 251
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     7c4:	8d 81       	ldd	r24, Y+5	; 0x05
     7c6:	82 30       	cpi	r24, 0x02	; 2
     7c8:	61 f1       	breq	.+88     	; 0x822 <__fixsfsi+0x80>
     7ca:	82 30       	cpi	r24, 0x02	; 2
     7cc:	50 f1       	brcs	.+84     	; 0x822 <__fixsfsi+0x80>
     7ce:	84 30       	cpi	r24, 0x04	; 4
     7d0:	21 f4       	brne	.+8      	; 0x7da <__fixsfsi+0x38>
     7d2:	8e 81       	ldd	r24, Y+6	; 0x06
     7d4:	88 23       	and	r24, r24
     7d6:	51 f1       	breq	.+84     	; 0x82c <__fixsfsi+0x8a>
     7d8:	2e c0       	rjmp	.+92     	; 0x836 <__fixsfsi+0x94>
     7da:	2f 81       	ldd	r18, Y+7	; 0x07
     7dc:	38 85       	ldd	r19, Y+8	; 0x08
     7de:	37 fd       	sbrc	r19, 7
     7e0:	20 c0       	rjmp	.+64     	; 0x822 <__fixsfsi+0x80>
     7e2:	6e 81       	ldd	r22, Y+6	; 0x06
     7e4:	2f 31       	cpi	r18, 0x1F	; 31
     7e6:	31 05       	cpc	r19, r1
     7e8:	1c f0       	brlt	.+6      	; 0x7f0 <__fixsfsi+0x4e>
     7ea:	66 23       	and	r22, r22
     7ec:	f9 f0       	breq	.+62     	; 0x82c <__fixsfsi+0x8a>
     7ee:	23 c0       	rjmp	.+70     	; 0x836 <__fixsfsi+0x94>
     7f0:	8e e1       	ldi	r24, 0x1E	; 30
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	82 1b       	sub	r24, r18
     7f6:	93 0b       	sbc	r25, r19
     7f8:	29 85       	ldd	r18, Y+9	; 0x09
     7fa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7fc:	4b 85       	ldd	r20, Y+11	; 0x0b
     7fe:	5c 85       	ldd	r21, Y+12	; 0x0c
     800:	04 c0       	rjmp	.+8      	; 0x80a <__fixsfsi+0x68>
     802:	56 95       	lsr	r21
     804:	47 95       	ror	r20
     806:	37 95       	ror	r19
     808:	27 95       	ror	r18
     80a:	8a 95       	dec	r24
     80c:	d2 f7       	brpl	.-12     	; 0x802 <__fixsfsi+0x60>
     80e:	66 23       	and	r22, r22
     810:	b1 f0       	breq	.+44     	; 0x83e <__fixsfsi+0x9c>
     812:	50 95       	com	r21
     814:	40 95       	com	r20
     816:	30 95       	com	r19
     818:	21 95       	neg	r18
     81a:	3f 4f       	sbci	r19, 0xFF	; 255
     81c:	4f 4f       	sbci	r20, 0xFF	; 255
     81e:	5f 4f       	sbci	r21, 0xFF	; 255
     820:	0e c0       	rjmp	.+28     	; 0x83e <__fixsfsi+0x9c>
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	09 c0       	rjmp	.+18     	; 0x83e <__fixsfsi+0x9c>
     82c:	2f ef       	ldi	r18, 0xFF	; 255
     82e:	3f ef       	ldi	r19, 0xFF	; 255
     830:	4f ef       	ldi	r20, 0xFF	; 255
     832:	5f e7       	ldi	r21, 0x7F	; 127
     834:	04 c0       	rjmp	.+8      	; 0x83e <__fixsfsi+0x9c>
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	40 e0       	ldi	r20, 0x00	; 0
     83c:	50 e8       	ldi	r21, 0x80	; 128
     83e:	b9 01       	movw	r22, r18
     840:	ca 01       	movw	r24, r20
     842:	2c 96       	adiw	r28, 0x0c	; 12
     844:	e2 e0       	ldi	r30, 0x02	; 2
     846:	0c 94 47 2a 	jmp	0x548e	; 0x548e <__epilogue_restores__+0x20>

0000084a <__pack_f>:
     84a:	df 92       	push	r13
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	fc 01       	movw	r30, r24
     856:	e4 80       	ldd	r14, Z+4	; 0x04
     858:	f5 80       	ldd	r15, Z+5	; 0x05
     85a:	06 81       	ldd	r16, Z+6	; 0x06
     85c:	17 81       	ldd	r17, Z+7	; 0x07
     85e:	d1 80       	ldd	r13, Z+1	; 0x01
     860:	80 81       	ld	r24, Z
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	48 f4       	brcc	.+18     	; 0x878 <__stack+0x19>
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	a0 e1       	ldi	r26, 0x10	; 16
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	e8 2a       	or	r14, r24
     870:	f9 2a       	or	r15, r25
     872:	0a 2b       	or	r16, r26
     874:	1b 2b       	or	r17, r27
     876:	a5 c0       	rjmp	.+330    	; 0x9c2 <__stack+0x163>
     878:	84 30       	cpi	r24, 0x04	; 4
     87a:	09 f4       	brne	.+2      	; 0x87e <__stack+0x1f>
     87c:	9f c0       	rjmp	.+318    	; 0x9bc <__stack+0x15d>
     87e:	82 30       	cpi	r24, 0x02	; 2
     880:	21 f4       	brne	.+8      	; 0x88a <__stack+0x2b>
     882:	ee 24       	eor	r14, r14
     884:	ff 24       	eor	r15, r15
     886:	87 01       	movw	r16, r14
     888:	05 c0       	rjmp	.+10     	; 0x894 <__stack+0x35>
     88a:	e1 14       	cp	r14, r1
     88c:	f1 04       	cpc	r15, r1
     88e:	01 05       	cpc	r16, r1
     890:	11 05       	cpc	r17, r1
     892:	19 f4       	brne	.+6      	; 0x89a <__stack+0x3b>
     894:	e0 e0       	ldi	r30, 0x00	; 0
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	96 c0       	rjmp	.+300    	; 0x9c6 <__stack+0x167>
     89a:	62 81       	ldd	r22, Z+2	; 0x02
     89c:	73 81       	ldd	r23, Z+3	; 0x03
     89e:	9f ef       	ldi	r25, 0xFF	; 255
     8a0:	62 38       	cpi	r22, 0x82	; 130
     8a2:	79 07       	cpc	r23, r25
     8a4:	0c f0       	brlt	.+2      	; 0x8a8 <__stack+0x49>
     8a6:	5b c0       	rjmp	.+182    	; 0x95e <__stack+0xff>
     8a8:	22 e8       	ldi	r18, 0x82	; 130
     8aa:	3f ef       	ldi	r19, 0xFF	; 255
     8ac:	26 1b       	sub	r18, r22
     8ae:	37 0b       	sbc	r19, r23
     8b0:	2a 31       	cpi	r18, 0x1A	; 26
     8b2:	31 05       	cpc	r19, r1
     8b4:	2c f0       	brlt	.+10     	; 0x8c0 <__stack+0x61>
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	40 e0       	ldi	r20, 0x00	; 0
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	2a c0       	rjmp	.+84     	; 0x914 <__stack+0xb5>
     8c0:	b8 01       	movw	r22, r16
     8c2:	a7 01       	movw	r20, r14
     8c4:	02 2e       	mov	r0, r18
     8c6:	04 c0       	rjmp	.+8      	; 0x8d0 <__stack+0x71>
     8c8:	76 95       	lsr	r23
     8ca:	67 95       	ror	r22
     8cc:	57 95       	ror	r21
     8ce:	47 95       	ror	r20
     8d0:	0a 94       	dec	r0
     8d2:	d2 f7       	brpl	.-12     	; 0x8c8 <__stack+0x69>
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	a0 e0       	ldi	r26, 0x00	; 0
     8da:	b0 e0       	ldi	r27, 0x00	; 0
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <__stack+0x87>
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	aa 1f       	adc	r26, r26
     8e4:	bb 1f       	adc	r27, r27
     8e6:	2a 95       	dec	r18
     8e8:	d2 f7       	brpl	.-12     	; 0x8de <__stack+0x7f>
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	a1 09       	sbc	r26, r1
     8ee:	b1 09       	sbc	r27, r1
     8f0:	8e 21       	and	r24, r14
     8f2:	9f 21       	and	r25, r15
     8f4:	a0 23       	and	r26, r16
     8f6:	b1 23       	and	r27, r17
     8f8:	00 97       	sbiw	r24, 0x00	; 0
     8fa:	a1 05       	cpc	r26, r1
     8fc:	b1 05       	cpc	r27, r1
     8fe:	21 f0       	breq	.+8      	; 0x908 <__stack+0xa9>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	a0 e0       	ldi	r26, 0x00	; 0
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	9a 01       	movw	r18, r20
     90a:	ab 01       	movw	r20, r22
     90c:	28 2b       	or	r18, r24
     90e:	39 2b       	or	r19, r25
     910:	4a 2b       	or	r20, r26
     912:	5b 2b       	or	r21, r27
     914:	da 01       	movw	r26, r20
     916:	c9 01       	movw	r24, r18
     918:	8f 77       	andi	r24, 0x7F	; 127
     91a:	90 70       	andi	r25, 0x00	; 0
     91c:	a0 70       	andi	r26, 0x00	; 0
     91e:	b0 70       	andi	r27, 0x00	; 0
     920:	80 34       	cpi	r24, 0x40	; 64
     922:	91 05       	cpc	r25, r1
     924:	a1 05       	cpc	r26, r1
     926:	b1 05       	cpc	r27, r1
     928:	39 f4       	brne	.+14     	; 0x938 <__stack+0xd9>
     92a:	27 ff       	sbrs	r18, 7
     92c:	09 c0       	rjmp	.+18     	; 0x940 <__stack+0xe1>
     92e:	20 5c       	subi	r18, 0xC0	; 192
     930:	3f 4f       	sbci	r19, 0xFF	; 255
     932:	4f 4f       	sbci	r20, 0xFF	; 255
     934:	5f 4f       	sbci	r21, 0xFF	; 255
     936:	04 c0       	rjmp	.+8      	; 0x940 <__stack+0xe1>
     938:	21 5c       	subi	r18, 0xC1	; 193
     93a:	3f 4f       	sbci	r19, 0xFF	; 255
     93c:	4f 4f       	sbci	r20, 0xFF	; 255
     93e:	5f 4f       	sbci	r21, 0xFF	; 255
     940:	e0 e0       	ldi	r30, 0x00	; 0
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	a0 e0       	ldi	r26, 0x00	; 0
     948:	3a 07       	cpc	r19, r26
     94a:	a0 e0       	ldi	r26, 0x00	; 0
     94c:	4a 07       	cpc	r20, r26
     94e:	a0 e4       	ldi	r26, 0x40	; 64
     950:	5a 07       	cpc	r21, r26
     952:	10 f0       	brcs	.+4      	; 0x958 <__stack+0xf9>
     954:	e1 e0       	ldi	r30, 0x01	; 1
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	79 01       	movw	r14, r18
     95a:	8a 01       	movw	r16, r20
     95c:	27 c0       	rjmp	.+78     	; 0x9ac <__stack+0x14d>
     95e:	60 38       	cpi	r22, 0x80	; 128
     960:	71 05       	cpc	r23, r1
     962:	64 f5       	brge	.+88     	; 0x9bc <__stack+0x15d>
     964:	fb 01       	movw	r30, r22
     966:	e1 58       	subi	r30, 0x81	; 129
     968:	ff 4f       	sbci	r31, 0xFF	; 255
     96a:	d8 01       	movw	r26, r16
     96c:	c7 01       	movw	r24, r14
     96e:	8f 77       	andi	r24, 0x7F	; 127
     970:	90 70       	andi	r25, 0x00	; 0
     972:	a0 70       	andi	r26, 0x00	; 0
     974:	b0 70       	andi	r27, 0x00	; 0
     976:	80 34       	cpi	r24, 0x40	; 64
     978:	91 05       	cpc	r25, r1
     97a:	a1 05       	cpc	r26, r1
     97c:	b1 05       	cpc	r27, r1
     97e:	39 f4       	brne	.+14     	; 0x98e <__stack+0x12f>
     980:	e7 fe       	sbrs	r14, 7
     982:	0d c0       	rjmp	.+26     	; 0x99e <__stack+0x13f>
     984:	80 e4       	ldi	r24, 0x40	; 64
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	a0 e0       	ldi	r26, 0x00	; 0
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	04 c0       	rjmp	.+8      	; 0x996 <__stack+0x137>
     98e:	8f e3       	ldi	r24, 0x3F	; 63
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	a0 e0       	ldi	r26, 0x00	; 0
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	e8 0e       	add	r14, r24
     998:	f9 1e       	adc	r15, r25
     99a:	0a 1f       	adc	r16, r26
     99c:	1b 1f       	adc	r17, r27
     99e:	17 ff       	sbrs	r17, 7
     9a0:	05 c0       	rjmp	.+10     	; 0x9ac <__stack+0x14d>
     9a2:	16 95       	lsr	r17
     9a4:	07 95       	ror	r16
     9a6:	f7 94       	ror	r15
     9a8:	e7 94       	ror	r14
     9aa:	31 96       	adiw	r30, 0x01	; 1
     9ac:	87 e0       	ldi	r24, 0x07	; 7
     9ae:	16 95       	lsr	r17
     9b0:	07 95       	ror	r16
     9b2:	f7 94       	ror	r15
     9b4:	e7 94       	ror	r14
     9b6:	8a 95       	dec	r24
     9b8:	d1 f7       	brne	.-12     	; 0x9ae <__stack+0x14f>
     9ba:	05 c0       	rjmp	.+10     	; 0x9c6 <__stack+0x167>
     9bc:	ee 24       	eor	r14, r14
     9be:	ff 24       	eor	r15, r15
     9c0:	87 01       	movw	r16, r14
     9c2:	ef ef       	ldi	r30, 0xFF	; 255
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	6e 2f       	mov	r22, r30
     9c8:	67 95       	ror	r22
     9ca:	66 27       	eor	r22, r22
     9cc:	67 95       	ror	r22
     9ce:	90 2f       	mov	r25, r16
     9d0:	9f 77       	andi	r25, 0x7F	; 127
     9d2:	d7 94       	ror	r13
     9d4:	dd 24       	eor	r13, r13
     9d6:	d7 94       	ror	r13
     9d8:	8e 2f       	mov	r24, r30
     9da:	86 95       	lsr	r24
     9dc:	49 2f       	mov	r20, r25
     9de:	46 2b       	or	r20, r22
     9e0:	58 2f       	mov	r21, r24
     9e2:	5d 29       	or	r21, r13
     9e4:	b7 01       	movw	r22, r14
     9e6:	ca 01       	movw	r24, r20
     9e8:	1f 91       	pop	r17
     9ea:	0f 91       	pop	r16
     9ec:	ff 90       	pop	r15
     9ee:	ef 90       	pop	r14
     9f0:	df 90       	pop	r13
     9f2:	08 95       	ret

000009f4 <__unpack_f>:
     9f4:	fc 01       	movw	r30, r24
     9f6:	db 01       	movw	r26, r22
     9f8:	40 81       	ld	r20, Z
     9fa:	51 81       	ldd	r21, Z+1	; 0x01
     9fc:	22 81       	ldd	r18, Z+2	; 0x02
     9fe:	62 2f       	mov	r22, r18
     a00:	6f 77       	andi	r22, 0x7F	; 127
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	22 1f       	adc	r18, r18
     a06:	22 27       	eor	r18, r18
     a08:	22 1f       	adc	r18, r18
     a0a:	93 81       	ldd	r25, Z+3	; 0x03
     a0c:	89 2f       	mov	r24, r25
     a0e:	88 0f       	add	r24, r24
     a10:	82 2b       	or	r24, r18
     a12:	28 2f       	mov	r18, r24
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	99 1f       	adc	r25, r25
     a18:	99 27       	eor	r25, r25
     a1a:	99 1f       	adc	r25, r25
     a1c:	11 96       	adiw	r26, 0x01	; 1
     a1e:	9c 93       	st	X, r25
     a20:	11 97       	sbiw	r26, 0x01	; 1
     a22:	21 15       	cp	r18, r1
     a24:	31 05       	cpc	r19, r1
     a26:	a9 f5       	brne	.+106    	; 0xa92 <__unpack_f+0x9e>
     a28:	41 15       	cp	r20, r1
     a2a:	51 05       	cpc	r21, r1
     a2c:	61 05       	cpc	r22, r1
     a2e:	71 05       	cpc	r23, r1
     a30:	11 f4       	brne	.+4      	; 0xa36 <__unpack_f+0x42>
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	37 c0       	rjmp	.+110    	; 0xaa4 <__unpack_f+0xb0>
     a36:	82 e8       	ldi	r24, 0x82	; 130
     a38:	9f ef       	ldi	r25, 0xFF	; 255
     a3a:	13 96       	adiw	r26, 0x03	; 3
     a3c:	9c 93       	st	X, r25
     a3e:	8e 93       	st	-X, r24
     a40:	12 97       	sbiw	r26, 0x02	; 2
     a42:	9a 01       	movw	r18, r20
     a44:	ab 01       	movw	r20, r22
     a46:	67 e0       	ldi	r22, 0x07	; 7
     a48:	22 0f       	add	r18, r18
     a4a:	33 1f       	adc	r19, r19
     a4c:	44 1f       	adc	r20, r20
     a4e:	55 1f       	adc	r21, r21
     a50:	6a 95       	dec	r22
     a52:	d1 f7       	brne	.-12     	; 0xa48 <__unpack_f+0x54>
     a54:	83 e0       	ldi	r24, 0x03	; 3
     a56:	8c 93       	st	X, r24
     a58:	0d c0       	rjmp	.+26     	; 0xa74 <__unpack_f+0x80>
     a5a:	22 0f       	add	r18, r18
     a5c:	33 1f       	adc	r19, r19
     a5e:	44 1f       	adc	r20, r20
     a60:	55 1f       	adc	r21, r21
     a62:	12 96       	adiw	r26, 0x02	; 2
     a64:	8d 91       	ld	r24, X+
     a66:	9c 91       	ld	r25, X
     a68:	13 97       	sbiw	r26, 0x03	; 3
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	13 96       	adiw	r26, 0x03	; 3
     a6e:	9c 93       	st	X, r25
     a70:	8e 93       	st	-X, r24
     a72:	12 97       	sbiw	r26, 0x02	; 2
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	38 07       	cpc	r19, r24
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	48 07       	cpc	r20, r24
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	58 07       	cpc	r21, r24
     a82:	58 f3       	brcs	.-42     	; 0xa5a <__unpack_f+0x66>
     a84:	14 96       	adiw	r26, 0x04	; 4
     a86:	2d 93       	st	X+, r18
     a88:	3d 93       	st	X+, r19
     a8a:	4d 93       	st	X+, r20
     a8c:	5c 93       	st	X, r21
     a8e:	17 97       	sbiw	r26, 0x07	; 7
     a90:	08 95       	ret
     a92:	2f 3f       	cpi	r18, 0xFF	; 255
     a94:	31 05       	cpc	r19, r1
     a96:	79 f4       	brne	.+30     	; 0xab6 <__unpack_f+0xc2>
     a98:	41 15       	cp	r20, r1
     a9a:	51 05       	cpc	r21, r1
     a9c:	61 05       	cpc	r22, r1
     a9e:	71 05       	cpc	r23, r1
     aa0:	19 f4       	brne	.+6      	; 0xaa8 <__unpack_f+0xb4>
     aa2:	84 e0       	ldi	r24, 0x04	; 4
     aa4:	8c 93       	st	X, r24
     aa6:	08 95       	ret
     aa8:	64 ff       	sbrs	r22, 4
     aaa:	03 c0       	rjmp	.+6      	; 0xab2 <__unpack_f+0xbe>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	8c 93       	st	X, r24
     ab0:	12 c0       	rjmp	.+36     	; 0xad6 <__unpack_f+0xe2>
     ab2:	1c 92       	st	X, r1
     ab4:	10 c0       	rjmp	.+32     	; 0xad6 <__unpack_f+0xe2>
     ab6:	2f 57       	subi	r18, 0x7F	; 127
     ab8:	30 40       	sbci	r19, 0x00	; 0
     aba:	13 96       	adiw	r26, 0x03	; 3
     abc:	3c 93       	st	X, r19
     abe:	2e 93       	st	-X, r18
     ac0:	12 97       	sbiw	r26, 0x02	; 2
     ac2:	83 e0       	ldi	r24, 0x03	; 3
     ac4:	8c 93       	st	X, r24
     ac6:	87 e0       	ldi	r24, 0x07	; 7
     ac8:	44 0f       	add	r20, r20
     aca:	55 1f       	adc	r21, r21
     acc:	66 1f       	adc	r22, r22
     ace:	77 1f       	adc	r23, r23
     ad0:	8a 95       	dec	r24
     ad2:	d1 f7       	brne	.-12     	; 0xac8 <__unpack_f+0xd4>
     ad4:	70 64       	ori	r23, 0x40	; 64
     ad6:	14 96       	adiw	r26, 0x04	; 4
     ad8:	4d 93       	st	X+, r20
     ada:	5d 93       	st	X+, r21
     adc:	6d 93       	st	X+, r22
     ade:	7c 93       	st	X, r23
     ae0:	17 97       	sbiw	r26, 0x07	; 7
     ae2:	08 95       	ret

00000ae4 <__fpcmp_parts_f>:
     ae4:	1f 93       	push	r17
     ae6:	dc 01       	movw	r26, r24
     ae8:	fb 01       	movw	r30, r22
     aea:	9c 91       	ld	r25, X
     aec:	92 30       	cpi	r25, 0x02	; 2
     aee:	08 f4       	brcc	.+2      	; 0xaf2 <__fpcmp_parts_f+0xe>
     af0:	47 c0       	rjmp	.+142    	; 0xb80 <__fpcmp_parts_f+0x9c>
     af2:	80 81       	ld	r24, Z
     af4:	82 30       	cpi	r24, 0x02	; 2
     af6:	08 f4       	brcc	.+2      	; 0xafa <__fpcmp_parts_f+0x16>
     af8:	43 c0       	rjmp	.+134    	; 0xb80 <__fpcmp_parts_f+0x9c>
     afa:	94 30       	cpi	r25, 0x04	; 4
     afc:	51 f4       	brne	.+20     	; 0xb12 <__fpcmp_parts_f+0x2e>
     afe:	11 96       	adiw	r26, 0x01	; 1
     b00:	1c 91       	ld	r17, X
     b02:	84 30       	cpi	r24, 0x04	; 4
     b04:	99 f5       	brne	.+102    	; 0xb6c <__fpcmp_parts_f+0x88>
     b06:	81 81       	ldd	r24, Z+1	; 0x01
     b08:	68 2f       	mov	r22, r24
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	61 1b       	sub	r22, r17
     b0e:	71 09       	sbc	r23, r1
     b10:	3f c0       	rjmp	.+126    	; 0xb90 <__fpcmp_parts_f+0xac>
     b12:	84 30       	cpi	r24, 0x04	; 4
     b14:	21 f0       	breq	.+8      	; 0xb1e <__fpcmp_parts_f+0x3a>
     b16:	92 30       	cpi	r25, 0x02	; 2
     b18:	31 f4       	brne	.+12     	; 0xb26 <__fpcmp_parts_f+0x42>
     b1a:	82 30       	cpi	r24, 0x02	; 2
     b1c:	b9 f1       	breq	.+110    	; 0xb8c <__fpcmp_parts_f+0xa8>
     b1e:	81 81       	ldd	r24, Z+1	; 0x01
     b20:	88 23       	and	r24, r24
     b22:	89 f1       	breq	.+98     	; 0xb86 <__fpcmp_parts_f+0xa2>
     b24:	2d c0       	rjmp	.+90     	; 0xb80 <__fpcmp_parts_f+0x9c>
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	1c 91       	ld	r17, X
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	82 30       	cpi	r24, 0x02	; 2
     b2e:	f1 f0       	breq	.+60     	; 0xb6c <__fpcmp_parts_f+0x88>
     b30:	81 81       	ldd	r24, Z+1	; 0x01
     b32:	18 17       	cp	r17, r24
     b34:	d9 f4       	brne	.+54     	; 0xb6c <__fpcmp_parts_f+0x88>
     b36:	12 96       	adiw	r26, 0x02	; 2
     b38:	2d 91       	ld	r18, X+
     b3a:	3c 91       	ld	r19, X
     b3c:	13 97       	sbiw	r26, 0x03	; 3
     b3e:	82 81       	ldd	r24, Z+2	; 0x02
     b40:	93 81       	ldd	r25, Z+3	; 0x03
     b42:	82 17       	cp	r24, r18
     b44:	93 07       	cpc	r25, r19
     b46:	94 f0       	brlt	.+36     	; 0xb6c <__fpcmp_parts_f+0x88>
     b48:	28 17       	cp	r18, r24
     b4a:	39 07       	cpc	r19, r25
     b4c:	bc f0       	brlt	.+46     	; 0xb7c <__fpcmp_parts_f+0x98>
     b4e:	14 96       	adiw	r26, 0x04	; 4
     b50:	8d 91       	ld	r24, X+
     b52:	9d 91       	ld	r25, X+
     b54:	0d 90       	ld	r0, X+
     b56:	bc 91       	ld	r27, X
     b58:	a0 2d       	mov	r26, r0
     b5a:	24 81       	ldd	r18, Z+4	; 0x04
     b5c:	35 81       	ldd	r19, Z+5	; 0x05
     b5e:	46 81       	ldd	r20, Z+6	; 0x06
     b60:	57 81       	ldd	r21, Z+7	; 0x07
     b62:	28 17       	cp	r18, r24
     b64:	39 07       	cpc	r19, r25
     b66:	4a 07       	cpc	r20, r26
     b68:	5b 07       	cpc	r21, r27
     b6a:	18 f4       	brcc	.+6      	; 0xb72 <__fpcmp_parts_f+0x8e>
     b6c:	11 23       	and	r17, r17
     b6e:	41 f0       	breq	.+16     	; 0xb80 <__fpcmp_parts_f+0x9c>
     b70:	0a c0       	rjmp	.+20     	; 0xb86 <__fpcmp_parts_f+0xa2>
     b72:	82 17       	cp	r24, r18
     b74:	93 07       	cpc	r25, r19
     b76:	a4 07       	cpc	r26, r20
     b78:	b5 07       	cpc	r27, r21
     b7a:	40 f4       	brcc	.+16     	; 0xb8c <__fpcmp_parts_f+0xa8>
     b7c:	11 23       	and	r17, r17
     b7e:	19 f0       	breq	.+6      	; 0xb86 <__fpcmp_parts_f+0xa2>
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	05 c0       	rjmp	.+10     	; 0xb90 <__fpcmp_parts_f+0xac>
     b86:	6f ef       	ldi	r22, 0xFF	; 255
     b88:	7f ef       	ldi	r23, 0xFF	; 255
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <__fpcmp_parts_f+0xac>
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	cb 01       	movw	r24, r22
     b92:	1f 91       	pop	r17
     b94:	08 95       	ret

00000b96 <MDIO_voidSetPinDirection>:

#include "DIO_interface.h"
#include "DIO_private.h"

void MDIO_voidSetPinDirection (u8 A_u8PortNo , u8 A_u8PinNo , u8 A_u8PinDirection)
{
     b96:	df 93       	push	r29
     b98:	cf 93       	push	r28
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	27 97       	sbiw	r28, 0x07	; 7
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	89 83       	std	Y+1, r24	; 0x01
     bac:	6a 83       	std	Y+2, r22	; 0x02
     bae:	4b 83       	std	Y+3, r20	; 0x03

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((A_u8PortNo <= DIO_PORTD) && (A_u8PinNo <= DIO_PIN7))
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	84 30       	cpi	r24, 0x04	; 4
     bb4:	08 f0       	brcs	.+2      	; 0xbb8 <MDIO_voidSetPinDirection+0x22>
     bb6:	ee c0       	rjmp	.+476    	; 0xd94 <MDIO_voidSetPinDirection+0x1fe>
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	88 30       	cpi	r24, 0x08	; 8
     bbc:	08 f0       	brcs	.+2      	; 0xbc0 <MDIO_voidSetPinDirection+0x2a>
     bbe:	ea c0       	rjmp	.+468    	; 0xd94 <MDIO_voidSetPinDirection+0x1fe>
	{
		if ( A_u8PinDirection == DIO_PIN_OUTPUT )
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	81 30       	cpi	r24, 0x01	; 1
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <MDIO_voidSetPinDirection+0x32>
     bc6:	6f c0       	rjmp	.+222    	; 0xca6 <MDIO_voidSetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (A_u8PortNo)
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	3f 83       	std	Y+7, r19	; 0x07
     bd0:	2e 83       	std	Y+6, r18	; 0x06
     bd2:	8e 81       	ldd	r24, Y+6	; 0x06
     bd4:	9f 81       	ldd	r25, Y+7	; 0x07
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	91 05       	cpc	r25, r1
     bda:	49 f1       	breq	.+82     	; 0xc2e <MDIO_voidSetPinDirection+0x98>
     bdc:	2e 81       	ldd	r18, Y+6	; 0x06
     bde:	3f 81       	ldd	r19, Y+7	; 0x07
     be0:	22 30       	cpi	r18, 0x02	; 2
     be2:	31 05       	cpc	r19, r1
     be4:	2c f4       	brge	.+10     	; 0xbf0 <MDIO_voidSetPinDirection+0x5a>
     be6:	8e 81       	ldd	r24, Y+6	; 0x06
     be8:	9f 81       	ldd	r25, Y+7	; 0x07
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	61 f0       	breq	.+24     	; 0xc06 <MDIO_voidSetPinDirection+0x70>
     bee:	d2 c0       	rjmp	.+420    	; 0xd94 <MDIO_voidSetPinDirection+0x1fe>
     bf0:	2e 81       	ldd	r18, Y+6	; 0x06
     bf2:	3f 81       	ldd	r19, Y+7	; 0x07
     bf4:	22 30       	cpi	r18, 0x02	; 2
     bf6:	31 05       	cpc	r19, r1
     bf8:	71 f1       	breq	.+92     	; 0xc56 <MDIO_voidSetPinDirection+0xc0>
     bfa:	8e 81       	ldd	r24, Y+6	; 0x06
     bfc:	9f 81       	ldd	r25, Y+7	; 0x07
     bfe:	83 30       	cpi	r24, 0x03	; 3
     c00:	91 05       	cpc	r25, r1
     c02:	e9 f1       	breq	.+122    	; 0xc7e <MDIO_voidSetPinDirection+0xe8>
     c04:	c7 c0       	rjmp	.+398    	; 0xd94 <MDIO_voidSetPinDirection+0x1fe>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,A_u8PinNo); break;
     c06:	aa e3       	ldi	r26, 0x3A	; 58
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	ea e3       	ldi	r30, 0x3A	; 58
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	48 2f       	mov	r20, r24
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 2e       	mov	r0, r18
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <MDIO_voidSetPinDirection+0x8e>
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	0a 94       	dec	r0
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <MDIO_voidSetPinDirection+0x8a>
     c28:	84 2b       	or	r24, r20
     c2a:	8c 93       	st	X, r24
     c2c:	b3 c0       	rjmp	.+358    	; 0xd94 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTB: SET_BIT(DDRB_Register,A_u8PinNo); break;
     c2e:	a7 e3       	ldi	r26, 0x37	; 55
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e7 e3       	ldi	r30, 0x37	; 55
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	48 2f       	mov	r20, r24
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	02 2e       	mov	r0, r18
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <MDIO_voidSetPinDirection+0xb6>
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	0a 94       	dec	r0
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <MDIO_voidSetPinDirection+0xb2>
     c50:	84 2b       	or	r24, r20
     c52:	8c 93       	st	X, r24
     c54:	9f c0       	rjmp	.+318    	; 0xd94 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTC: SET_BIT(DDRC_Register,A_u8PinNo); break;
     c56:	a4 e3       	ldi	r26, 0x34	; 52
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e4 e3       	ldi	r30, 0x34	; 52
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	48 2f       	mov	r20, r24
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 2e       	mov	r0, r18
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <MDIO_voidSetPinDirection+0xde>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	0a 94       	dec	r0
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <MDIO_voidSetPinDirection+0xda>
     c78:	84 2b       	or	r24, r20
     c7a:	8c 93       	st	X, r24
     c7c:	8b c0       	rjmp	.+278    	; 0xd94 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTD: SET_BIT(DDRD_Register,A_u8PinNo); break;
     c7e:	a1 e3       	ldi	r26, 0x31	; 49
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e1 e3       	ldi	r30, 0x31	; 49
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	48 2f       	mov	r20, r24
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 2e       	mov	r0, r18
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <MDIO_voidSetPinDirection+0x106>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	0a 94       	dec	r0
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <MDIO_voidSetPinDirection+0x102>
     ca0:	84 2b       	or	r24, r20
     ca2:	8c 93       	st	X, r24
     ca4:	77 c0       	rjmp	.+238    	; 0xd94 <MDIO_voidSetPinDirection+0x1fe>
			}
		}

		else if ( A_u8PinDirection == DIO_PIN_INPUT )
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	88 23       	and	r24, r24
     caa:	09 f0       	breq	.+2      	; 0xcae <MDIO_voidSetPinDirection+0x118>
     cac:	73 c0       	rjmp	.+230    	; 0xd94 <MDIO_voidSetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (A_u8PortNo)
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	3d 83       	std	Y+5, r19	; 0x05
     cb6:	2c 83       	std	Y+4, r18	; 0x04
     cb8:	8c 81       	ldd	r24, Y+4	; 0x04
     cba:	9d 81       	ldd	r25, Y+5	; 0x05
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	91 05       	cpc	r25, r1
     cc0:	59 f1       	breq	.+86     	; 0xd18 <MDIO_voidSetPinDirection+0x182>
     cc2:	2c 81       	ldd	r18, Y+4	; 0x04
     cc4:	3d 81       	ldd	r19, Y+5	; 0x05
     cc6:	22 30       	cpi	r18, 0x02	; 2
     cc8:	31 05       	cpc	r19, r1
     cca:	2c f4       	brge	.+10     	; 0xcd6 <MDIO_voidSetPinDirection+0x140>
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	9d 81       	ldd	r25, Y+5	; 0x05
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	69 f0       	breq	.+26     	; 0xcee <MDIO_voidSetPinDirection+0x158>
     cd4:	5f c0       	rjmp	.+190    	; 0xd94 <MDIO_voidSetPinDirection+0x1fe>
     cd6:	2c 81       	ldd	r18, Y+4	; 0x04
     cd8:	3d 81       	ldd	r19, Y+5	; 0x05
     cda:	22 30       	cpi	r18, 0x02	; 2
     cdc:	31 05       	cpc	r19, r1
     cde:	89 f1       	breq	.+98     	; 0xd42 <MDIO_voidSetPinDirection+0x1ac>
     ce0:	8c 81       	ldd	r24, Y+4	; 0x04
     ce2:	9d 81       	ldd	r25, Y+5	; 0x05
     ce4:	83 30       	cpi	r24, 0x03	; 3
     ce6:	91 05       	cpc	r25, r1
     ce8:	09 f4       	brne	.+2      	; 0xcec <MDIO_voidSetPinDirection+0x156>
     cea:	40 c0       	rjmp	.+128    	; 0xd6c <MDIO_voidSetPinDirection+0x1d6>
     cec:	53 c0       	rjmp	.+166    	; 0xd94 <MDIO_voidSetPinDirection+0x1fe>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,A_u8PinNo); break;
     cee:	aa e3       	ldi	r26, 0x3A	; 58
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	ea e3       	ldi	r30, 0x3A	; 58
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	48 2f       	mov	r20, r24
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	02 2e       	mov	r0, r18
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <MDIO_voidSetPinDirection+0x176>
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	0a 94       	dec	r0
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <MDIO_voidSetPinDirection+0x172>
     d10:	80 95       	com	r24
     d12:	84 23       	and	r24, r20
     d14:	8c 93       	st	X, r24
     d16:	3e c0       	rjmp	.+124    	; 0xd94 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTB: CLR_BIT(DDRB_Register,A_u8PinNo); break;
     d18:	a7 e3       	ldi	r26, 0x37	; 55
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e7 e3       	ldi	r30, 0x37	; 55
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	48 2f       	mov	r20, r24
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 2e       	mov	r0, r18
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <MDIO_voidSetPinDirection+0x1a0>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <MDIO_voidSetPinDirection+0x19c>
     d3a:	80 95       	com	r24
     d3c:	84 23       	and	r24, r20
     d3e:	8c 93       	st	X, r24
     d40:	29 c0       	rjmp	.+82     	; 0xd94 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTC: CLR_BIT(DDRC_Register,A_u8PinNo); break;
     d42:	a4 e3       	ldi	r26, 0x34	; 52
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e4 e3       	ldi	r30, 0x34	; 52
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	48 2f       	mov	r20, r24
     d4e:	8a 81       	ldd	r24, Y+2	; 0x02
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	02 2e       	mov	r0, r18
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <MDIO_voidSetPinDirection+0x1ca>
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	0a 94       	dec	r0
     d62:	e2 f7       	brpl	.-8      	; 0xd5c <MDIO_voidSetPinDirection+0x1c6>
     d64:	80 95       	com	r24
     d66:	84 23       	and	r24, r20
     d68:	8c 93       	st	X, r24
     d6a:	14 c0       	rjmp	.+40     	; 0xd94 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTD: CLR_BIT(DDRD_Register,A_u8PinNo); break;
     d6c:	a1 e3       	ldi	r26, 0x31	; 49
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e1 e3       	ldi	r30, 0x31	; 49
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	48 2f       	mov	r20, r24
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	02 2e       	mov	r0, r18
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <MDIO_voidSetPinDirection+0x1f4>
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	0a 94       	dec	r0
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <MDIO_voidSetPinDirection+0x1f0>
     d8e:	80 95       	com	r24
     d90:	84 23       	and	r24, r20
     d92:	8c 93       	st	X, r24
			}
		}
	}
}
     d94:	27 96       	adiw	r28, 0x07	; 7
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue (u8 A_u8PortNo , u8 A_u8PinNo  , u8 A_u8Value )
{	
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	27 97       	sbiw	r28, 0x07	; 7
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
     dba:	89 83       	std	Y+1, r24	; 0x01
     dbc:	6a 83       	std	Y+2, r22	; 0x02
     dbe:	4b 83       	std	Y+3, r20	; 0x03
		if(A_u8Value==DIO_PIN_HIGH)
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <MDIO_voidSetPinValue+0x22>
     dc6:	6f c0       	rjmp	.+222    	; 0xea6 <MDIO_voidSetPinValue+0x100>
		{
			switch (A_u8PortNo)
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	3f 83       	std	Y+7, r19	; 0x07
     dd0:	2e 83       	std	Y+6, r18	; 0x06
     dd2:	8e 81       	ldd	r24, Y+6	; 0x06
     dd4:	9f 81       	ldd	r25, Y+7	; 0x07
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	91 05       	cpc	r25, r1
     dda:	49 f1       	breq	.+82     	; 0xe2e <MDIO_voidSetPinValue+0x88>
     ddc:	2e 81       	ldd	r18, Y+6	; 0x06
     dde:	3f 81       	ldd	r19, Y+7	; 0x07
     de0:	22 30       	cpi	r18, 0x02	; 2
     de2:	31 05       	cpc	r19, r1
     de4:	2c f4       	brge	.+10     	; 0xdf0 <MDIO_voidSetPinValue+0x4a>
     de6:	8e 81       	ldd	r24, Y+6	; 0x06
     de8:	9f 81       	ldd	r25, Y+7	; 0x07
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	61 f0       	breq	.+24     	; 0xe06 <MDIO_voidSetPinValue+0x60>
     dee:	d2 c0       	rjmp	.+420    	; 0xf94 <MDIO_voidSetPinValue+0x1ee>
     df0:	2e 81       	ldd	r18, Y+6	; 0x06
     df2:	3f 81       	ldd	r19, Y+7	; 0x07
     df4:	22 30       	cpi	r18, 0x02	; 2
     df6:	31 05       	cpc	r19, r1
     df8:	71 f1       	breq	.+92     	; 0xe56 <MDIO_voidSetPinValue+0xb0>
     dfa:	8e 81       	ldd	r24, Y+6	; 0x06
     dfc:	9f 81       	ldd	r25, Y+7	; 0x07
     dfe:	83 30       	cpi	r24, 0x03	; 3
     e00:	91 05       	cpc	r25, r1
     e02:	e9 f1       	breq	.+122    	; 0xe7e <MDIO_voidSetPinValue+0xd8>
     e04:	c7 c0       	rjmp	.+398    	; 0xf94 <MDIO_voidSetPinValue+0x1ee>
			{
			case DIO_PORTA: SET_BIT(PORTA,A_u8PinNo); break;
     e06:	ab e3       	ldi	r26, 0x3B	; 59
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	eb e3       	ldi	r30, 0x3B	; 59
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <MDIO_voidSetPinValue+0x7e>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <MDIO_voidSetPinValue+0x7a>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	b3 c0       	rjmp	.+358    	; 0xf94 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTB: SET_BIT(PORTB,A_u8PinNo); break;
     e2e:	a8 e3       	ldi	r26, 0x38	; 56
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e8 e3       	ldi	r30, 0x38	; 56
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <MDIO_voidSetPinValue+0xa6>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <MDIO_voidSetPinValue+0xa2>
     e50:	84 2b       	or	r24, r20
     e52:	8c 93       	st	X, r24
     e54:	9f c0       	rjmp	.+318    	; 0xf94 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTC: SET_BIT(PORTC,A_u8PinNo); break;
     e56:	a5 e3       	ldi	r26, 0x35	; 53
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e5 e3       	ldi	r30, 0x35	; 53
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <MDIO_voidSetPinValue+0xce>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <MDIO_voidSetPinValue+0xca>
     e78:	84 2b       	or	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	8b c0       	rjmp	.+278    	; 0xf94 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTD: SET_BIT(PORTD,A_u8PinNo); break;
     e7e:	a2 e3       	ldi	r26, 0x32	; 50
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e2 e3       	ldi	r30, 0x32	; 50
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <MDIO_voidSetPinValue+0xf6>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <MDIO_voidSetPinValue+0xf2>
     ea0:	84 2b       	or	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	77 c0       	rjmp	.+238    	; 0xf94 <MDIO_voidSetPinValue+0x1ee>
			}
		}
		else if(A_u8Value==DIO_PIN_LOW)
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	88 23       	and	r24, r24
     eaa:	09 f0       	breq	.+2      	; 0xeae <MDIO_voidSetPinValue+0x108>
     eac:	73 c0       	rjmp	.+230    	; 0xf94 <MDIO_voidSetPinValue+0x1ee>
		{
			switch (A_u8PortNo)
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	3d 83       	std	Y+5, r19	; 0x05
     eb6:	2c 83       	std	Y+4, r18	; 0x04
     eb8:	8c 81       	ldd	r24, Y+4	; 0x04
     eba:	9d 81       	ldd	r25, Y+5	; 0x05
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	91 05       	cpc	r25, r1
     ec0:	59 f1       	breq	.+86     	; 0xf18 <MDIO_voidSetPinValue+0x172>
     ec2:	2c 81       	ldd	r18, Y+4	; 0x04
     ec4:	3d 81       	ldd	r19, Y+5	; 0x05
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	2c f4       	brge	.+10     	; 0xed6 <MDIO_voidSetPinValue+0x130>
     ecc:	8c 81       	ldd	r24, Y+4	; 0x04
     ece:	9d 81       	ldd	r25, Y+5	; 0x05
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	69 f0       	breq	.+26     	; 0xeee <MDIO_voidSetPinValue+0x148>
     ed4:	5f c0       	rjmp	.+190    	; 0xf94 <MDIO_voidSetPinValue+0x1ee>
     ed6:	2c 81       	ldd	r18, Y+4	; 0x04
     ed8:	3d 81       	ldd	r19, Y+5	; 0x05
     eda:	22 30       	cpi	r18, 0x02	; 2
     edc:	31 05       	cpc	r19, r1
     ede:	89 f1       	breq	.+98     	; 0xf42 <MDIO_voidSetPinValue+0x19c>
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	9d 81       	ldd	r25, Y+5	; 0x05
     ee4:	83 30       	cpi	r24, 0x03	; 3
     ee6:	91 05       	cpc	r25, r1
     ee8:	09 f4       	brne	.+2      	; 0xeec <MDIO_voidSetPinValue+0x146>
     eea:	40 c0       	rjmp	.+128    	; 0xf6c <MDIO_voidSetPinValue+0x1c6>
     eec:	53 c0       	rjmp	.+166    	; 0xf94 <MDIO_voidSetPinValue+0x1ee>
			{
			case DIO_PORTA: CLR_BIT(PORTA,A_u8PinNo); break;
     eee:	ab e3       	ldi	r26, 0x3B	; 59
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	eb e3       	ldi	r30, 0x3B	; 59
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <MDIO_voidSetPinValue+0x166>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <MDIO_voidSetPinValue+0x162>
     f10:	80 95       	com	r24
     f12:	84 23       	and	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	3e c0       	rjmp	.+124    	; 0xf94 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTB: CLR_BIT(PORTB,A_u8PinNo); break;
     f18:	a8 e3       	ldi	r26, 0x38	; 56
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e8 e3       	ldi	r30, 0x38	; 56
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	48 2f       	mov	r20, r24
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 2e       	mov	r0, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <MDIO_voidSetPinValue+0x190>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	0a 94       	dec	r0
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <MDIO_voidSetPinValue+0x18c>
     f3a:	80 95       	com	r24
     f3c:	84 23       	and	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	29 c0       	rjmp	.+82     	; 0xf94 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTC: CLR_BIT(PORTC,A_u8PinNo); break;
     f42:	a5 e3       	ldi	r26, 0x35	; 53
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e5 e3       	ldi	r30, 0x35	; 53
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <MDIO_voidSetPinValue+0x1ba>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <MDIO_voidSetPinValue+0x1b6>
     f64:	80 95       	com	r24
     f66:	84 23       	and	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	14 c0       	rjmp	.+40     	; 0xf94 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTD: CLR_BIT(PORTD,A_u8PinNo); break;
     f6c:	a2 e3       	ldi	r26, 0x32	; 50
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e2 e3       	ldi	r30, 0x32	; 50
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <MDIO_voidSetPinValue+0x1e4>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <MDIO_voidSetPinValue+0x1e0>
     f8e:	80 95       	com	r24
     f90:	84 23       	and	r24, r20
     f92:	8c 93       	st	X, r24
			}
		}
}
     f94:	27 96       	adiw	r28, 0x07	; 7
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	cd bf       	out	0x3d, r28	; 61
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <MDIO_voidClrPinValue>:

void MDIO_voidClrPinValue (u8 A_u8PortNo , u8 A_u8PinNo )
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	00 d0       	rcall	.+0      	; 0xfac <MDIO_voidClrPinValue+0x6>
     fac:	00 d0       	rcall	.+0      	; 0xfae <MDIO_voidClrPinValue+0x8>
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	89 83       	std	Y+1, r24	; 0x01
     fb4:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	3c 83       	std	Y+4, r19	; 0x04
     fbe:	2b 83       	std	Y+3, r18	; 0x03
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	9c 81       	ldd	r25, Y+4	; 0x04
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	91 05       	cpc	r25, r1
     fc8:	59 f1       	breq	.+86     	; 0x1020 <MDIO_voidClrPinValue+0x7a>
     fca:	2b 81       	ldd	r18, Y+3	; 0x03
     fcc:	3c 81       	ldd	r19, Y+4	; 0x04
     fce:	22 30       	cpi	r18, 0x02	; 2
     fd0:	31 05       	cpc	r19, r1
     fd2:	2c f4       	brge	.+10     	; 0xfde <MDIO_voidClrPinValue+0x38>
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	9c 81       	ldd	r25, Y+4	; 0x04
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	69 f0       	breq	.+26     	; 0xff6 <MDIO_voidClrPinValue+0x50>
     fdc:	5f c0       	rjmp	.+190    	; 0x109c <MDIO_voidClrPinValue+0xf6>
     fde:	2b 81       	ldd	r18, Y+3	; 0x03
     fe0:	3c 81       	ldd	r19, Y+4	; 0x04
     fe2:	22 30       	cpi	r18, 0x02	; 2
     fe4:	31 05       	cpc	r19, r1
     fe6:	89 f1       	breq	.+98     	; 0x104a <MDIO_voidClrPinValue+0xa4>
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	9c 81       	ldd	r25, Y+4	; 0x04
     fec:	83 30       	cpi	r24, 0x03	; 3
     fee:	91 05       	cpc	r25, r1
     ff0:	09 f4       	brne	.+2      	; 0xff4 <MDIO_voidClrPinValue+0x4e>
     ff2:	40 c0       	rjmp	.+128    	; 0x1074 <MDIO_voidClrPinValue+0xce>
     ff4:	53 c0       	rjmp	.+166    	; 0x109c <MDIO_voidClrPinValue+0xf6>
			{
			case DIO_PORTA: CLR_BIT(PORTA,A_u8PinNo); break;
     ff6:	ab e3       	ldi	r26, 0x3B	; 59
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	eb e3       	ldi	r30, 0x3B	; 59
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <MDIO_voidClrPinValue+0x6e>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <MDIO_voidClrPinValue+0x6a>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	3e c0       	rjmp	.+124    	; 0x109c <MDIO_voidClrPinValue+0xf6>
			case DIO_PORTB: CLR_BIT(PORTB,A_u8PinNo); break;
    1020:	a8 e3       	ldi	r26, 0x38	; 56
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e8 e3       	ldi	r30, 0x38	; 56
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <MDIO_voidClrPinValue+0x98>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <MDIO_voidClrPinValue+0x94>
    1042:	80 95       	com	r24
    1044:	84 23       	and	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	29 c0       	rjmp	.+82     	; 0x109c <MDIO_voidClrPinValue+0xf6>
			case DIO_PORTC: CLR_BIT(PORTC,A_u8PinNo); break;
    104a:	a5 e3       	ldi	r26, 0x35	; 53
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e5 e3       	ldi	r30, 0x35	; 53
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <MDIO_voidClrPinValue+0xc2>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <MDIO_voidClrPinValue+0xbe>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	14 c0       	rjmp	.+40     	; 0x109c <MDIO_voidClrPinValue+0xf6>
			case DIO_PORTD: CLR_BIT(PORTD,A_u8PinNo); break;
    1074:	a2 e3       	ldi	r26, 0x32	; 50
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e2 e3       	ldi	r30, 0x32	; 50
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <MDIO_voidClrPinValue+0xec>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <MDIO_voidClrPinValue+0xe8>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
			}
}
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <MDIO_voidGetPinValue>:

void MDIO_voidGetPinValue (u8 A_u8PortNo , u8 A_u8PinNo  , u8 * A_PtrData )
{
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <MDIO_voidGetPinValue+0x6>
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <MDIO_voidGetPinValue+0x8>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <MDIO_voidGetPinValue+0xa>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	6a 83       	std	Y+2, r22	; 0x02
    10bc:	5c 83       	std	Y+4, r21	; 0x04
    10be:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8PortNo)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	3e 83       	std	Y+6, r19	; 0x06
    10c8:	2d 83       	std	Y+5, r18	; 0x05
    10ca:	4d 81       	ldd	r20, Y+5	; 0x05
    10cc:	5e 81       	ldd	r21, Y+6	; 0x06
    10ce:	41 30       	cpi	r20, 0x01	; 1
    10d0:	51 05       	cpc	r21, r1
    10d2:	c1 f1       	breq	.+112    	; 0x1144 <MDIO_voidGetPinValue+0x9a>
    10d4:	8d 81       	ldd	r24, Y+5	; 0x05
    10d6:	9e 81       	ldd	r25, Y+6	; 0x06
    10d8:	82 30       	cpi	r24, 0x02	; 2
    10da:	91 05       	cpc	r25, r1
    10dc:	34 f4       	brge	.+12     	; 0x10ea <MDIO_voidGetPinValue+0x40>
    10de:	2d 81       	ldd	r18, Y+5	; 0x05
    10e0:	3e 81       	ldd	r19, Y+6	; 0x06
    10e2:	21 15       	cp	r18, r1
    10e4:	31 05       	cpc	r19, r1
    10e6:	71 f0       	breq	.+28     	; 0x1104 <MDIO_voidGetPinValue+0x5a>
    10e8:	8c c0       	rjmp	.+280    	; 0x1202 <MDIO_voidGetPinValue+0x158>
    10ea:	4d 81       	ldd	r20, Y+5	; 0x05
    10ec:	5e 81       	ldd	r21, Y+6	; 0x06
    10ee:	42 30       	cpi	r20, 0x02	; 2
    10f0:	51 05       	cpc	r21, r1
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <MDIO_voidGetPinValue+0x4c>
    10f4:	47 c0       	rjmp	.+142    	; 0x1184 <MDIO_voidGetPinValue+0xda>
    10f6:	8d 81       	ldd	r24, Y+5	; 0x05
    10f8:	9e 81       	ldd	r25, Y+6	; 0x06
    10fa:	83 30       	cpi	r24, 0x03	; 3
    10fc:	91 05       	cpc	r25, r1
    10fe:	09 f4       	brne	.+2      	; 0x1102 <MDIO_voidGetPinValue+0x58>
    1100:	61 c0       	rjmp	.+194    	; 0x11c4 <MDIO_voidGetPinValue+0x11a>
    1102:	7f c0       	rjmp	.+254    	; 0x1202 <MDIO_voidGetPinValue+0x158>
			{
			case DIO_PORTA: *A_PtrData=GET_BIT(DIO_PINA,A_u8PinNo); break;
    1104:	e9 e3       	ldi	r30, 0x39	; 57
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	02 c0       	rjmp	.+4      	; 0x111e <MDIO_voidGetPinValue+0x74>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	2a 95       	dec	r18
    1120:	e2 f7       	brpl	.-8      	; 0x111a <MDIO_voidGetPinValue+0x70>
    1122:	9a 01       	movw	r18, r20
    1124:	28 23       	and	r18, r24
    1126:	39 23       	and	r19, r25
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	88 2f       	mov	r24, r24
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	a9 01       	movw	r20, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <MDIO_voidGetPinValue+0x8c>
    1132:	55 95       	asr	r21
    1134:	47 95       	ror	r20
    1136:	8a 95       	dec	r24
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <MDIO_voidGetPinValue+0x88>
    113a:	ca 01       	movw	r24, r20
    113c:	eb 81       	ldd	r30, Y+3	; 0x03
    113e:	fc 81       	ldd	r31, Y+4	; 0x04
    1140:	80 83       	st	Z, r24
    1142:	5f c0       	rjmp	.+190    	; 0x1202 <MDIO_voidGetPinValue+0x158>
			case DIO_PORTB: *A_PtrData=GET_BIT(DIO_PINB,A_u8PinNo); break;
    1144:	e6 e3       	ldi	r30, 0x36	; 54
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 c0       	rjmp	.+4      	; 0x115e <MDIO_voidGetPinValue+0xb4>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	2a 95       	dec	r18
    1160:	e2 f7       	brpl	.-8      	; 0x115a <MDIO_voidGetPinValue+0xb0>
    1162:	9a 01       	movw	r18, r20
    1164:	28 23       	and	r18, r24
    1166:	39 23       	and	r19, r25
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	88 2f       	mov	r24, r24
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	a9 01       	movw	r20, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <MDIO_voidGetPinValue+0xcc>
    1172:	55 95       	asr	r21
    1174:	47 95       	ror	r20
    1176:	8a 95       	dec	r24
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <MDIO_voidGetPinValue+0xc8>
    117a:	ca 01       	movw	r24, r20
    117c:	eb 81       	ldd	r30, Y+3	; 0x03
    117e:	fc 81       	ldd	r31, Y+4	; 0x04
    1180:	80 83       	st	Z, r24
    1182:	3f c0       	rjmp	.+126    	; 0x1202 <MDIO_voidGetPinValue+0x158>
			case DIO_PORTC: *A_PtrData=GET_BIT(DIO_PINC,A_u8PinNo); break;
    1184:	e3 e3       	ldi	r30, 0x33	; 51
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	50 e0       	ldi	r21, 0x00	; 0
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 c0       	rjmp	.+4      	; 0x119e <MDIO_voidGetPinValue+0xf4>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	2a 95       	dec	r18
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <MDIO_voidGetPinValue+0xf0>
    11a2:	9a 01       	movw	r18, r20
    11a4:	28 23       	and	r18, r24
    11a6:	39 23       	and	r19, r25
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	88 2f       	mov	r24, r24
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	a9 01       	movw	r20, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <MDIO_voidGetPinValue+0x10c>
    11b2:	55 95       	asr	r21
    11b4:	47 95       	ror	r20
    11b6:	8a 95       	dec	r24
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <MDIO_voidGetPinValue+0x108>
    11ba:	ca 01       	movw	r24, r20
    11bc:	eb 81       	ldd	r30, Y+3	; 0x03
    11be:	fc 81       	ldd	r31, Y+4	; 0x04
    11c0:	80 83       	st	Z, r24
    11c2:	1f c0       	rjmp	.+62     	; 0x1202 <MDIO_voidGetPinValue+0x158>
			case DIO_PORTD: *A_PtrData=GET_BIT(DIO_PIND,A_u8PinNo); break;
    11c4:	e0 e3       	ldi	r30, 0x30	; 48
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <MDIO_voidGetPinValue+0x134>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	2a 95       	dec	r18
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <MDIO_voidGetPinValue+0x130>
    11e2:	9a 01       	movw	r18, r20
    11e4:	28 23       	and	r18, r24
    11e6:	39 23       	and	r19, r25
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	88 2f       	mov	r24, r24
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	a9 01       	movw	r20, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <MDIO_voidGetPinValue+0x14c>
    11f2:	55 95       	asr	r21
    11f4:	47 95       	ror	r20
    11f6:	8a 95       	dec	r24
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <MDIO_voidGetPinValue+0x148>
    11fa:	ca 01       	movw	r24, r20
    11fc:	eb 81       	ldd	r30, Y+3	; 0x03
    11fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1200:	80 83       	st	Z, r24
			}
}
    1202:	26 96       	adiw	r28, 0x06	; 6
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue (u8 A_u8PortNo , u8 A_u8PinNo)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <MDIO_voidTogglePinValue+0x6>
    121a:	00 d0       	rcall	.+0      	; 0x121c <MDIO_voidTogglePinValue+0x8>
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	3c 83       	std	Y+4, r19	; 0x04
    122c:	2b 83       	std	Y+3, r18	; 0x03
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	91 05       	cpc	r25, r1
    1236:	49 f1       	breq	.+82     	; 0x128a <MDIO_voidTogglePinValue+0x76>
    1238:	2b 81       	ldd	r18, Y+3	; 0x03
    123a:	3c 81       	ldd	r19, Y+4	; 0x04
    123c:	22 30       	cpi	r18, 0x02	; 2
    123e:	31 05       	cpc	r19, r1
    1240:	2c f4       	brge	.+10     	; 0x124c <MDIO_voidTogglePinValue+0x38>
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	61 f0       	breq	.+24     	; 0x1262 <MDIO_voidTogglePinValue+0x4e>
    124a:	5a c0       	rjmp	.+180    	; 0x1300 <MDIO_voidTogglePinValue+0xec>
    124c:	2b 81       	ldd	r18, Y+3	; 0x03
    124e:	3c 81       	ldd	r19, Y+4	; 0x04
    1250:	22 30       	cpi	r18, 0x02	; 2
    1252:	31 05       	cpc	r19, r1
    1254:	71 f1       	breq	.+92     	; 0x12b2 <MDIO_voidTogglePinValue+0x9e>
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	83 30       	cpi	r24, 0x03	; 3
    125c:	91 05       	cpc	r25, r1
    125e:	e9 f1       	breq	.+122    	; 0x12da <MDIO_voidTogglePinValue+0xc6>
    1260:	4f c0       	rjmp	.+158    	; 0x1300 <MDIO_voidTogglePinValue+0xec>
			{
			case DIO_PORTA: TOG_BIT(PORTA,A_u8PinNo); break;
    1262:	ab e3       	ldi	r26, 0x3B	; 59
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	eb e3       	ldi	r30, 0x3B	; 59
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 2e       	mov	r0, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <MDIO_voidTogglePinValue+0x6c>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <MDIO_voidTogglePinValue+0x68>
    1284:	84 27       	eor	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	3b c0       	rjmp	.+118    	; 0x1300 <MDIO_voidTogglePinValue+0xec>
			case DIO_PORTB: TOG_BIT(PORTB,A_u8PinNo); break;
    128a:	a8 e3       	ldi	r26, 0x38	; 56
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e8 e3       	ldi	r30, 0x38	; 56
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	48 2f       	mov	r20, r24
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 2e       	mov	r0, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <MDIO_voidTogglePinValue+0x94>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	0a 94       	dec	r0
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <MDIO_voidTogglePinValue+0x90>
    12ac:	84 27       	eor	r24, r20
    12ae:	8c 93       	st	X, r24
    12b0:	27 c0       	rjmp	.+78     	; 0x1300 <MDIO_voidTogglePinValue+0xec>
			case DIO_PORTC: TOG_BIT(PORTC,A_u8PinNo); break;
    12b2:	a5 e3       	ldi	r26, 0x35	; 53
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e5 e3       	ldi	r30, 0x35	; 53
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	48 2f       	mov	r20, r24
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	02 2e       	mov	r0, r18
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <MDIO_voidTogglePinValue+0xbc>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	0a 94       	dec	r0
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <MDIO_voidTogglePinValue+0xb8>
    12d4:	84 27       	eor	r24, r20
    12d6:	8c 93       	st	X, r24
    12d8:	13 c0       	rjmp	.+38     	; 0x1300 <MDIO_voidTogglePinValue+0xec>
			case DIO_PORTD: TOG_BIT(PORTD,A_u8PinNo); break;
    12da:	a2 e3       	ldi	r26, 0x32	; 50
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e2 e3       	ldi	r30, 0x32	; 50
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	48 2f       	mov	r20, r24
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	02 2e       	mov	r0, r18
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <MDIO_voidTogglePinValue+0xe4>
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	0a 94       	dec	r0
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <MDIO_voidTogglePinValue+0xe0>
    12fc:	84 27       	eor	r24, r20
    12fe:	8c 93       	st	X, r24
			}
}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <MDIO_voidSetPortDirection>:


void MDIO_voidSetPortDirection (u8 A_u8PortNo , u8 A_u8PinDirection)
{
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	00 d0       	rcall	.+0      	; 0x1314 <MDIO_voidSetPortDirection+0x6>
    1314:	00 d0       	rcall	.+0      	; 0x1316 <MDIO_voidSetPortDirection+0x8>
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	89 83       	std	Y+1, r24	; 0x01
    131c:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	3c 83       	std	Y+4, r19	; 0x04
    1326:	2b 83       	std	Y+3, r18	; 0x03
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	9c 81       	ldd	r25, Y+4	; 0x04
    132c:	81 30       	cpi	r24, 0x01	; 1
    132e:	91 05       	cpc	r25, r1
    1330:	d1 f0       	breq	.+52     	; 0x1366 <MDIO_voidSetPortDirection+0x58>
    1332:	2b 81       	ldd	r18, Y+3	; 0x03
    1334:	3c 81       	ldd	r19, Y+4	; 0x04
    1336:	22 30       	cpi	r18, 0x02	; 2
    1338:	31 05       	cpc	r19, r1
    133a:	2c f4       	brge	.+10     	; 0x1346 <MDIO_voidSetPortDirection+0x38>
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	61 f0       	breq	.+24     	; 0x135c <MDIO_voidSetPortDirection+0x4e>
    1344:	1e c0       	rjmp	.+60     	; 0x1382 <MDIO_voidSetPortDirection+0x74>
    1346:	2b 81       	ldd	r18, Y+3	; 0x03
    1348:	3c 81       	ldd	r19, Y+4	; 0x04
    134a:	22 30       	cpi	r18, 0x02	; 2
    134c:	31 05       	cpc	r19, r1
    134e:	81 f0       	breq	.+32     	; 0x1370 <MDIO_voidSetPortDirection+0x62>
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	83 30       	cpi	r24, 0x03	; 3
    1356:	91 05       	cpc	r25, r1
    1358:	81 f0       	breq	.+32     	; 0x137a <MDIO_voidSetPortDirection+0x6c>
    135a:	13 c0       	rjmp	.+38     	; 0x1382 <MDIO_voidSetPortDirection+0x74>
			{
			case DIO_PORTA: DDRA_Register= A_u8PinDirection; break;
    135c:	ea e3       	ldi	r30, 0x3A	; 58
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	80 83       	st	Z, r24
    1364:	0e c0       	rjmp	.+28     	; 0x1382 <MDIO_voidSetPortDirection+0x74>
			case DIO_PORTB: DDRB_Register= A_u8PinDirection; break;
    1366:	e7 e3       	ldi	r30, 0x37	; 55
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	80 83       	st	Z, r24
    136e:	09 c0       	rjmp	.+18     	; 0x1382 <MDIO_voidSetPortDirection+0x74>
			case DIO_PORTC: DDRC_Register= A_u8PinDirection; break;
    1370:	e4 e3       	ldi	r30, 0x34	; 52
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	80 83       	st	Z, r24
    1378:	04 c0       	rjmp	.+8      	; 0x1382 <MDIO_voidSetPortDirection+0x74>
			case DIO_PORTD: DDRD_Register= A_u8PinDirection; break;
    137a:	e1 e3       	ldi	r30, 0x31	; 49
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	80 83       	st	Z, r24
			}
}
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue   (u8 A_u8PortNo  , u8 A_u8Value)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	00 d0       	rcall	.+0      	; 0x1396 <MDIO_voidSetPortValue+0x6>
    1396:	00 d0       	rcall	.+0      	; 0x1398 <MDIO_voidSetPortValue+0x8>
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	3c 83       	std	Y+4, r19	; 0x04
    13a8:	2b 83       	std	Y+3, r18	; 0x03
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	91 05       	cpc	r25, r1
    13b2:	d1 f0       	breq	.+52     	; 0x13e8 <MDIO_voidSetPortValue+0x58>
    13b4:	2b 81       	ldd	r18, Y+3	; 0x03
    13b6:	3c 81       	ldd	r19, Y+4	; 0x04
    13b8:	22 30       	cpi	r18, 0x02	; 2
    13ba:	31 05       	cpc	r19, r1
    13bc:	2c f4       	brge	.+10     	; 0x13c8 <MDIO_voidSetPortValue+0x38>
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	61 f0       	breq	.+24     	; 0x13de <MDIO_voidSetPortValue+0x4e>
    13c6:	1e c0       	rjmp	.+60     	; 0x1404 <MDIO_voidSetPortValue+0x74>
    13c8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ca:	3c 81       	ldd	r19, Y+4	; 0x04
    13cc:	22 30       	cpi	r18, 0x02	; 2
    13ce:	31 05       	cpc	r19, r1
    13d0:	81 f0       	breq	.+32     	; 0x13f2 <MDIO_voidSetPortValue+0x62>
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	83 30       	cpi	r24, 0x03	; 3
    13d8:	91 05       	cpc	r25, r1
    13da:	81 f0       	breq	.+32     	; 0x13fc <MDIO_voidSetPortValue+0x6c>
    13dc:	13 c0       	rjmp	.+38     	; 0x1404 <MDIO_voidSetPortValue+0x74>
			{
			case DIO_PORTA: PORTA= A_u8Value; break;
    13de:	eb e3       	ldi	r30, 0x3B	; 59
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	80 83       	st	Z, r24
    13e6:	0e c0       	rjmp	.+28     	; 0x1404 <MDIO_voidSetPortValue+0x74>
			case DIO_PORTB: PORTB= A_u8Value; break;
    13e8:	e8 e3       	ldi	r30, 0x38	; 56
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	80 83       	st	Z, r24
    13f0:	09 c0       	rjmp	.+18     	; 0x1404 <MDIO_voidSetPortValue+0x74>
			case DIO_PORTC: PORTC= A_u8Value; break;
    13f2:	e5 e3       	ldi	r30, 0x35	; 53
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	80 83       	st	Z, r24
    13fa:	04 c0       	rjmp	.+8      	; 0x1404 <MDIO_voidSetPortValue+0x74>
			case DIO_PORTD: PORTD= A_u8Value; break;
    13fc:	e2 e3       	ldi	r30, 0x32	; 50
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	80 83       	st	Z, r24
			}
}
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <MDIO_voidClrPortValue>:

void MDIO_voidClrPortValue (u8 A_u8PortNo)
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	00 d0       	rcall	.+0      	; 0x1418 <MDIO_voidClrPortValue+0x6>
    1418:	0f 92       	push	r0
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8PortNo)
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	3b 83       	std	Y+3, r19	; 0x03
    1428:	2a 83       	std	Y+2, r18	; 0x02
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	9b 81       	ldd	r25, Y+3	; 0x03
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	91 05       	cpc	r25, r1
    1432:	c9 f0       	breq	.+50     	; 0x1466 <MDIO_voidClrPortValue+0x54>
    1434:	2a 81       	ldd	r18, Y+2	; 0x02
    1436:	3b 81       	ldd	r19, Y+3	; 0x03
    1438:	22 30       	cpi	r18, 0x02	; 2
    143a:	31 05       	cpc	r19, r1
    143c:	2c f4       	brge	.+10     	; 0x1448 <MDIO_voidClrPortValue+0x36>
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	9b 81       	ldd	r25, Y+3	; 0x03
    1442:	00 97       	sbiw	r24, 0x00	; 0
    1444:	61 f0       	breq	.+24     	; 0x145e <MDIO_voidClrPortValue+0x4c>
    1446:	1a c0       	rjmp	.+52     	; 0x147c <MDIO_voidClrPortValue+0x6a>
    1448:	2a 81       	ldd	r18, Y+2	; 0x02
    144a:	3b 81       	ldd	r19, Y+3	; 0x03
    144c:	22 30       	cpi	r18, 0x02	; 2
    144e:	31 05       	cpc	r19, r1
    1450:	71 f0       	breq	.+28     	; 0x146e <MDIO_voidClrPortValue+0x5c>
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	9b 81       	ldd	r25, Y+3	; 0x03
    1456:	83 30       	cpi	r24, 0x03	; 3
    1458:	91 05       	cpc	r25, r1
    145a:	69 f0       	breq	.+26     	; 0x1476 <MDIO_voidClrPortValue+0x64>
    145c:	0f c0       	rjmp	.+30     	; 0x147c <MDIO_voidClrPortValue+0x6a>
			{
			case DIO_PORTA: PORTA= DIO_PORT_LOW; break;
    145e:	eb e3       	ldi	r30, 0x3B	; 59
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	10 82       	st	Z, r1
    1464:	0b c0       	rjmp	.+22     	; 0x147c <MDIO_voidClrPortValue+0x6a>
			case DIO_PORTB: PORTB= DIO_PORT_LOW; break;
    1466:	e8 e3       	ldi	r30, 0x38	; 56
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	10 82       	st	Z, r1
    146c:	07 c0       	rjmp	.+14     	; 0x147c <MDIO_voidClrPortValue+0x6a>
			case DIO_PORTC: PORTC= DIO_PORT_LOW; break;
    146e:	e5 e3       	ldi	r30, 0x35	; 53
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	10 82       	st	Z, r1
    1474:	03 c0       	rjmp	.+6      	; 0x147c <MDIO_voidClrPortValue+0x6a>
			case DIO_PORTD: PORTD= DIO_PORT_LOW; break;
    1476:	e2 e3       	ldi	r30, 0x32	; 50
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	10 82       	st	Z, r1
			}
}
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret

00001488 <MDIO_voidGetPortValue>:

void MDIO_voidGetPortValue (u8 A_u8PortNo  , u8 * A_PtrData )
{
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	00 d0       	rcall	.+0      	; 0x148e <MDIO_voidGetPortValue+0x6>
    148e:	00 d0       	rcall	.+0      	; 0x1490 <MDIO_voidGetPortValue+0x8>
    1490:	0f 92       	push	r0
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	7b 83       	std	Y+3, r23	; 0x03
    149a:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	3d 83       	std	Y+5, r19	; 0x05
    14a4:	2c 83       	std	Y+4, r18	; 0x04
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
    14a8:	9d 81       	ldd	r25, Y+5	; 0x05
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	91 05       	cpc	r25, r1
    14ae:	e1 f0       	breq	.+56     	; 0x14e8 <MDIO_voidGetPortValue+0x60>
    14b0:	2c 81       	ldd	r18, Y+4	; 0x04
    14b2:	3d 81       	ldd	r19, Y+5	; 0x05
    14b4:	22 30       	cpi	r18, 0x02	; 2
    14b6:	31 05       	cpc	r19, r1
    14b8:	2c f4       	brge	.+10     	; 0x14c4 <MDIO_voidGetPortValue+0x3c>
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	9d 81       	ldd	r25, Y+5	; 0x05
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	61 f0       	breq	.+24     	; 0x14da <MDIO_voidGetPortValue+0x52>
    14c2:	26 c0       	rjmp	.+76     	; 0x1510 <MDIO_voidGetPortValue+0x88>
    14c4:	2c 81       	ldd	r18, Y+4	; 0x04
    14c6:	3d 81       	ldd	r19, Y+5	; 0x05
    14c8:	22 30       	cpi	r18, 0x02	; 2
    14ca:	31 05       	cpc	r19, r1
    14cc:	a1 f0       	breq	.+40     	; 0x14f6 <MDIO_voidGetPortValue+0x6e>
    14ce:	8c 81       	ldd	r24, Y+4	; 0x04
    14d0:	9d 81       	ldd	r25, Y+5	; 0x05
    14d2:	83 30       	cpi	r24, 0x03	; 3
    14d4:	91 05       	cpc	r25, r1
    14d6:	b1 f0       	breq	.+44     	; 0x1504 <MDIO_voidGetPortValue+0x7c>
    14d8:	1b c0       	rjmp	.+54     	; 0x1510 <MDIO_voidGetPortValue+0x88>
			{
			case DIO_PORTA: *A_PtrData= DIO_PINA; break;
    14da:	e9 e3       	ldi	r30, 0x39	; 57
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	ea 81       	ldd	r30, Y+2	; 0x02
    14e2:	fb 81       	ldd	r31, Y+3	; 0x03
    14e4:	80 83       	st	Z, r24
    14e6:	14 c0       	rjmp	.+40     	; 0x1510 <MDIO_voidGetPortValue+0x88>
			case DIO_PORTB: *A_PtrData= DIO_PINB; break;
    14e8:	e6 e3       	ldi	r30, 0x36	; 54
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	ea 81       	ldd	r30, Y+2	; 0x02
    14f0:	fb 81       	ldd	r31, Y+3	; 0x03
    14f2:	80 83       	st	Z, r24
    14f4:	0d c0       	rjmp	.+26     	; 0x1510 <MDIO_voidGetPortValue+0x88>
			case DIO_PORTC: *A_PtrData= DIO_PINC; break;
    14f6:	e3 e3       	ldi	r30, 0x33	; 51
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	ea 81       	ldd	r30, Y+2	; 0x02
    14fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1500:	80 83       	st	Z, r24
    1502:	06 c0       	rjmp	.+12     	; 0x1510 <MDIO_voidGetPortValue+0x88>
			case DIO_PORTD: *A_PtrData= DIO_PIND; break;
    1504:	e0 e3       	ldi	r30, 0x30	; 48
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	ea 81       	ldd	r30, Y+2	; 0x02
    150c:	fb 81       	ldd	r31, Y+3	; 0x03
    150e:	80 83       	st	Z, r24
			}
}
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <MDIO_voidTogglePortValue>:

void MDIO_voidTogglePortValue (u8 A_u8PortNo)
{
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	00 d0       	rcall	.+0      	; 0x1526 <MDIO_voidTogglePortValue+0x6>
    1526:	0f 92       	push	r0
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	89 83       	std	Y+1, r24	; 0x01
		switch (A_u8PortNo)
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	3b 83       	std	Y+3, r19	; 0x03
    1536:	2a 83       	std	Y+2, r18	; 0x02
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	9b 81       	ldd	r25, Y+3	; 0x03
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	91 05       	cpc	r25, r1
    1540:	e9 f0       	breq	.+58     	; 0x157c <MDIO_voidTogglePortValue+0x5c>
    1542:	2a 81       	ldd	r18, Y+2	; 0x02
    1544:	3b 81       	ldd	r19, Y+3	; 0x03
    1546:	22 30       	cpi	r18, 0x02	; 2
    1548:	31 05       	cpc	r19, r1
    154a:	2c f4       	brge	.+10     	; 0x1556 <MDIO_voidTogglePortValue+0x36>
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	9b 81       	ldd	r25, Y+3	; 0x03
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	61 f0       	breq	.+24     	; 0x156c <MDIO_voidTogglePortValue+0x4c>
    1554:	2a c0       	rjmp	.+84     	; 0x15aa <MDIO_voidTogglePortValue+0x8a>
    1556:	2a 81       	ldd	r18, Y+2	; 0x02
    1558:	3b 81       	ldd	r19, Y+3	; 0x03
    155a:	22 30       	cpi	r18, 0x02	; 2
    155c:	31 05       	cpc	r19, r1
    155e:	b1 f0       	breq	.+44     	; 0x158c <MDIO_voidTogglePortValue+0x6c>
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	9b 81       	ldd	r25, Y+3	; 0x03
    1564:	83 30       	cpi	r24, 0x03	; 3
    1566:	91 05       	cpc	r25, r1
    1568:	c9 f0       	breq	.+50     	; 0x159c <MDIO_voidTogglePortValue+0x7c>
    156a:	1f c0       	rjmp	.+62     	; 0x15aa <MDIO_voidTogglePortValue+0x8a>
			{
			case DIO_PORTA: PORTA =~ PORTA; break;
    156c:	ab e3       	ldi	r26, 0x3B	; 59
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	eb e3       	ldi	r30, 0x3B	; 59
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	80 95       	com	r24
    1578:	8c 93       	st	X, r24
    157a:	17 c0       	rjmp	.+46     	; 0x15aa <MDIO_voidTogglePortValue+0x8a>
			case DIO_PORTB: PORTB =~ PORTB; break;
    157c:	a8 e3       	ldi	r26, 0x38	; 56
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e8 e3       	ldi	r30, 0x38	; 56
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	80 95       	com	r24
    1588:	8c 93       	st	X, r24
    158a:	0f c0       	rjmp	.+30     	; 0x15aa <MDIO_voidTogglePortValue+0x8a>
			case DIO_PORTC: PORTC =~ PORTC; break;
    158c:	a5 e3       	ldi	r26, 0x35	; 53
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e5 e3       	ldi	r30, 0x35	; 53
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	80 95       	com	r24
    1598:	8c 93       	st	X, r24
    159a:	07 c0       	rjmp	.+14     	; 0x15aa <MDIO_voidTogglePortValue+0x8a>
			case DIO_PORTD: PORTD =~ PORTD; break;
    159c:	a2 e3       	ldi	r26, 0x32	; 50
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e2 e3       	ldi	r30, 0x32	; 50
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	80 95       	com	r24
    15a8:	8c 93       	st	X, r24
			}
}
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <MDIO_voidWriteHighNibbles>:
void MDIO_voidWriteHighNibbles ( u8 A_u8PORT , u8 A_u8value  )
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <MDIO_voidWriteHighNibbles+0x6>
    15bc:	00 d0       	rcall	.+0      	; 0x15be <MDIO_voidWriteHighNibbles+0x8>
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PORT)
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	3c 83       	std	Y+4, r19	; 0x04
    15ce:	2b 83       	std	Y+3, r18	; 0x03
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	9c 81       	ldd	r25, Y+4	; 0x04
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	91 05       	cpc	r25, r1
    15d8:	29 f1       	breq	.+74     	; 0x1624 <MDIO_voidWriteHighNibbles+0x6e>
    15da:	2b 81       	ldd	r18, Y+3	; 0x03
    15dc:	3c 81       	ldd	r19, Y+4	; 0x04
    15de:	22 30       	cpi	r18, 0x02	; 2
    15e0:	31 05       	cpc	r19, r1
    15e2:	2c f4       	brge	.+10     	; 0x15ee <MDIO_voidWriteHighNibbles+0x38>
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	61 f0       	breq	.+24     	; 0x1604 <MDIO_voidWriteHighNibbles+0x4e>
    15ec:	4a c0       	rjmp	.+148    	; 0x1682 <MDIO_voidWriteHighNibbles+0xcc>
    15ee:	2b 81       	ldd	r18, Y+3	; 0x03
    15f0:	3c 81       	ldd	r19, Y+4	; 0x04
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	31 f1       	breq	.+76     	; 0x1644 <MDIO_voidWriteHighNibbles+0x8e>
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	9c 81       	ldd	r25, Y+4	; 0x04
    15fc:	83 30       	cpi	r24, 0x03	; 3
    15fe:	91 05       	cpc	r25, r1
    1600:	89 f1       	breq	.+98     	; 0x1664 <MDIO_voidWriteHighNibbles+0xae>
    1602:	3f c0       	rjmp	.+126    	; 0x1682 <MDIO_voidWriteHighNibbles+0xcc>
		{
		case DIO_PORTA :
			PORTA&=0x0f;                   // make sure the high bits = 0000
    1604:	ab e3       	ldi	r26, 0x3B	; 59
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	eb e3       	ldi	r30, 0x3B	; 59
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8f 70       	andi	r24, 0x0F	; 15
    1610:	8c 93       	st	X, r24
			PORTA|=A_u8value;			//Set only the high nibble of the port A by the given value
    1612:	ab e3       	ldi	r26, 0x3B	; 59
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	eb e3       	ldi	r30, 0x3B	; 59
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	90 81       	ld	r25, Z
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	89 2b       	or	r24, r25
    1620:	8c 93       	st	X, r24
    1622:	2f c0       	rjmp	.+94     	; 0x1682 <MDIO_voidWriteHighNibbles+0xcc>
			break ;
		case DIO_PORTB:
			PORTB&=0x0f;                 //Set only the high nibble of the port B by the given value
    1624:	a8 e3       	ldi	r26, 0x38	; 56
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e8 e3       	ldi	r30, 0x38	; 56
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	8f 70       	andi	r24, 0x0F	; 15
    1630:	8c 93       	st	X, r24
			PORTB|=A_u8value;
    1632:	a8 e3       	ldi	r26, 0x38	; 56
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e8 e3       	ldi	r30, 0x38	; 56
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	90 81       	ld	r25, Z
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	89 2b       	or	r24, r25
    1640:	8c 93       	st	X, r24
    1642:	1f c0       	rjmp	.+62     	; 0x1682 <MDIO_voidWriteHighNibbles+0xcc>
			break ;
		case DIO_PORTC :
			PORTC&=0x0f;                 //Set only the high nibble of the port C by the given value
    1644:	a5 e3       	ldi	r26, 0x35	; 53
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e5 e3       	ldi	r30, 0x35	; 53
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	8f 70       	andi	r24, 0x0F	; 15
    1650:	8c 93       	st	X, r24
			PORTC|=A_u8value;
    1652:	a5 e3       	ldi	r26, 0x35	; 53
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e5 e3       	ldi	r30, 0x35	; 53
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	90 81       	ld	r25, Z
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	89 2b       	or	r24, r25
    1660:	8c 93       	st	X, r24
    1662:	0f c0       	rjmp	.+30     	; 0x1682 <MDIO_voidWriteHighNibbles+0xcc>
			break ;
		case DIO_PORTD:
			PORTD&=0x0f;                 //Set only the high nibble of the port D by the given value
    1664:	a2 e3       	ldi	r26, 0x32	; 50
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e2 e3       	ldi	r30, 0x32	; 50
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	8f 70       	andi	r24, 0x0F	; 15
    1670:	8c 93       	st	X, r24
			PORTD|=A_u8value;
    1672:	a2 e3       	ldi	r26, 0x32	; 50
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e2 e3       	ldi	r30, 0x32	; 50
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	90 81       	ld	r25, Z
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	89 2b       	or	r24, r25
    1680:	8c 93       	st	X, r24
			break ;
		}
}
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <MDIO_voidWriteLowNibbles>:
void MDIO_voidWriteLowNibbles  ( u8 A_u8PORT , u8 A_u8value )
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	00 d0       	rcall	.+0      	; 0x1696 <MDIO_voidWriteLowNibbles+0x6>
    1696:	00 d0       	rcall	.+0      	; 0x1698 <MDIO_voidWriteLowNibbles+0x8>
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PORT)
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	3c 83       	std	Y+4, r19	; 0x04
    16a8:	2b 83       	std	Y+3, r18	; 0x03
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	9c 81       	ldd	r25, Y+4	; 0x04
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	91 05       	cpc	r25, r1
    16b2:	29 f1       	breq	.+74     	; 0x16fe <MDIO_voidWriteLowNibbles+0x6e>
    16b4:	2b 81       	ldd	r18, Y+3	; 0x03
    16b6:	3c 81       	ldd	r19, Y+4	; 0x04
    16b8:	22 30       	cpi	r18, 0x02	; 2
    16ba:	31 05       	cpc	r19, r1
    16bc:	2c f4       	brge	.+10     	; 0x16c8 <MDIO_voidWriteLowNibbles+0x38>
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	61 f0       	breq	.+24     	; 0x16de <MDIO_voidWriteLowNibbles+0x4e>
    16c6:	4a c0       	rjmp	.+148    	; 0x175c <MDIO_voidWriteLowNibbles+0xcc>
    16c8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ca:	3c 81       	ldd	r19, Y+4	; 0x04
    16cc:	22 30       	cpi	r18, 0x02	; 2
    16ce:	31 05       	cpc	r19, r1
    16d0:	31 f1       	breq	.+76     	; 0x171e <MDIO_voidWriteLowNibbles+0x8e>
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	9c 81       	ldd	r25, Y+4	; 0x04
    16d6:	83 30       	cpi	r24, 0x03	; 3
    16d8:	91 05       	cpc	r25, r1
    16da:	89 f1       	breq	.+98     	; 0x173e <MDIO_voidWriteLowNibbles+0xae>
    16dc:	3f c0       	rjmp	.+126    	; 0x175c <MDIO_voidWriteLowNibbles+0xcc>
		{
		case DIO_PORTA :
			PORTA&=0xf0;                   // make sure the low bits = 0000
    16de:	ab e3       	ldi	r26, 0x3B	; 59
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	eb e3       	ldi	r30, 0x3B	; 59
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	80 7f       	andi	r24, 0xF0	; 240
    16ea:	8c 93       	st	X, r24
			PORTA|=A_u8value;			//Set only the low nibble of the port A by the given value
    16ec:	ab e3       	ldi	r26, 0x3B	; 59
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	eb e3       	ldi	r30, 0x3B	; 59
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	90 81       	ld	r25, Z
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	89 2b       	or	r24, r25
    16fa:	8c 93       	st	X, r24
    16fc:	2f c0       	rjmp	.+94     	; 0x175c <MDIO_voidWriteLowNibbles+0xcc>
			break ;
		case DIO_PORTB:
			PORTB&=0xf0;                 //Set only the low nibble of the port B by the given value
    16fe:	a8 e3       	ldi	r26, 0x38	; 56
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e8 e3       	ldi	r30, 0x38	; 56
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	80 7f       	andi	r24, 0xF0	; 240
    170a:	8c 93       	st	X, r24
			PORTB|=A_u8value;
    170c:	a8 e3       	ldi	r26, 0x38	; 56
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e8 e3       	ldi	r30, 0x38	; 56
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	90 81       	ld	r25, Z
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	89 2b       	or	r24, r25
    171a:	8c 93       	st	X, r24
    171c:	1f c0       	rjmp	.+62     	; 0x175c <MDIO_voidWriteLowNibbles+0xcc>
			break ;
		case DIO_PORTC :
			PORTC&=0xf0;                 //Set only the low nibble of the port C by the given value
    171e:	a5 e3       	ldi	r26, 0x35	; 53
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e5 e3       	ldi	r30, 0x35	; 53
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	80 7f       	andi	r24, 0xF0	; 240
    172a:	8c 93       	st	X, r24
			PORTC|=A_u8value;
    172c:	a5 e3       	ldi	r26, 0x35	; 53
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e5 e3       	ldi	r30, 0x35	; 53
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	90 81       	ld	r25, Z
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	89 2b       	or	r24, r25
    173a:	8c 93       	st	X, r24
    173c:	0f c0       	rjmp	.+30     	; 0x175c <MDIO_voidWriteLowNibbles+0xcc>
			break ;
		case DIO_PORTD:
			PORTD&=0xf0;                 //Set only the low nibble of the port D by the given value
    173e:	a2 e3       	ldi	r26, 0x32	; 50
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e2 e3       	ldi	r30, 0x32	; 50
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	80 7f       	andi	r24, 0xF0	; 240
    174a:	8c 93       	st	X, r24
			PORTD|=A_u8value;
    174c:	a2 e3       	ldi	r26, 0x32	; 50
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e2 e3       	ldi	r30, 0x32	; 50
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	90 81       	ld	r25, Z
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	89 2b       	or	r24, r25
    175a:	8c 93       	st	X, r24
			break ;
		}
}
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <HLED_voidLEDIntialization>:
#include "LED_interface.h"
#include "LED_private.h"


void HLED_voidLEDIntialization(LED_CONFIG LED)
{
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	00 d0       	rcall	.+0      	; 0x1770 <HLED_voidLEDIntialization+0x6>
    1770:	0f 92       	push	r0
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	69 83       	std	Y+1, r22	; 0x01
    1778:	7a 83       	std	Y+2, r23	; 0x02
    177a:	8b 83       	std	Y+3, r24	; 0x03
	MDIO_voidSetPinDirection (LED.port , LED.pin , LED.activeMode);
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	9a 81       	ldd	r25, Y+2	; 0x02
    1780:	2b 81       	ldd	r18, Y+3	; 0x03
    1782:	69 2f       	mov	r22, r25
    1784:	42 2f       	mov	r20, r18
    1786:	0e 94 cb 05 	call	0xb96	; 0xb96 <MDIO_voidSetPinDirection>

}
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <HLED_voidLEDOn>:

void HLED_voidLEDOn(LED_CONFIG LED)
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	00 d0       	rcall	.+0      	; 0x179c <HLED_voidLEDOn+0x6>
    179c:	0f 92       	push	r0
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	69 83       	std	Y+1, r22	; 0x01
    17a4:	7a 83       	std	Y+2, r23	; 0x02
    17a6:	8b 83       	std	Y+3, r24	; 0x03
	 MDIO_voidSetPinValue (LED.port , LED.pin , LED.activeMode);
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	2b 81       	ldd	r18, Y+3	; 0x03
    17ae:	69 2f       	mov	r22, r25
    17b0:	42 2f       	mov	r20, r18
    17b2:	0e 94 d3 06 	call	0xda6	; 0xda6 <MDIO_voidSetPinValue>
}
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <HLED_voidLEDOff>:

void HLED_voidLEDOff(LED_CONFIG LED)
{
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <HLED_voidLEDOff+0x6>
    17c8:	0f 92       	push	r0
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	69 83       	std	Y+1, r22	; 0x01
    17d0:	7a 83       	std	Y+2, r23	; 0x02
    17d2:	8b 83       	std	Y+3, r24	; 0x03
	 MDIO_voidSetPinValue (LED.port , LED.pin , LED_ACTIVE_LOW);
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	9a 81       	ldd	r25, Y+2	; 0x02
    17d8:	69 2f       	mov	r22, r25
    17da:	40 e0       	ldi	r20, 0x00	; 0
    17dc:	0e 94 d3 06 	call	0xda6	; 0xda6 <MDIO_voidSetPinValue>
}
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <HLED_voidLEDToggle>:

void HLED_voidLEDToggle(LED_CONFIG LED)
{
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <HLED_voidLEDToggle+0x6>
    17f2:	0f 92       	push	r0
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	69 83       	std	Y+1, r22	; 0x01
    17fa:	7a 83       	std	Y+2, r23	; 0x02
    17fc:	8b 83       	std	Y+3, r24	; 0x03
	MDIO_voidTogglePinValue (LED.port , LED.pin);
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
    1802:	69 2f       	mov	r22, r25
    1804:	0e 94 0a 09 	call	0x1214	; 0x1214 <MDIO_voidTogglePinValue>
}
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <HKPD_voidInitialization>:
#include "KPD_interface.h"
#include "KPD_config.h"

#include <avr/delay.h>
void HKPD_voidInitialization(void)
{
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
	/*******************1- Connect pullup of the first four pins "ROW"*************************************/
	MDIO_voidSetPinDirection( KPD_PORT, KPD_ROW_PIN0, DIO_PIN_INPUT);
    181c:	83 e0       	ldi	r24, 0x03	; 3
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	0e 94 cb 05 	call	0xb96	; 0xb96 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( KPD_PORT, KPD_ROW_PIN1, DIO_PIN_INPUT);
    1826:	83 e0       	ldi	r24, 0x03	; 3
    1828:	61 e0       	ldi	r22, 0x01	; 1
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	0e 94 cb 05 	call	0xb96	; 0xb96 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( KPD_PORT, KPD_ROW_PIN2, DIO_PIN_INPUT);
    1830:	83 e0       	ldi	r24, 0x03	; 3
    1832:	62 e0       	ldi	r22, 0x02	; 2
    1834:	40 e0       	ldi	r20, 0x00	; 0
    1836:	0e 94 cb 05 	call	0xb96	; 0xb96 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( KPD_PORT, KPD_ROW_PIN3, DIO_PIN_INPUT);
    183a:	83 e0       	ldi	r24, 0x03	; 3
    183c:	63 e0       	ldi	r22, 0x03	; 3
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	0e 94 cb 05 	call	0xb96	; 0xb96 <MDIO_voidSetPinDirection>

	MDIO_voidSetPinValue( KPD_PORT, KPD_ROW_PIN0, DIO_PIN_HIGH);
    1844:	83 e0       	ldi	r24, 0x03	; 3
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	41 e0       	ldi	r20, 0x01	; 1
    184a:	0e 94 d3 06 	call	0xda6	; 0xda6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue( KPD_PORT, KPD_ROW_PIN1, DIO_PIN_HIGH);
    184e:	83 e0       	ldi	r24, 0x03	; 3
    1850:	61 e0       	ldi	r22, 0x01	; 1
    1852:	41 e0       	ldi	r20, 0x01	; 1
    1854:	0e 94 d3 06 	call	0xda6	; 0xda6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue( KPD_PORT, KPD_ROW_PIN2, DIO_PIN_HIGH);
    1858:	83 e0       	ldi	r24, 0x03	; 3
    185a:	62 e0       	ldi	r22, 0x02	; 2
    185c:	41 e0       	ldi	r20, 0x01	; 1
    185e:	0e 94 d3 06 	call	0xda6	; 0xda6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue( KPD_PORT, KPD_ROW_PIN3, DIO_PIN_HIGH);
    1862:	83 e0       	ldi	r24, 0x03	; 3
    1864:	63 e0       	ldi	r22, 0x03	; 3
    1866:	41 e0       	ldi	r20, 0x01	; 1
    1868:	0e 94 d3 06 	call	0xda6	; 0xda6 <MDIO_voidSetPinValue>

	/*********************2- Make the columns pins as an output pin****************************************/ 
	MDIO_voidSetPinDirection( KPD_PORT, KPD_COL_PIN4, DIO_PIN_OUTPUT);
    186c:	83 e0       	ldi	r24, 0x03	; 3
    186e:	64 e0       	ldi	r22, 0x04	; 4
    1870:	41 e0       	ldi	r20, 0x01	; 1
    1872:	0e 94 cb 05 	call	0xb96	; 0xb96 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( KPD_PORT, KPD_COL_PIN5, DIO_PIN_OUTPUT);
    1876:	83 e0       	ldi	r24, 0x03	; 3
    1878:	65 e0       	ldi	r22, 0x05	; 5
    187a:	41 e0       	ldi	r20, 0x01	; 1
    187c:	0e 94 cb 05 	call	0xb96	; 0xb96 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( KPD_PORT, KPD_COL_PIN6, DIO_PIN_OUTPUT);
    1880:	83 e0       	ldi	r24, 0x03	; 3
    1882:	66 e0       	ldi	r22, 0x06	; 6
    1884:	41 e0       	ldi	r20, 0x01	; 1
    1886:	0e 94 cb 05 	call	0xb96	; 0xb96 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( KPD_PORT, KPD_COL_PIN7, DIO_PIN_OUTPUT);
    188a:	83 e0       	ldi	r24, 0x03	; 3
    188c:	67 e0       	ldi	r22, 0x07	; 7
    188e:	41 e0       	ldi	r20, 0x01	; 1
    1890:	0e 94 cb 05 	call	0xb96	; 0xb96 <MDIO_voidSetPinDirection>

	MDIO_voidSetPinValue( KPD_PORT, KPD_COL_PIN4, DIO_PIN_HIGH);
    1894:	83 e0       	ldi	r24, 0x03	; 3
    1896:	64 e0       	ldi	r22, 0x04	; 4
    1898:	41 e0       	ldi	r20, 0x01	; 1
    189a:	0e 94 d3 06 	call	0xda6	; 0xda6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue( KPD_PORT, KPD_COL_PIN5, DIO_PIN_HIGH);
    189e:	83 e0       	ldi	r24, 0x03	; 3
    18a0:	65 e0       	ldi	r22, 0x05	; 5
    18a2:	41 e0       	ldi	r20, 0x01	; 1
    18a4:	0e 94 d3 06 	call	0xda6	; 0xda6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue( KPD_PORT, KPD_COL_PIN6, DIO_PIN_HIGH);
    18a8:	83 e0       	ldi	r24, 0x03	; 3
    18aa:	66 e0       	ldi	r22, 0x06	; 6
    18ac:	41 e0       	ldi	r20, 0x01	; 1
    18ae:	0e 94 d3 06 	call	0xda6	; 0xda6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue( KPD_PORT, KPD_COL_PIN7, DIO_PIN_HIGH);
    18b2:	83 e0       	ldi	r24, 0x03	; 3
    18b4:	67 e0       	ldi	r22, 0x07	; 7
    18b6:	41 e0       	ldi	r20, 0x01	; 1
    18b8:	0e 94 d3 06 	call	0xda6	; 0xda6 <MDIO_voidSetPinValue>

}
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <HKPD_u8GetPressedKey>:

u8 HKPD_u8GetPressedKey(void)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	62 97       	sbiw	r28, 0x12	; 18
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_u8ReturnDatat= NOT_PRESSED;
    18d6:	8f ef       	ldi	r24, 0xFF	; 255
    18d8:	89 8b       	std	Y+17, r24	; 0x11
	u8 LOC_u8GetPressed;
	u8 LOC_u8Col;
	u8 LOC_u8Row;

	for(LOC_u8Col=0+ KPD_COL_PIN4; LOC_u8Col<1+ KPD_COL_PIN7; LOC_u8Col++)
    18da:	84 e0       	ldi	r24, 0x04	; 4
    18dc:	88 8b       	std	Y+16, r24	; 0x10
    18de:	c9 c0       	rjmp	.+402    	; 0x1a72 <HKPD_u8GetPressedKey+0x1b0>
	{
		MDIO_voidSetPinValue(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);
    18e0:	83 e0       	ldi	r24, 0x03	; 3
    18e2:	68 89       	ldd	r22, Y+16	; 0x10
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	0e 94 d3 06 	call	0xda6	; 0xda6 <MDIO_voidSetPinValue>
		for(LOC_u8Row=0+ KPD_ROW_PIN0; LOC_u8Row<1+KPD_ROW_PIN3; LOC_u8Row++)
    18ea:	1f 86       	std	Y+15, r1	; 0x0f
    18ec:	b6 c0       	rjmp	.+364    	; 0x1a5a <HKPD_u8GetPressedKey+0x198>
		{
			MDIO_voidGetPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    18ee:	9e 01       	movw	r18, r28
    18f0:	2e 5e       	subi	r18, 0xEE	; 238
    18f2:	3f 4f       	sbci	r19, 0xFF	; 255
    18f4:	83 e0       	ldi	r24, 0x03	; 3
    18f6:	6f 85       	ldd	r22, Y+15	; 0x0f
    18f8:	a9 01       	movw	r20, r18
    18fa:	0e 94 55 08 	call	0x10aa	; 0x10aa <MDIO_voidGetPinValue>
			if(LOC_u8GetPressed==0)
    18fe:	8a 89       	ldd	r24, Y+18	; 0x12
    1900:	88 23       	and	r24, r24
    1902:	09 f0       	breq	.+2      	; 0x1906 <HKPD_u8GetPressedKey+0x44>
    1904:	a7 c0       	rjmp	.+334    	; 0x1a54 <HKPD_u8GetPressedKey+0x192>
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	a0 e2       	ldi	r26, 0x20	; 32
    190c:	b1 e4       	ldi	r27, 0x41	; 65
    190e:	8b 87       	std	Y+11, r24	; 0x0b
    1910:	9c 87       	std	Y+12, r25	; 0x0c
    1912:	ad 87       	std	Y+13, r26	; 0x0d
    1914:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1916:	6b 85       	ldd	r22, Y+11	; 0x0b
    1918:	7c 85       	ldd	r23, Y+12	; 0x0c
    191a:	8d 85       	ldd	r24, Y+13	; 0x0d
    191c:	9e 85       	ldd	r25, Y+14	; 0x0e
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	4a ef       	ldi	r20, 0xFA	; 250
    1924:	54 e4       	ldi	r21, 0x44	; 68
    1926:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	8f 83       	std	Y+7, r24	; 0x07
    1930:	98 87       	std	Y+8, r25	; 0x08
    1932:	a9 87       	std	Y+9, r26	; 0x09
    1934:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1936:	6f 81       	ldd	r22, Y+7	; 0x07
    1938:	78 85       	ldd	r23, Y+8	; 0x08
    193a:	89 85       	ldd	r24, Y+9	; 0x09
    193c:	9a 85       	ldd	r25, Y+10	; 0x0a
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e8       	ldi	r20, 0x80	; 128
    1944:	5f e3       	ldi	r21, 0x3F	; 63
    1946:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    194a:	88 23       	and	r24, r24
    194c:	2c f4       	brge	.+10     	; 0x1958 <HKPD_u8GetPressedKey+0x96>
		__ticks = 1;
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	9e 83       	std	Y+6, r25	; 0x06
    1954:	8d 83       	std	Y+5, r24	; 0x05
    1956:	3f c0       	rjmp	.+126    	; 0x19d6 <HKPD_u8GetPressedKey+0x114>
	else if (__tmp > 65535)
    1958:	6f 81       	ldd	r22, Y+7	; 0x07
    195a:	78 85       	ldd	r23, Y+8	; 0x08
    195c:	89 85       	ldd	r24, Y+9	; 0x09
    195e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	3f ef       	ldi	r19, 0xFF	; 255
    1964:	4f e7       	ldi	r20, 0x7F	; 127
    1966:	57 e4       	ldi	r21, 0x47	; 71
    1968:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    196c:	18 16       	cp	r1, r24
    196e:	4c f5       	brge	.+82     	; 0x19c2 <HKPD_u8GetPressedKey+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1970:	6b 85       	ldd	r22, Y+11	; 0x0b
    1972:	7c 85       	ldd	r23, Y+12	; 0x0c
    1974:	8d 85       	ldd	r24, Y+13	; 0x0d
    1976:	9e 85       	ldd	r25, Y+14	; 0x0e
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e2       	ldi	r20, 0x20	; 32
    197e:	51 e4       	ldi	r21, 0x41	; 65
    1980:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	bc 01       	movw	r22, r24
    198a:	cd 01       	movw	r24, r26
    198c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	9e 83       	std	Y+6, r25	; 0x06
    1996:	8d 83       	std	Y+5, r24	; 0x05
    1998:	0f c0       	rjmp	.+30     	; 0x19b8 <HKPD_u8GetPressedKey+0xf6>
    199a:	88 ec       	ldi	r24, 0xC8	; 200
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	9c 83       	std	Y+4, r25	; 0x04
    19a0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	9c 81       	ldd	r25, Y+4	; 0x04
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	f1 f7       	brne	.-4      	; 0x19a6 <HKPD_u8GetPressedKey+0xe4>
    19aa:	9c 83       	std	Y+4, r25	; 0x04
    19ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ae:	8d 81       	ldd	r24, Y+5	; 0x05
    19b0:	9e 81       	ldd	r25, Y+6	; 0x06
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	9e 83       	std	Y+6, r25	; 0x06
    19b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ba:	9e 81       	ldd	r25, Y+6	; 0x06
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	69 f7       	brne	.-38     	; 0x199a <HKPD_u8GetPressedKey+0xd8>
    19c0:	14 c0       	rjmp	.+40     	; 0x19ea <HKPD_u8GetPressedKey+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c2:	6f 81       	ldd	r22, Y+7	; 0x07
    19c4:	78 85       	ldd	r23, Y+8	; 0x08
    19c6:	89 85       	ldd	r24, Y+9	; 0x09
    19c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	9e 83       	std	Y+6, r25	; 0x06
    19d4:	8d 83       	std	Y+5, r24	; 0x05
    19d6:	8d 81       	ldd	r24, Y+5	; 0x05
    19d8:	9e 81       	ldd	r25, Y+6	; 0x06
    19da:	9a 83       	std	Y+2, r25	; 0x02
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	9a 81       	ldd	r25, Y+2	; 0x02
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <HKPD_u8GetPressedKey+0x120>
    19e6:	9a 83       	std	Y+2, r25	; 0x02
    19e8:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(10);
				MDIO_voidGetPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    19ea:	9e 01       	movw	r18, r28
    19ec:	2e 5e       	subi	r18, 0xEE	; 238
    19ee:	3f 4f       	sbci	r19, 0xFF	; 255
    19f0:	83 e0       	ldi	r24, 0x03	; 3
    19f2:	6f 85       	ldd	r22, Y+15	; 0x0f
    19f4:	a9 01       	movw	r20, r18
    19f6:	0e 94 55 08 	call	0x10aa	; 0x10aa <MDIO_voidGetPinValue>
				if( LOC_u8GetPressed==DIO_PIN_LOW)
    19fa:	8a 89       	ldd	r24, Y+18	; 0x12
    19fc:	88 23       	and	r24, r24
    19fe:	a9 f4       	brne	.+42     	; 0x1a2a <HKPD_u8GetPressedKey+0x168>
				{
					LOC_u8ReturnDatat= KPD_u8Button[LOC_u8Row - KPD_ROW_PIN0][LOC_u8Col - KPD_COL_PIN4];
    1a00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a02:	48 2f       	mov	r20, r24
    1a04:	50 e0       	ldi	r21, 0x00	; 0
    1a06:	88 89       	ldd	r24, Y+16	; 0x10
    1a08:	88 2f       	mov	r24, r24
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	9c 01       	movw	r18, r24
    1a0e:	24 50       	subi	r18, 0x04	; 4
    1a10:	30 40       	sbci	r19, 0x00	; 0
    1a12:	ca 01       	movw	r24, r20
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	88 0f       	add	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	82 0f       	add	r24, r18
    1a1e:	93 1f       	adc	r25, r19
    1a20:	fc 01       	movw	r30, r24
    1a22:	e8 55       	subi	r30, 0x58	; 88
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	80 81       	ld	r24, Z
    1a28:	89 8b       	std	Y+17, r24	; 0x11
				}
				MDIO_voidGetPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    1a2a:	9e 01       	movw	r18, r28
    1a2c:	2e 5e       	subi	r18, 0xEE	; 238
    1a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a30:	83 e0       	ldi	r24, 0x03	; 3
    1a32:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a34:	a9 01       	movw	r20, r18
    1a36:	0e 94 55 08 	call	0x10aa	; 0x10aa <MDIO_voidGetPinValue>
    1a3a:	08 c0       	rjmp	.+16     	; 0x1a4c <HKPD_u8GetPressedKey+0x18a>
				while( DIO_PIN_LOW == LOC_u8GetPressed )
				{

					MDIO_voidGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed );
    1a3c:	9e 01       	movw	r18, r28
    1a3e:	2e 5e       	subi	r18, 0xEE	; 238
    1a40:	3f 4f       	sbci	r19, 0xFF	; 255
    1a42:	83 e0       	ldi	r24, 0x03	; 3
    1a44:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a46:	a9 01       	movw	r20, r18
    1a48:	0e 94 55 08 	call	0x10aa	; 0x10aa <MDIO_voidGetPinValue>
				if( LOC_u8GetPressed==DIO_PIN_LOW)
				{
					LOC_u8ReturnDatat= KPD_u8Button[LOC_u8Row - KPD_ROW_PIN0][LOC_u8Col - KPD_COL_PIN4];
				}
				MDIO_voidGetPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
				while( DIO_PIN_LOW == LOC_u8GetPressed )
    1a4c:	8a 89       	ldd	r24, Y+18	; 0x12
    1a4e:	88 23       	and	r24, r24
    1a50:	a9 f3       	breq	.-22     	; 0x1a3c <HKPD_u8GetPressedKey+0x17a>
    1a52:	07 c0       	rjmp	.+14     	; 0x1a62 <HKPD_u8GetPressedKey+0x1a0>
	u8 LOC_u8Row;

	for(LOC_u8Col=0+ KPD_COL_PIN4; LOC_u8Col<1+ KPD_COL_PIN7; LOC_u8Col++)
	{
		MDIO_voidSetPinValue(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);
		for(LOC_u8Row=0+ KPD_ROW_PIN0; LOC_u8Row<1+KPD_ROW_PIN3; LOC_u8Row++)
    1a54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a56:	8f 5f       	subi	r24, 0xFF	; 255
    1a58:	8f 87       	std	Y+15, r24	; 0x0f
    1a5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a5c:	84 30       	cpi	r24, 0x04	; 4
    1a5e:	08 f4       	brcc	.+2      	; 0x1a62 <HKPD_u8GetPressedKey+0x1a0>
    1a60:	46 cf       	rjmp	.-372    	; 0x18ee <HKPD_u8GetPressedKey+0x2c>
				}

				break ;
			}
		}
		MDIO_voidSetPinValue(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
    1a62:	83 e0       	ldi	r24, 0x03	; 3
    1a64:	68 89       	ldd	r22, Y+16	; 0x10
    1a66:	41 e0       	ldi	r20, 0x01	; 1
    1a68:	0e 94 d3 06 	call	0xda6	; 0xda6 <MDIO_voidSetPinValue>
	u8 LOC_u8ReturnDatat= NOT_PRESSED;
	u8 LOC_u8GetPressed;
	u8 LOC_u8Col;
	u8 LOC_u8Row;

	for(LOC_u8Col=0+ KPD_COL_PIN4; LOC_u8Col<1+ KPD_COL_PIN7; LOC_u8Col++)
    1a6c:	88 89       	ldd	r24, Y+16	; 0x10
    1a6e:	8f 5f       	subi	r24, 0xFF	; 255
    1a70:	88 8b       	std	Y+16, r24	; 0x10
    1a72:	88 89       	ldd	r24, Y+16	; 0x10
    1a74:	88 30       	cpi	r24, 0x08	; 8
    1a76:	08 f4       	brcc	.+2      	; 0x1a7a <HKPD_u8GetPressedKey+0x1b8>
    1a78:	33 cf       	rjmp	.-410    	; 0x18e0 <HKPD_u8GetPressedKey+0x1e>
				break ;
			}
		}
		MDIO_voidSetPinValue(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
	}
	return LOC_u8ReturnDatat;
    1a7a:	89 89       	ldd	r24, Y+17	; 0x11

}
    1a7c:	62 96       	adiw	r28, 0x12	; 18
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	08 95       	ret

00001a8e <CLCD_voidInitialization>:


#include <avr/delay.h>

void CLCD_voidInitialization(void)
{
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	e8 97       	sbiw	r28, 0x38	; 56
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
	#if CLCD_MODE ==EIGHT_BIT_MODE
	MDIO_voidSetPortDirection( CLCD_DATA_PORT, DIO_PORT_OUTPUT);
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	6f ef       	ldi	r22, 0xFF	; 255
    1aa6:	0e 94 87 09 	call	0x130e	; 0x130e <MDIO_voidSetPortDirection>
	MDIO_voidSetPinDirection( CLCD_CONTROL_PORT, CLCD_RS_PIN,DIO_PIN_OUTPUT);
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	41 e0       	ldi	r20, 0x01	; 1
    1ab0:	0e 94 cb 05 	call	0xb96	; 0xb96 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( CLCD_CONTROL_PORT, CLCD_RW_PIN,DIO_PIN_OUTPUT);
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	61 e0       	ldi	r22, 0x01	; 1
    1ab8:	41 e0       	ldi	r20, 0x01	; 1
    1aba:	0e 94 cb 05 	call	0xb96	; 0xb96 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( CLCD_CONTROL_PORT, CLCD_EN_PIN,DIO_PIN_OUTPUT);
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	62 e0       	ldi	r22, 0x02	; 2
    1ac2:	41 e0       	ldi	r20, 0x01	; 1
    1ac4:	0e 94 cb 05 	call	0xb96	; 0xb96 <MDIO_voidSetPinDirection>

	
	CLCD_voidClearScreen();
    1ac8:	0e 94 71 10 	call	0x20e2	; 0x20e2 <CLCD_voidClearScreen>
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a8 e4       	ldi	r26, 0x48	; 72
    1ad2:	b2 e4       	ldi	r27, 0x42	; 66
    1ad4:	8d ab       	std	Y+53, r24	; 0x35
    1ad6:	9e ab       	std	Y+54, r25	; 0x36
    1ad8:	af ab       	std	Y+55, r26	; 0x37
    1ada:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1adc:	6d a9       	ldd	r22, Y+53	; 0x35
    1ade:	7e a9       	ldd	r23, Y+54	; 0x36
    1ae0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ae2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	4a ef       	ldi	r20, 0xFA	; 250
    1aea:	54 e4       	ldi	r21, 0x44	; 68
    1aec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	89 ab       	std	Y+49, r24	; 0x31
    1af6:	9a ab       	std	Y+50, r25	; 0x32
    1af8:	ab ab       	std	Y+51, r26	; 0x33
    1afa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1afc:	69 a9       	ldd	r22, Y+49	; 0x31
    1afe:	7a a9       	ldd	r23, Y+50	; 0x32
    1b00:	8b a9       	ldd	r24, Y+51	; 0x33
    1b02:	9c a9       	ldd	r25, Y+52	; 0x34
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e8       	ldi	r20, 0x80	; 128
    1b0a:	5f e3       	ldi	r21, 0x3F	; 63
    1b0c:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1b10:	88 23       	and	r24, r24
    1b12:	2c f4       	brge	.+10     	; 0x1b1e <CLCD_voidInitialization+0x90>
		__ticks = 1;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	98 ab       	std	Y+48, r25	; 0x30
    1b1a:	8f a7       	std	Y+47, r24	; 0x2f
    1b1c:	3f c0       	rjmp	.+126    	; 0x1b9c <CLCD_voidInitialization+0x10e>
	else if (__tmp > 65535)
    1b1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b20:	7a a9       	ldd	r23, Y+50	; 0x32
    1b22:	8b a9       	ldd	r24, Y+51	; 0x33
    1b24:	9c a9       	ldd	r25, Y+52	; 0x34
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	3f ef       	ldi	r19, 0xFF	; 255
    1b2a:	4f e7       	ldi	r20, 0x7F	; 127
    1b2c:	57 e4       	ldi	r21, 0x47	; 71
    1b2e:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1b32:	18 16       	cp	r1, r24
    1b34:	4c f5       	brge	.+82     	; 0x1b88 <CLCD_voidInitialization+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b36:	6d a9       	ldd	r22, Y+53	; 0x35
    1b38:	7e a9       	ldd	r23, Y+54	; 0x36
    1b3a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b3c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e2       	ldi	r20, 0x20	; 32
    1b44:	51 e4       	ldi	r21, 0x41	; 65
    1b46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	98 ab       	std	Y+48, r25	; 0x30
    1b5c:	8f a7       	std	Y+47, r24	; 0x2f
    1b5e:	0f c0       	rjmp	.+30     	; 0x1b7e <CLCD_voidInitialization+0xf0>
    1b60:	88 ec       	ldi	r24, 0xC8	; 200
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	9e a7       	std	Y+46, r25	; 0x2e
    1b66:	8d a7       	std	Y+45, r24	; 0x2d
    1b68:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b6a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <CLCD_voidInitialization+0xde>
    1b70:	9e a7       	std	Y+46, r25	; 0x2e
    1b72:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b76:	98 a9       	ldd	r25, Y+48	; 0x30
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	98 ab       	std	Y+48, r25	; 0x30
    1b7c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b80:	98 a9       	ldd	r25, Y+48	; 0x30
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	69 f7       	brne	.-38     	; 0x1b60 <CLCD_voidInitialization+0xd2>
    1b86:	14 c0       	rjmp	.+40     	; 0x1bb0 <CLCD_voidInitialization+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b88:	69 a9       	ldd	r22, Y+49	; 0x31
    1b8a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b8c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b8e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	98 ab       	std	Y+48, r25	; 0x30
    1b9a:	8f a7       	std	Y+47, r24	; 0x2f
    1b9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b9e:	98 a9       	ldd	r25, Y+48	; 0x30
    1ba0:	9c a7       	std	Y+44, r25	; 0x2c
    1ba2:	8b a7       	std	Y+43, r24	; 0x2b
    1ba4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ba6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <CLCD_voidInitialization+0x11a>
    1bac:	9c a7       	std	Y+44, r25	; 0x2c
    1bae:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	CLCD_voidSendCommand(CLCD_RETURN_HOME);
    1bb0:	82 e0       	ldi	r24, 0x02	; 2
    1bb2:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <CLCD_voidSendCommand>
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	a8 e4       	ldi	r26, 0x48	; 72
    1bbc:	b2 e4       	ldi	r27, 0x42	; 66
    1bbe:	8f a3       	std	Y+39, r24	; 0x27
    1bc0:	98 a7       	std	Y+40, r25	; 0x28
    1bc2:	a9 a7       	std	Y+41, r26	; 0x29
    1bc4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc6:	6f a1       	ldd	r22, Y+39	; 0x27
    1bc8:	78 a5       	ldd	r23, Y+40	; 0x28
    1bca:	89 a5       	ldd	r24, Y+41	; 0x29
    1bcc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	4a ef       	ldi	r20, 0xFA	; 250
    1bd4:	54 e4       	ldi	r21, 0x44	; 68
    1bd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	8b a3       	std	Y+35, r24	; 0x23
    1be0:	9c a3       	std	Y+36, r25	; 0x24
    1be2:	ad a3       	std	Y+37, r26	; 0x25
    1be4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1be6:	6b a1       	ldd	r22, Y+35	; 0x23
    1be8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bea:	8d a1       	ldd	r24, Y+37	; 0x25
    1bec:	9e a1       	ldd	r25, Y+38	; 0x26
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e8       	ldi	r20, 0x80	; 128
    1bf4:	5f e3       	ldi	r21, 0x3F	; 63
    1bf6:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1bfa:	88 23       	and	r24, r24
    1bfc:	2c f4       	brge	.+10     	; 0x1c08 <CLCD_voidInitialization+0x17a>
		__ticks = 1;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	9a a3       	std	Y+34, r25	; 0x22
    1c04:	89 a3       	std	Y+33, r24	; 0x21
    1c06:	3f c0       	rjmp	.+126    	; 0x1c86 <CLCD_voidInitialization+0x1f8>
	else if (__tmp > 65535)
    1c08:	6b a1       	ldd	r22, Y+35	; 0x23
    1c0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	3f ef       	ldi	r19, 0xFF	; 255
    1c14:	4f e7       	ldi	r20, 0x7F	; 127
    1c16:	57 e4       	ldi	r21, 0x47	; 71
    1c18:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1c1c:	18 16       	cp	r1, r24
    1c1e:	4c f5       	brge	.+82     	; 0x1c72 <CLCD_voidInitialization+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c20:	6f a1       	ldd	r22, Y+39	; 0x27
    1c22:	78 a5       	ldd	r23, Y+40	; 0x28
    1c24:	89 a5       	ldd	r24, Y+41	; 0x29
    1c26:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e2       	ldi	r20, 0x20	; 32
    1c2e:	51 e4       	ldi	r21, 0x41	; 65
    1c30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	bc 01       	movw	r22, r24
    1c3a:	cd 01       	movw	r24, r26
    1c3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	9a a3       	std	Y+34, r25	; 0x22
    1c46:	89 a3       	std	Y+33, r24	; 0x21
    1c48:	0f c0       	rjmp	.+30     	; 0x1c68 <CLCD_voidInitialization+0x1da>
    1c4a:	88 ec       	ldi	r24, 0xC8	; 200
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	98 a3       	std	Y+32, r25	; 0x20
    1c50:	8f 8f       	std	Y+31, r24	; 0x1f
    1c52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c54:	98 a1       	ldd	r25, Y+32	; 0x20
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	f1 f7       	brne	.-4      	; 0x1c56 <CLCD_voidInitialization+0x1c8>
    1c5a:	98 a3       	std	Y+32, r25	; 0x20
    1c5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c60:	9a a1       	ldd	r25, Y+34	; 0x22
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	9a a3       	std	Y+34, r25	; 0x22
    1c66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c68:	89 a1       	ldd	r24, Y+33	; 0x21
    1c6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c6c:	00 97       	sbiw	r24, 0x00	; 0
    1c6e:	69 f7       	brne	.-38     	; 0x1c4a <CLCD_voidInitialization+0x1bc>
    1c70:	14 c0       	rjmp	.+40     	; 0x1c9a <CLCD_voidInitialization+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c72:	6b a1       	ldd	r22, Y+35	; 0x23
    1c74:	7c a1       	ldd	r23, Y+36	; 0x24
    1c76:	8d a1       	ldd	r24, Y+37	; 0x25
    1c78:	9e a1       	ldd	r25, Y+38	; 0x26
    1c7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	9a a3       	std	Y+34, r25	; 0x22
    1c84:	89 a3       	std	Y+33, r24	; 0x21
    1c86:	89 a1       	ldd	r24, Y+33	; 0x21
    1c88:	9a a1       	ldd	r25, Y+34	; 0x22
    1c8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c8c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <CLCD_voidInitialization+0x204>
    1c96:	9e 8f       	std	Y+30, r25	; 0x1e
    1c98:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	CLCD_voidSendCommand(FUNCTION_SET_TWO_LINE );
    1c9a:	88 e3       	ldi	r24, 0x38	; 56
    1c9c:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <CLCD_voidSendCommand>
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	a0 e8       	ldi	r26, 0x80	; 128
    1ca6:	bf e3       	ldi	r27, 0x3F	; 63
    1ca8:	89 8f       	std	Y+25, r24	; 0x19
    1caa:	9a 8f       	std	Y+26, r25	; 0x1a
    1cac:	ab 8f       	std	Y+27, r26	; 0x1b
    1cae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb0:	69 8d       	ldd	r22, Y+25	; 0x19
    1cb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	4a ef       	ldi	r20, 0xFA	; 250
    1cbe:	54 e4       	ldi	r21, 0x44	; 68
    1cc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	8d 8b       	std	Y+21, r24	; 0x15
    1cca:	9e 8b       	std	Y+22, r25	; 0x16
    1ccc:	af 8b       	std	Y+23, r26	; 0x17
    1cce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e8       	ldi	r20, 0x80	; 128
    1cde:	5f e3       	ldi	r21, 0x3F	; 63
    1ce0:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1ce4:	88 23       	and	r24, r24
    1ce6:	2c f4       	brge	.+10     	; 0x1cf2 <CLCD_voidInitialization+0x264>
		__ticks = 1;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	9c 8b       	std	Y+20, r25	; 0x14
    1cee:	8b 8b       	std	Y+19, r24	; 0x13
    1cf0:	3f c0       	rjmp	.+126    	; 0x1d70 <CLCD_voidInitialization+0x2e2>
	else if (__tmp > 65535)
    1cf2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	3f ef       	ldi	r19, 0xFF	; 255
    1cfe:	4f e7       	ldi	r20, 0x7F	; 127
    1d00:	57 e4       	ldi	r21, 0x47	; 71
    1d02:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1d06:	18 16       	cp	r1, r24
    1d08:	4c f5       	brge	.+82     	; 0x1d5c <CLCD_voidInitialization+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e2       	ldi	r20, 0x20	; 32
    1d18:	51 e4       	ldi	r21, 0x41	; 65
    1d1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	bc 01       	movw	r22, r24
    1d24:	cd 01       	movw	r24, r26
    1d26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	9c 8b       	std	Y+20, r25	; 0x14
    1d30:	8b 8b       	std	Y+19, r24	; 0x13
    1d32:	0f c0       	rjmp	.+30     	; 0x1d52 <CLCD_voidInitialization+0x2c4>
    1d34:	88 ec       	ldi	r24, 0xC8	; 200
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	9a 8b       	std	Y+18, r25	; 0x12
    1d3a:	89 8b       	std	Y+17, r24	; 0x11
    1d3c:	89 89       	ldd	r24, Y+17	; 0x11
    1d3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <CLCD_voidInitialization+0x2b2>
    1d44:	9a 8b       	std	Y+18, r25	; 0x12
    1d46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d48:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	9c 8b       	std	Y+20, r25	; 0x14
    1d50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d52:	8b 89       	ldd	r24, Y+19	; 0x13
    1d54:	9c 89       	ldd	r25, Y+20	; 0x14
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	69 f7       	brne	.-38     	; 0x1d34 <CLCD_voidInitialization+0x2a6>
    1d5a:	14 c0       	rjmp	.+40     	; 0x1d84 <CLCD_voidInitialization+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d60:	8f 89       	ldd	r24, Y+23	; 0x17
    1d62:	98 8d       	ldd	r25, Y+24	; 0x18
    1d64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9c 8b       	std	Y+20, r25	; 0x14
    1d6e:	8b 8b       	std	Y+19, r24	; 0x13
    1d70:	8b 89       	ldd	r24, Y+19	; 0x13
    1d72:	9c 89       	ldd	r25, Y+20	; 0x14
    1d74:	98 8b       	std	Y+16, r25	; 0x10
    1d76:	8f 87       	std	Y+15, r24	; 0x0f
    1d78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d7a:	98 89       	ldd	r25, Y+16	; 0x10
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <CLCD_voidInitialization+0x2ee>
    1d80:	98 8b       	std	Y+16, r25	; 0x10
    1d82:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand(LCD_DISPLAY_ON_CURSOR_OFF_BLINK_OFF  );
    1d84:	8c e0       	ldi	r24, 0x0C	; 12
    1d86:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <CLCD_voidSendCommand>
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a0 e8       	ldi	r26, 0x80	; 128
    1d90:	bf e3       	ldi	r27, 0x3F	; 63
    1d92:	8b 87       	std	Y+11, r24	; 0x0b
    1d94:	9c 87       	std	Y+12, r25	; 0x0c
    1d96:	ad 87       	std	Y+13, r26	; 0x0d
    1d98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	4a ef       	ldi	r20, 0xFA	; 250
    1da8:	54 e4       	ldi	r21, 0x44	; 68
    1daa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	8f 83       	std	Y+7, r24	; 0x07
    1db4:	98 87       	std	Y+8, r25	; 0x08
    1db6:	a9 87       	std	Y+9, r26	; 0x09
    1db8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e8       	ldi	r20, 0x80	; 128
    1dc8:	5f e3       	ldi	r21, 0x3F	; 63
    1dca:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1dce:	88 23       	and	r24, r24
    1dd0:	2c f4       	brge	.+10     	; 0x1ddc <CLCD_voidInitialization+0x34e>
		__ticks = 1;
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	9e 83       	std	Y+6, r25	; 0x06
    1dd8:	8d 83       	std	Y+5, r24	; 0x05
    1dda:	3f c0       	rjmp	.+126    	; 0x1e5a <CLCD_voidInitialization+0x3cc>
	else if (__tmp > 65535)
    1ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dde:	78 85       	ldd	r23, Y+8	; 0x08
    1de0:	89 85       	ldd	r24, Y+9	; 0x09
    1de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	3f ef       	ldi	r19, 0xFF	; 255
    1de8:	4f e7       	ldi	r20, 0x7F	; 127
    1dea:	57 e4       	ldi	r21, 0x47	; 71
    1dec:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1df0:	18 16       	cp	r1, r24
    1df2:	4c f5       	brge	.+82     	; 0x1e46 <CLCD_voidInitialization+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e2       	ldi	r20, 0x20	; 32
    1e02:	51 e4       	ldi	r21, 0x41	; 65
    1e04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	bc 01       	movw	r22, r24
    1e0e:	cd 01       	movw	r24, r26
    1e10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	9e 83       	std	Y+6, r25	; 0x06
    1e1a:	8d 83       	std	Y+5, r24	; 0x05
    1e1c:	0f c0       	rjmp	.+30     	; 0x1e3c <CLCD_voidInitialization+0x3ae>
    1e1e:	88 ec       	ldi	r24, 0xC8	; 200
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	9c 83       	std	Y+4, r25	; 0x04
    1e24:	8b 83       	std	Y+3, r24	; 0x03
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <CLCD_voidInitialization+0x39c>
    1e2e:	9c 83       	std	Y+4, r25	; 0x04
    1e30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e32:	8d 81       	ldd	r24, Y+5	; 0x05
    1e34:	9e 81       	ldd	r25, Y+6	; 0x06
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	9e 83       	std	Y+6, r25	; 0x06
    1e3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	69 f7       	brne	.-38     	; 0x1e1e <CLCD_voidInitialization+0x390>
    1e44:	14 c0       	rjmp	.+40     	; 0x1e6e <CLCD_voidInitialization+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e46:	6f 81       	ldd	r22, Y+7	; 0x07
    1e48:	78 85       	ldd	r23, Y+8	; 0x08
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	9e 83       	std	Y+6, r25	; 0x06
    1e58:	8d 83       	std	Y+5, r24	; 0x05
    1e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5e:	9a 83       	std	Y+2, r25	; 0x02
    1e60:	89 83       	std	Y+1, r24	; 0x01
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	9a 81       	ldd	r25, Y+2	; 0x02
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <CLCD_voidInitialization+0x3d8>
    1e6a:	9a 83       	std	Y+2, r25	; 0x02
    1e6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	CLCD_voidClearScreen();
    1e6e:	0e 94 71 10 	call	0x20e2	; 0x20e2 <CLCD_voidClearScreen>
	CLCD_voidSendCommand(LCD_ENTRY_MODE_SHIFT_LEFT );
    1e72:	86 e0       	ldi	r24, 0x06	; 6
    1e74:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <CLCD_voidSendCommand>
	_delay_ms(1);
	CLCD_voidClearScreen();
	CLCD_voidSendCommand(LCD_ENTRY_MODE_SHIFT_LEFT );
	#endif
	
}
    1e78:	e8 96       	adiw	r28, 0x38	; 56
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <CLCD_voidSendData>:
	
 void CLCD_voidSendData( u8 copy_u8Data)
 {
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	2f 97       	sbiw	r28, 0x0f	; 15
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	cd bf       	out	0x3d, r28	; 61
    1e9e:	8f 87       	std	Y+15, r24	; 0x0f
	 #if CLCD_MODE == EIGHT_BIT_MODE
	 MDIO_voidSetPortValue(CLCD_DATA_PORT, copy_u8Data);
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ea4:	0e 94 c8 09 	call	0x1390	; 0x1390 <MDIO_voidSetPortValue>
	 MDIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_PIN_HIGH);
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 d3 06 	call	0xda6	; 0xda6 <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_PIN_LOW);
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	61 e0       	ldi	r22, 0x01	; 1
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	0e 94 d3 06 	call	0xda6	; 0xda6 <MDIO_voidSetPinValue>
	 CLCD_voidSendFallingEdge ();
    1ebc:	0e 94 b9 11 	call	0x2372	; 0x2372 <CLCD_voidSendFallingEdge>
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	a0 e8       	ldi	r26, 0x80	; 128
    1ec6:	bf e3       	ldi	r27, 0x3F	; 63
    1ec8:	8b 87       	std	Y+11, r24	; 0x0b
    1eca:	9c 87       	std	Y+12, r25	; 0x0c
    1ecc:	ad 87       	std	Y+13, r26	; 0x0d
    1ece:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	4a ef       	ldi	r20, 0xFA	; 250
    1ede:	54 e4       	ldi	r21, 0x44	; 68
    1ee0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	8f 83       	std	Y+7, r24	; 0x07
    1eea:	98 87       	std	Y+8, r25	; 0x08
    1eec:	a9 87       	std	Y+9, r26	; 0x09
    1eee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ef0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef2:	78 85       	ldd	r23, Y+8	; 0x08
    1ef4:	89 85       	ldd	r24, Y+9	; 0x09
    1ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e8       	ldi	r20, 0x80	; 128
    1efe:	5f e3       	ldi	r21, 0x3F	; 63
    1f00:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1f04:	88 23       	and	r24, r24
    1f06:	2c f4       	brge	.+10     	; 0x1f12 <CLCD_voidSendData+0x88>
		__ticks = 1;
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	9e 83       	std	Y+6, r25	; 0x06
    1f0e:	8d 83       	std	Y+5, r24	; 0x05
    1f10:	3f c0       	rjmp	.+126    	; 0x1f90 <CLCD_voidSendData+0x106>
	else if (__tmp > 65535)
    1f12:	6f 81       	ldd	r22, Y+7	; 0x07
    1f14:	78 85       	ldd	r23, Y+8	; 0x08
    1f16:	89 85       	ldd	r24, Y+9	; 0x09
    1f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	3f ef       	ldi	r19, 0xFF	; 255
    1f1e:	4f e7       	ldi	r20, 0x7F	; 127
    1f20:	57 e4       	ldi	r21, 0x47	; 71
    1f22:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1f26:	18 16       	cp	r1, r24
    1f28:	4c f5       	brge	.+82     	; 0x1f7c <CLCD_voidSendData+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	40 e2       	ldi	r20, 0x20	; 32
    1f38:	51 e4       	ldi	r21, 0x41	; 65
    1f3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	bc 01       	movw	r22, r24
    1f44:	cd 01       	movw	r24, r26
    1f46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	9e 83       	std	Y+6, r25	; 0x06
    1f50:	8d 83       	std	Y+5, r24	; 0x05
    1f52:	0f c0       	rjmp	.+30     	; 0x1f72 <CLCD_voidSendData+0xe8>
    1f54:	88 ec       	ldi	r24, 0xC8	; 200
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	9c 83       	std	Y+4, r25	; 0x04
    1f5a:	8b 83       	std	Y+3, r24	; 0x03
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <CLCD_voidSendData+0xd6>
    1f64:	9c 83       	std	Y+4, r25	; 0x04
    1f66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f68:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	9e 83       	std	Y+6, r25	; 0x06
    1f70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f72:	8d 81       	ldd	r24, Y+5	; 0x05
    1f74:	9e 81       	ldd	r25, Y+6	; 0x06
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	69 f7       	brne	.-38     	; 0x1f54 <CLCD_voidSendData+0xca>
    1f7a:	14 c0       	rjmp	.+40     	; 0x1fa4 <CLCD_voidSendData+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7e:	78 85       	ldd	r23, Y+8	; 0x08
    1f80:	89 85       	ldd	r24, Y+9	; 0x09
    1f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	9e 83       	std	Y+6, r25	; 0x06
    1f8e:	8d 83       	std	Y+5, r24	; 0x05
    1f90:	8d 81       	ldd	r24, Y+5	; 0x05
    1f92:	9e 81       	ldd	r25, Y+6	; 0x06
    1f94:	9a 83       	std	Y+2, r25	; 0x02
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	f1 f7       	brne	.-4      	; 0x1f9c <CLCD_voidSendData+0x112>
    1fa0:	9a 83       	std	Y+2, r25	; 0x02
    1fa2:	89 83       	std	Y+1, r24	; 0x01
	#endif

	_delay_ms(1);
	  
	  
 }
    1fa4:	2f 96       	adiw	r28, 0x0f	; 15
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <CLCD_voidSendCommand>:
	 
void CLCD_voidSendCommand( u8 copy_u8Command)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	2f 97       	sbiw	r28, 0x0f	; 15
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	8f 87       	std	Y+15, r24	; 0x0f
	 #if CLCD_MODE == EIGHT_BIT_MODE
	 MDIO_voidSetPortValue(CLCD_DATA_PORT,copy_u8Command);
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	6f 85       	ldd	r22, Y+15	; 0x0f
    1fd0:	0e 94 c8 09 	call	0x1390	; 0x1390 <MDIO_voidSetPortValue>
	 MDIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_PIN_LOW);
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	60 e0       	ldi	r22, 0x00	; 0
    1fd8:	40 e0       	ldi	r20, 0x00	; 0
    1fda:	0e 94 d3 06 	call	0xda6	; 0xda6 <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_PIN_LOW);
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	61 e0       	ldi	r22, 0x01	; 1
    1fe2:	40 e0       	ldi	r20, 0x00	; 0
    1fe4:	0e 94 d3 06 	call	0xda6	; 0xda6 <MDIO_voidSetPinValue>
	 CLCD_voidSendFallingEdge ();
    1fe8:	0e 94 b9 11 	call	0x2372	; 0x2372 <CLCD_voidSendFallingEdge>
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	a0 e8       	ldi	r26, 0x80	; 128
    1ff2:	bf e3       	ldi	r27, 0x3F	; 63
    1ff4:	8b 87       	std	Y+11, r24	; 0x0b
    1ff6:	9c 87       	std	Y+12, r25	; 0x0c
    1ff8:	ad 87       	std	Y+13, r26	; 0x0d
    1ffa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ffe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2000:	8d 85       	ldd	r24, Y+13	; 0x0d
    2002:	9e 85       	ldd	r25, Y+14	; 0x0e
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	4a ef       	ldi	r20, 0xFA	; 250
    200a:	54 e4       	ldi	r21, 0x44	; 68
    200c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	8f 83       	std	Y+7, r24	; 0x07
    2016:	98 87       	std	Y+8, r25	; 0x08
    2018:	a9 87       	std	Y+9, r26	; 0x09
    201a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    201c:	6f 81       	ldd	r22, Y+7	; 0x07
    201e:	78 85       	ldd	r23, Y+8	; 0x08
    2020:	89 85       	ldd	r24, Y+9	; 0x09
    2022:	9a 85       	ldd	r25, Y+10	; 0x0a
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e8       	ldi	r20, 0x80	; 128
    202a:	5f e3       	ldi	r21, 0x3F	; 63
    202c:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    2030:	88 23       	and	r24, r24
    2032:	2c f4       	brge	.+10     	; 0x203e <CLCD_voidSendCommand+0x88>
		__ticks = 1;
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	9e 83       	std	Y+6, r25	; 0x06
    203a:	8d 83       	std	Y+5, r24	; 0x05
    203c:	3f c0       	rjmp	.+126    	; 0x20bc <CLCD_voidSendCommand+0x106>
	else if (__tmp > 65535)
    203e:	6f 81       	ldd	r22, Y+7	; 0x07
    2040:	78 85       	ldd	r23, Y+8	; 0x08
    2042:	89 85       	ldd	r24, Y+9	; 0x09
    2044:	9a 85       	ldd	r25, Y+10	; 0x0a
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	3f ef       	ldi	r19, 0xFF	; 255
    204a:	4f e7       	ldi	r20, 0x7F	; 127
    204c:	57 e4       	ldi	r21, 0x47	; 71
    204e:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    2052:	18 16       	cp	r1, r24
    2054:	4c f5       	brge	.+82     	; 0x20a8 <CLCD_voidSendCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2056:	6b 85       	ldd	r22, Y+11	; 0x0b
    2058:	7c 85       	ldd	r23, Y+12	; 0x0c
    205a:	8d 85       	ldd	r24, Y+13	; 0x0d
    205c:	9e 85       	ldd	r25, Y+14	; 0x0e
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e2       	ldi	r20, 0x20	; 32
    2064:	51 e4       	ldi	r21, 0x41	; 65
    2066:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	bc 01       	movw	r22, r24
    2070:	cd 01       	movw	r24, r26
    2072:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05
    207e:	0f c0       	rjmp	.+30     	; 0x209e <CLCD_voidSendCommand+0xe8>
    2080:	88 ec       	ldi	r24, 0xC8	; 200
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	9c 83       	std	Y+4, r25	; 0x04
    2086:	8b 83       	std	Y+3, r24	; 0x03
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	9c 81       	ldd	r25, Y+4	; 0x04
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <CLCD_voidSendCommand+0xd6>
    2090:	9c 83       	std	Y+4, r25	; 0x04
    2092:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2094:	8d 81       	ldd	r24, Y+5	; 0x05
    2096:	9e 81       	ldd	r25, Y+6	; 0x06
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	9e 83       	std	Y+6, r25	; 0x06
    209c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	9e 81       	ldd	r25, Y+6	; 0x06
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	69 f7       	brne	.-38     	; 0x2080 <CLCD_voidSendCommand+0xca>
    20a6:	14 c0       	rjmp	.+40     	; 0x20d0 <CLCD_voidSendCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a8:	6f 81       	ldd	r22, Y+7	; 0x07
    20aa:	78 85       	ldd	r23, Y+8	; 0x08
    20ac:	89 85       	ldd	r24, Y+9	; 0x09
    20ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	9e 83       	std	Y+6, r25	; 0x06
    20ba:	8d 83       	std	Y+5, r24	; 0x05
    20bc:	8d 81       	ldd	r24, Y+5	; 0x05
    20be:	9e 81       	ldd	r25, Y+6	; 0x06
    20c0:	9a 83       	std	Y+2, r25	; 0x02
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	9a 81       	ldd	r25, Y+2	; 0x02
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <CLCD_voidSendCommand+0x112>
    20cc:	9a 83       	std	Y+2, r25	; 0x02
    20ce:	89 83       	std	Y+1, r24	; 0x01

	#endif

	_delay_ms(1);
	 
}
    20d0:	2f 96       	adiw	r28, 0x0f	; 15
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <CLCD_voidClearScreen>:
void CLCD_voidClearScreen(void)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	2e 97       	sbiw	r28, 0x0e	; 14
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand( LCD_DISPLAY_CLEAR);
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <CLCD_voidSendCommand>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	a0 e2       	ldi	r26, 0x20	; 32
    2102:	b1 e4       	ldi	r27, 0x41	; 65
    2104:	8b 87       	std	Y+11, r24	; 0x0b
    2106:	9c 87       	std	Y+12, r25	; 0x0c
    2108:	ad 87       	std	Y+13, r26	; 0x0d
    210a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210c:	6b 85       	ldd	r22, Y+11	; 0x0b
    210e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2110:	8d 85       	ldd	r24, Y+13	; 0x0d
    2112:	9e 85       	ldd	r25, Y+14	; 0x0e
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	4a ef       	ldi	r20, 0xFA	; 250
    211a:	54 e4       	ldi	r21, 0x44	; 68
    211c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	8f 83       	std	Y+7, r24	; 0x07
    2126:	98 87       	std	Y+8, r25	; 0x08
    2128:	a9 87       	std	Y+9, r26	; 0x09
    212a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    212c:	6f 81       	ldd	r22, Y+7	; 0x07
    212e:	78 85       	ldd	r23, Y+8	; 0x08
    2130:	89 85       	ldd	r24, Y+9	; 0x09
    2132:	9a 85       	ldd	r25, Y+10	; 0x0a
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e8       	ldi	r20, 0x80	; 128
    213a:	5f e3       	ldi	r21, 0x3F	; 63
    213c:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    2140:	88 23       	and	r24, r24
    2142:	2c f4       	brge	.+10     	; 0x214e <CLCD_voidClearScreen+0x6c>
		__ticks = 1;
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	9e 83       	std	Y+6, r25	; 0x06
    214a:	8d 83       	std	Y+5, r24	; 0x05
    214c:	3f c0       	rjmp	.+126    	; 0x21cc <CLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    214e:	6f 81       	ldd	r22, Y+7	; 0x07
    2150:	78 85       	ldd	r23, Y+8	; 0x08
    2152:	89 85       	ldd	r24, Y+9	; 0x09
    2154:	9a 85       	ldd	r25, Y+10	; 0x0a
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	3f ef       	ldi	r19, 0xFF	; 255
    215a:	4f e7       	ldi	r20, 0x7F	; 127
    215c:	57 e4       	ldi	r21, 0x47	; 71
    215e:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    2162:	18 16       	cp	r1, r24
    2164:	4c f5       	brge	.+82     	; 0x21b8 <CLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2166:	6b 85       	ldd	r22, Y+11	; 0x0b
    2168:	7c 85       	ldd	r23, Y+12	; 0x0c
    216a:	8d 85       	ldd	r24, Y+13	; 0x0d
    216c:	9e 85       	ldd	r25, Y+14	; 0x0e
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e2       	ldi	r20, 0x20	; 32
    2174:	51 e4       	ldi	r21, 0x41	; 65
    2176:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	bc 01       	movw	r22, r24
    2180:	cd 01       	movw	r24, r26
    2182:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9e 83       	std	Y+6, r25	; 0x06
    218c:	8d 83       	std	Y+5, r24	; 0x05
    218e:	0f c0       	rjmp	.+30     	; 0x21ae <CLCD_voidClearScreen+0xcc>
    2190:	88 ec       	ldi	r24, 0xC8	; 200
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9c 83       	std	Y+4, r25	; 0x04
    2196:	8b 83       	std	Y+3, r24	; 0x03
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	9c 81       	ldd	r25, Y+4	; 0x04
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	f1 f7       	brne	.-4      	; 0x219c <CLCD_voidClearScreen+0xba>
    21a0:	9c 83       	std	Y+4, r25	; 0x04
    21a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a4:	8d 81       	ldd	r24, Y+5	; 0x05
    21a6:	9e 81       	ldd	r25, Y+6	; 0x06
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	9e 83       	std	Y+6, r25	; 0x06
    21ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ae:	8d 81       	ldd	r24, Y+5	; 0x05
    21b0:	9e 81       	ldd	r25, Y+6	; 0x06
    21b2:	00 97       	sbiw	r24, 0x00	; 0
    21b4:	69 f7       	brne	.-38     	; 0x2190 <CLCD_voidClearScreen+0xae>
    21b6:	14 c0       	rjmp	.+40     	; 0x21e0 <CLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ba:	78 85       	ldd	r23, Y+8	; 0x08
    21bc:	89 85       	ldd	r24, Y+9	; 0x09
    21be:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	9e 83       	std	Y+6, r25	; 0x06
    21ca:	8d 83       	std	Y+5, r24	; 0x05
    21cc:	8d 81       	ldd	r24, Y+5	; 0x05
    21ce:	9e 81       	ldd	r25, Y+6	; 0x06
    21d0:	9a 83       	std	Y+2, r25	; 0x02
    21d2:	89 83       	std	Y+1, r24	; 0x01
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	9a 81       	ldd	r25, Y+2	; 0x02
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <CLCD_voidClearScreen+0xf6>
    21dc:	9a 83       	std	Y+2, r25	; 0x02
    21de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    21e0:	2e 96       	adiw	r28, 0x0e	; 14
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	de bf       	out	0x3e, r29	; 62
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	cd bf       	out	0x3d, r28	; 61
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	08 95       	ret

000021f2 <CLCD_voidSendString>:
 void CLCD_voidSendString( u8* copy_u8ptrString)
 {
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <CLCD_voidSendString+0x6>
    21f8:	0f 92       	push	r0
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	9b 83       	std	Y+3, r25	; 0x03
    2200:	8a 83       	std	Y+2, r24	; 0x02
	 u8 LOC_u8Itrator=0;
    2202:	19 82       	std	Y+1, r1	; 0x01
    2204:	0e c0       	rjmp	.+28     	; 0x2222 <CLCD_voidSendString+0x30>
	 while(copy_u8ptrString[ LOC_u8Itrator] != '\0')
	 {
		CLCD_voidSendData(copy_u8ptrString[ LOC_u8Itrator]);
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	9b 81       	ldd	r25, Y+3	; 0x03
    2210:	fc 01       	movw	r30, r24
    2212:	e2 0f       	add	r30, r18
    2214:	f3 1f       	adc	r31, r19
    2216:	80 81       	ld	r24, Z
    2218:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <CLCD_voidSendData>
		 LOC_u8Itrator++;
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	8f 5f       	subi	r24, 0xFF	; 255
    2220:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
 void CLCD_voidSendString( u8* copy_u8ptrString)
 {
	 u8 LOC_u8Itrator=0;
	 while(copy_u8ptrString[ LOC_u8Itrator] != '\0')
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	28 2f       	mov	r18, r24
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	9b 81       	ldd	r25, Y+3	; 0x03
    222c:	fc 01       	movw	r30, r24
    222e:	e2 0f       	add	r30, r18
    2230:	f3 1f       	adc	r31, r19
    2232:	80 81       	ld	r24, Z
    2234:	88 23       	and	r24, r24
    2236:	39 f7       	brne	.-50     	; 0x2206 <CLCD_voidSendString+0x14>
	 {
		CLCD_voidSendData(copy_u8ptrString[ LOC_u8Itrator]);
		 LOC_u8Itrator++;
	 }
 }	 
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <CLCD_voidSetPosition>:

 void CLCD_voidSetPosition ( u8 copy_u8Row, u8 copy_u8Column)
 {
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	61 97       	sbiw	r28, 0x11	; 17
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	88 8b       	std	Y+16, r24	; 0x10
    225a:	69 8b       	std	Y+17, r22	; 0x11
	 u8 LOC_u8Data;/*
	 if( (copy_u8Row>2)||(copy_u8Row<1) ||(copy_u8Column>16)||(copy_u8Column<1))
	 {
		 LOC_u8Data=LCD_SET_CURSOR_FIRST_LINE;
	 }
	 else*/ if(copy_u8Row==CLCD_ROW_1)
    225c:	88 89       	ldd	r24, Y+16	; 0x10
    225e:	81 30       	cpi	r24, 0x01	; 1
    2260:	21 f4       	brne	.+8      	; 0x226a <CLCD_voidSetPosition+0x26>
	 {
		 LOC_u8Data=LCD_SET_CURSOR_FIRST_LINE+(copy_u8Column-1);
    2262:	89 89       	ldd	r24, Y+17	; 0x11
    2264:	81 58       	subi	r24, 0x81	; 129
    2266:	8f 87       	std	Y+15, r24	; 0x0f
    2268:	06 c0       	rjmp	.+12     	; 0x2276 <CLCD_voidSetPosition+0x32>
	 }
     else if(copy_u8Row==CLCD_ROW_2)
    226a:	88 89       	ldd	r24, Y+16	; 0x10
    226c:	82 30       	cpi	r24, 0x02	; 2
    226e:	19 f4       	brne	.+6      	; 0x2276 <CLCD_voidSetPosition+0x32>
	 {
		 LOC_u8Data=LCD_SET_CURSOR_SECOND_LINE +(copy_u8Column-1);
    2270:	89 89       	ldd	r24, Y+17	; 0x11
    2272:	81 54       	subi	r24, 0x41	; 65
    2274:	8f 87       	std	Y+15, r24	; 0x0f
	 }	
    CLCD_voidSendCommand(LOC_u8Data);
    2276:	8f 85       	ldd	r24, Y+15	; 0x0f
    2278:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <CLCD_voidSendCommand>
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	a0 e8       	ldi	r26, 0x80	; 128
    2282:	bf e3       	ldi	r27, 0x3F	; 63
    2284:	8b 87       	std	Y+11, r24	; 0x0b
    2286:	9c 87       	std	Y+12, r25	; 0x0c
    2288:	ad 87       	std	Y+13, r26	; 0x0d
    228a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228c:	6b 85       	ldd	r22, Y+11	; 0x0b
    228e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2290:	8d 85       	ldd	r24, Y+13	; 0x0d
    2292:	9e 85       	ldd	r25, Y+14	; 0x0e
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	4a ef       	ldi	r20, 0xFA	; 250
    229a:	54 e4       	ldi	r21, 0x44	; 68
    229c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	8f 83       	std	Y+7, r24	; 0x07
    22a6:	98 87       	std	Y+8, r25	; 0x08
    22a8:	a9 87       	std	Y+9, r26	; 0x09
    22aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ac:	6f 81       	ldd	r22, Y+7	; 0x07
    22ae:	78 85       	ldd	r23, Y+8	; 0x08
    22b0:	89 85       	ldd	r24, Y+9	; 0x09
    22b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e8       	ldi	r20, 0x80	; 128
    22ba:	5f e3       	ldi	r21, 0x3F	; 63
    22bc:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    22c0:	88 23       	and	r24, r24
    22c2:	2c f4       	brge	.+10     	; 0x22ce <CLCD_voidSetPosition+0x8a>
		__ticks = 1;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	9e 83       	std	Y+6, r25	; 0x06
    22ca:	8d 83       	std	Y+5, r24	; 0x05
    22cc:	3f c0       	rjmp	.+126    	; 0x234c <CLCD_voidSetPosition+0x108>
	else if (__tmp > 65535)
    22ce:	6f 81       	ldd	r22, Y+7	; 0x07
    22d0:	78 85       	ldd	r23, Y+8	; 0x08
    22d2:	89 85       	ldd	r24, Y+9	; 0x09
    22d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	3f ef       	ldi	r19, 0xFF	; 255
    22da:	4f e7       	ldi	r20, 0x7F	; 127
    22dc:	57 e4       	ldi	r21, 0x47	; 71
    22de:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    22e2:	18 16       	cp	r1, r24
    22e4:	4c f5       	brge	.+82     	; 0x2338 <CLCD_voidSetPosition+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e2       	ldi	r20, 0x20	; 32
    22f4:	51 e4       	ldi	r21, 0x41	; 65
    22f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	bc 01       	movw	r22, r24
    2300:	cd 01       	movw	r24, r26
    2302:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9e 83       	std	Y+6, r25	; 0x06
    230c:	8d 83       	std	Y+5, r24	; 0x05
    230e:	0f c0       	rjmp	.+30     	; 0x232e <CLCD_voidSetPosition+0xea>
    2310:	88 ec       	ldi	r24, 0xC8	; 200
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	9c 83       	std	Y+4, r25	; 0x04
    2316:	8b 83       	std	Y+3, r24	; 0x03
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	9c 81       	ldd	r25, Y+4	; 0x04
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	f1 f7       	brne	.-4      	; 0x231c <CLCD_voidSetPosition+0xd8>
    2320:	9c 83       	std	Y+4, r25	; 0x04
    2322:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2324:	8d 81       	ldd	r24, Y+5	; 0x05
    2326:	9e 81       	ldd	r25, Y+6	; 0x06
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	9e 83       	std	Y+6, r25	; 0x06
    232c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232e:	8d 81       	ldd	r24, Y+5	; 0x05
    2330:	9e 81       	ldd	r25, Y+6	; 0x06
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	69 f7       	brne	.-38     	; 0x2310 <CLCD_voidSetPosition+0xcc>
    2336:	14 c0       	rjmp	.+40     	; 0x2360 <CLCD_voidSetPosition+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2338:	6f 81       	ldd	r22, Y+7	; 0x07
    233a:	78 85       	ldd	r23, Y+8	; 0x08
    233c:	89 85       	ldd	r24, Y+9	; 0x09
    233e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2340:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9e 83       	std	Y+6, r25	; 0x06
    234a:	8d 83       	std	Y+5, r24	; 0x05
    234c:	8d 81       	ldd	r24, Y+5	; 0x05
    234e:	9e 81       	ldd	r25, Y+6	; 0x06
    2350:	9a 83       	std	Y+2, r25	; 0x02
    2352:	89 83       	std	Y+1, r24	; 0x01
    2354:	89 81       	ldd	r24, Y+1	; 0x01
    2356:	9a 81       	ldd	r25, Y+2	; 0x02
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <CLCD_voidSetPosition+0x114>
    235c:	9a 83       	std	Y+2, r25	; 0x02
    235e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
 }	
    2360:	61 96       	adiw	r28, 0x11	; 17
    2362:	0f b6       	in	r0, 0x3f	; 63
    2364:	f8 94       	cli
    2366:	de bf       	out	0x3e, r29	; 62
    2368:	0f be       	out	0x3f, r0	; 63
    236a:	cd bf       	out	0x3d, r28	; 61
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <CLCD_voidSendFallingEdge>:




 void CLCD_voidSendFallingEdge (void)
 {
    2372:	df 93       	push	r29
    2374:	cf 93       	push	r28
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	6c 97       	sbiw	r28, 0x1c	; 28
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN_PIN, DIO_PIN_HIGH);
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	62 e0       	ldi	r22, 0x02	; 2
    238a:	41 e0       	ldi	r20, 0x01	; 1
    238c:	0e 94 d3 06 	call	0xda6	; 0xda6 <MDIO_voidSetPinValue>
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	a0 e8       	ldi	r26, 0x80	; 128
    2396:	bf e3       	ldi	r27, 0x3F	; 63
    2398:	89 8f       	std	Y+25, r24	; 0x19
    239a:	9a 8f       	std	Y+26, r25	; 0x1a
    239c:	ab 8f       	std	Y+27, r26	; 0x1b
    239e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a0:	69 8d       	ldd	r22, Y+25	; 0x19
    23a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	4a ef       	ldi	r20, 0xFA	; 250
    23ae:	54 e4       	ldi	r21, 0x44	; 68
    23b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	8d 8b       	std	Y+21, r24	; 0x15
    23ba:	9e 8b       	std	Y+22, r25	; 0x16
    23bc:	af 8b       	std	Y+23, r26	; 0x17
    23be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23c0:	6d 89       	ldd	r22, Y+21	; 0x15
    23c2:	7e 89       	ldd	r23, Y+22	; 0x16
    23c4:	8f 89       	ldd	r24, Y+23	; 0x17
    23c6:	98 8d       	ldd	r25, Y+24	; 0x18
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	40 e8       	ldi	r20, 0x80	; 128
    23ce:	5f e3       	ldi	r21, 0x3F	; 63
    23d0:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    23d4:	88 23       	and	r24, r24
    23d6:	2c f4       	brge	.+10     	; 0x23e2 <CLCD_voidSendFallingEdge+0x70>
		__ticks = 1;
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	9c 8b       	std	Y+20, r25	; 0x14
    23de:	8b 8b       	std	Y+19, r24	; 0x13
    23e0:	3f c0       	rjmp	.+126    	; 0x2460 <CLCD_voidSendFallingEdge+0xee>
	else if (__tmp > 65535)
    23e2:	6d 89       	ldd	r22, Y+21	; 0x15
    23e4:	7e 89       	ldd	r23, Y+22	; 0x16
    23e6:	8f 89       	ldd	r24, Y+23	; 0x17
    23e8:	98 8d       	ldd	r25, Y+24	; 0x18
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	3f ef       	ldi	r19, 0xFF	; 255
    23ee:	4f e7       	ldi	r20, 0x7F	; 127
    23f0:	57 e4       	ldi	r21, 0x47	; 71
    23f2:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    23f6:	18 16       	cp	r1, r24
    23f8:	4c f5       	brge	.+82     	; 0x244c <CLCD_voidSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fa:	69 8d       	ldd	r22, Y+25	; 0x19
    23fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2400:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e2       	ldi	r20, 0x20	; 32
    2408:	51 e4       	ldi	r21, 0x41	; 65
    240a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	bc 01       	movw	r22, r24
    2414:	cd 01       	movw	r24, r26
    2416:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	9c 8b       	std	Y+20, r25	; 0x14
    2420:	8b 8b       	std	Y+19, r24	; 0x13
    2422:	0f c0       	rjmp	.+30     	; 0x2442 <CLCD_voidSendFallingEdge+0xd0>
    2424:	88 ec       	ldi	r24, 0xC8	; 200
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	9a 8b       	std	Y+18, r25	; 0x12
    242a:	89 8b       	std	Y+17, r24	; 0x11
    242c:	89 89       	ldd	r24, Y+17	; 0x11
    242e:	9a 89       	ldd	r25, Y+18	; 0x12
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	f1 f7       	brne	.-4      	; 0x2430 <CLCD_voidSendFallingEdge+0xbe>
    2434:	9a 8b       	std	Y+18, r25	; 0x12
    2436:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2438:	8b 89       	ldd	r24, Y+19	; 0x13
    243a:	9c 89       	ldd	r25, Y+20	; 0x14
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	9c 8b       	std	Y+20, r25	; 0x14
    2440:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2442:	8b 89       	ldd	r24, Y+19	; 0x13
    2444:	9c 89       	ldd	r25, Y+20	; 0x14
    2446:	00 97       	sbiw	r24, 0x00	; 0
    2448:	69 f7       	brne	.-38     	; 0x2424 <CLCD_voidSendFallingEdge+0xb2>
    244a:	14 c0       	rjmp	.+40     	; 0x2474 <CLCD_voidSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244c:	6d 89       	ldd	r22, Y+21	; 0x15
    244e:	7e 89       	ldd	r23, Y+22	; 0x16
    2450:	8f 89       	ldd	r24, Y+23	; 0x17
    2452:	98 8d       	ldd	r25, Y+24	; 0x18
    2454:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	9c 8b       	std	Y+20, r25	; 0x14
    245e:	8b 8b       	std	Y+19, r24	; 0x13
    2460:	8b 89       	ldd	r24, Y+19	; 0x13
    2462:	9c 89       	ldd	r25, Y+20	; 0x14
    2464:	98 8b       	std	Y+16, r25	; 0x10
    2466:	8f 87       	std	Y+15, r24	; 0x0f
    2468:	8f 85       	ldd	r24, Y+15	; 0x0f
    246a:	98 89       	ldd	r25, Y+16	; 0x10
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	f1 f7       	brne	.-4      	; 0x246c <CLCD_voidSendFallingEdge+0xfa>
    2470:	98 8b       	std	Y+16, r25	; 0x10
    2472:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN_PIN, DIO_PIN_LOW);
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	62 e0       	ldi	r22, 0x02	; 2
    2478:	40 e0       	ldi	r20, 0x00	; 0
    247a:	0e 94 d3 06 	call	0xda6	; 0xda6 <MDIO_voidSetPinValue>
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	a0 e8       	ldi	r26, 0x80	; 128
    2484:	bf e3       	ldi	r27, 0x3F	; 63
    2486:	8b 87       	std	Y+11, r24	; 0x0b
    2488:	9c 87       	std	Y+12, r25	; 0x0c
    248a:	ad 87       	std	Y+13, r26	; 0x0d
    248c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2490:	7c 85       	ldd	r23, Y+12	; 0x0c
    2492:	8d 85       	ldd	r24, Y+13	; 0x0d
    2494:	9e 85       	ldd	r25, Y+14	; 0x0e
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	4a ef       	ldi	r20, 0xFA	; 250
    249c:	54 e4       	ldi	r21, 0x44	; 68
    249e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	8f 83       	std	Y+7, r24	; 0x07
    24a8:	98 87       	std	Y+8, r25	; 0x08
    24aa:	a9 87       	std	Y+9, r26	; 0x09
    24ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ae:	6f 81       	ldd	r22, Y+7	; 0x07
    24b0:	78 85       	ldd	r23, Y+8	; 0x08
    24b2:	89 85       	ldd	r24, Y+9	; 0x09
    24b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	40 e8       	ldi	r20, 0x80	; 128
    24bc:	5f e3       	ldi	r21, 0x3F	; 63
    24be:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    24c2:	88 23       	and	r24, r24
    24c4:	2c f4       	brge	.+10     	; 0x24d0 <CLCD_voidSendFallingEdge+0x15e>
		__ticks = 1;
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	9e 83       	std	Y+6, r25	; 0x06
    24cc:	8d 83       	std	Y+5, r24	; 0x05
    24ce:	3f c0       	rjmp	.+126    	; 0x254e <CLCD_voidSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    24d0:	6f 81       	ldd	r22, Y+7	; 0x07
    24d2:	78 85       	ldd	r23, Y+8	; 0x08
    24d4:	89 85       	ldd	r24, Y+9	; 0x09
    24d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	3f ef       	ldi	r19, 0xFF	; 255
    24dc:	4f e7       	ldi	r20, 0x7F	; 127
    24de:	57 e4       	ldi	r21, 0x47	; 71
    24e0:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    24e4:	18 16       	cp	r1, r24
    24e6:	4c f5       	brge	.+82     	; 0x253a <CLCD_voidSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	40 e2       	ldi	r20, 0x20	; 32
    24f6:	51 e4       	ldi	r21, 0x41	; 65
    24f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	bc 01       	movw	r22, r24
    2502:	cd 01       	movw	r24, r26
    2504:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	9e 83       	std	Y+6, r25	; 0x06
    250e:	8d 83       	std	Y+5, r24	; 0x05
    2510:	0f c0       	rjmp	.+30     	; 0x2530 <CLCD_voidSendFallingEdge+0x1be>
    2512:	88 ec       	ldi	r24, 0xC8	; 200
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	9c 83       	std	Y+4, r25	; 0x04
    2518:	8b 83       	std	Y+3, r24	; 0x03
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	9c 81       	ldd	r25, Y+4	; 0x04
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	f1 f7       	brne	.-4      	; 0x251e <CLCD_voidSendFallingEdge+0x1ac>
    2522:	9c 83       	std	Y+4, r25	; 0x04
    2524:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2526:	8d 81       	ldd	r24, Y+5	; 0x05
    2528:	9e 81       	ldd	r25, Y+6	; 0x06
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2530:	8d 81       	ldd	r24, Y+5	; 0x05
    2532:	9e 81       	ldd	r25, Y+6	; 0x06
    2534:	00 97       	sbiw	r24, 0x00	; 0
    2536:	69 f7       	brne	.-38     	; 0x2512 <CLCD_voidSendFallingEdge+0x1a0>
    2538:	14 c0       	rjmp	.+40     	; 0x2562 <CLCD_voidSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253a:	6f 81       	ldd	r22, Y+7	; 0x07
    253c:	78 85       	ldd	r23, Y+8	; 0x08
    253e:	89 85       	ldd	r24, Y+9	; 0x09
    2540:	9a 85       	ldd	r25, Y+10	; 0x0a
    2542:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	9e 83       	std	Y+6, r25	; 0x06
    254c:	8d 83       	std	Y+5, r24	; 0x05
    254e:	8d 81       	ldd	r24, Y+5	; 0x05
    2550:	9e 81       	ldd	r25, Y+6	; 0x06
    2552:	9a 83       	std	Y+2, r25	; 0x02
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	9a 81       	ldd	r25, Y+2	; 0x02
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	f1 f7       	brne	.-4      	; 0x255a <CLCD_voidSendFallingEdge+0x1e8>
    255e:	9a 83       	std	Y+2, r25	; 0x02
    2560:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
 }
    2562:	6c 96       	adiw	r28, 0x1c	; 28
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	f8 94       	cli
    2568:	de bf       	out	0x3e, r29	; 62
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	cd bf       	out	0x3d, r28	; 61
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	08 95       	ret

00002574 <CLCD_voidSendNumber>:



void CLCD_voidSendNumber(s32 cpy_u32Number) //123
{      u32 cpy_u32power=1;
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	2c 97       	sbiw	r28, 0x0c	; 12
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	de bf       	out	0x3e, r29	; 62
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	69 87       	std	Y+9, r22	; 0x09
    258a:	7a 87       	std	Y+10, r23	; 0x0a
    258c:	8b 87       	std	Y+11, r24	; 0x0b
    258e:	9c 87       	std	Y+12, r25	; 0x0c
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	a0 e0       	ldi	r26, 0x00	; 0
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	8d 83       	std	Y+5, r24	; 0x05
    259a:	9e 83       	std	Y+6, r25	; 0x06
    259c:	af 83       	std	Y+7, r26	; 0x07
    259e:	b8 87       	std	Y+8, r27	; 0x08
       s32 cpy_u32num=cpy_u32Number;
    25a0:	89 85       	ldd	r24, Y+9	; 0x09
    25a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a4:	ab 85       	ldd	r26, Y+11	; 0x0b
    25a6:	bc 85       	ldd	r27, Y+12	; 0x0c
    25a8:	89 83       	std	Y+1, r24	; 0x01
    25aa:	9a 83       	std	Y+2, r25	; 0x02
    25ac:	ab 83       	std	Y+3, r26	; 0x03
    25ae:	bc 83       	std	Y+4, r27	; 0x04
      if(cpy_u32Number==0)
    25b0:	89 85       	ldd	r24, Y+9	; 0x09
    25b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b4:	ab 85       	ldd	r26, Y+11	; 0x0b
    25b6:	bc 85       	ldd	r27, Y+12	; 0x0c
    25b8:	00 97       	sbiw	r24, 0x00	; 0
    25ba:	a1 05       	cpc	r26, r1
    25bc:	b1 05       	cpc	r27, r1
    25be:	21 f4       	brne	.+8      	; 0x25c8 <CLCD_voidSendNumber+0x54>
      {
    	  CLCD_voidSendData('0');
    25c0:	80 e3       	ldi	r24, 0x30	; 48
    25c2:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <CLCD_voidSendData>
    25c6:	9b c0       	rjmp	.+310    	; 0x26fe <CLCD_voidSendNumber+0x18a>
    	  return;
      }
      if(cpy_u32Number<0)
    25c8:	89 85       	ldd	r24, Y+9	; 0x09
    25ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    25cc:	ab 85       	ldd	r26, Y+11	; 0x0b
    25ce:	bc 85       	ldd	r27, Y+12	; 0x0c
    25d0:	bb 23       	and	r27, r27
    25d2:	bc f5       	brge	.+110    	; 0x2642 <CLCD_voidSendNumber+0xce>
      {

    	  cpy_u32Number=cpy_u32Number*(-1);
    25d4:	89 85       	ldd	r24, Y+9	; 0x09
    25d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d8:	ab 85       	ldd	r26, Y+11	; 0x0b
    25da:	bc 85       	ldd	r27, Y+12	; 0x0c
    25dc:	b0 95       	com	r27
    25de:	a0 95       	com	r26
    25e0:	90 95       	com	r25
    25e2:	81 95       	neg	r24
    25e4:	9f 4f       	sbci	r25, 0xFF	; 255
    25e6:	af 4f       	sbci	r26, 0xFF	; 255
    25e8:	bf 4f       	sbci	r27, 0xFF	; 255
    25ea:	89 87       	std	Y+9, r24	; 0x09
    25ec:	9a 87       	std	Y+10, r25	; 0x0a
    25ee:	ab 87       	std	Y+11, r26	; 0x0b
    25f0:	bc 87       	std	Y+12, r27	; 0x0c
    	  CLCD_voidSendData('-');
    25f2:	8d e2       	ldi	r24, 0x2D	; 45
    25f4:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <CLCD_voidSendData>
    25f8:	24 c0       	rjmp	.+72     	; 0x2642 <CLCD_voidSendNumber+0xce>
      }
      while(cpy_u32num)
      {//01234

    	  cpy_u32num=cpy_u32num/10;          //01234  0123  012   01   0 0
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	9a 81       	ldd	r25, Y+2	; 0x02
    25fe:	ab 81       	ldd	r26, Y+3	; 0x03
    2600:	bc 81       	ldd	r27, Y+4	; 0x04
    2602:	2a e0       	ldi	r18, 0x0A	; 10
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	40 e0       	ldi	r20, 0x00	; 0
    2608:	50 e0       	ldi	r21, 0x00	; 0
    260a:	bc 01       	movw	r22, r24
    260c:	cd 01       	movw	r24, r26
    260e:	0e 94 00 2a 	call	0x5400	; 0x5400 <__divmodsi4>
    2612:	da 01       	movw	r26, r20
    2614:	c9 01       	movw	r24, r18
    2616:	89 83       	std	Y+1, r24	; 0x01
    2618:	9a 83       	std	Y+2, r25	; 0x02
    261a:	ab 83       	std	Y+3, r26	; 0x03
    261c:	bc 83       	std	Y+4, r27	; 0x04
    	  cpy_u32power=cpy_u32power*10;      //10000
    261e:	8d 81       	ldd	r24, Y+5	; 0x05
    2620:	9e 81       	ldd	r25, Y+6	; 0x06
    2622:	af 81       	ldd	r26, Y+7	; 0x07
    2624:	b8 85       	ldd	r27, Y+8	; 0x08
    2626:	2a e0       	ldi	r18, 0x0A	; 10
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	40 e0       	ldi	r20, 0x00	; 0
    262c:	50 e0       	ldi	r21, 0x00	; 0
    262e:	bc 01       	movw	r22, r24
    2630:	cd 01       	movw	r24, r26
    2632:	0e 94 bf 29 	call	0x537e	; 0x537e <__mulsi3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	8d 83       	std	Y+5, r24	; 0x05
    263c:	9e 83       	std	Y+6, r25	; 0x06
    263e:	af 83       	std	Y+7, r26	; 0x07
    2640:	b8 87       	std	Y+8, r27	; 0x08
      {

    	  cpy_u32Number=cpy_u32Number*(-1);
    	  CLCD_voidSendData('-');
      }
      while(cpy_u32num)
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	9a 81       	ldd	r25, Y+2	; 0x02
    2646:	ab 81       	ldd	r26, Y+3	; 0x03
    2648:	bc 81       	ldd	r27, Y+4	; 0x04
    264a:	00 97       	sbiw	r24, 0x00	; 0
    264c:	a1 05       	cpc	r26, r1
    264e:	b1 05       	cpc	r27, r1
    2650:	a1 f6       	brne	.-88     	; 0x25fa <CLCD_voidSendNumber+0x86>
      {//01234

    	  cpy_u32num=cpy_u32num/10;          //01234  0123  012   01   0 0
    	  cpy_u32power=cpy_u32power*10;      //10000
      }
      cpy_u32power=cpy_u32power/10;
    2652:	8d 81       	ldd	r24, Y+5	; 0x05
    2654:	9e 81       	ldd	r25, Y+6	; 0x06
    2656:	af 81       	ldd	r26, Y+7	; 0x07
    2658:	b8 85       	ldd	r27, Y+8	; 0x08
    265a:	2a e0       	ldi	r18, 0x0A	; 10
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e0       	ldi	r20, 0x00	; 0
    2660:	50 e0       	ldi	r21, 0x00	; 0
    2662:	bc 01       	movw	r22, r24
    2664:	cd 01       	movw	r24, r26
    2666:	0e 94 de 29 	call	0x53bc	; 0x53bc <__udivmodsi4>
    266a:	da 01       	movw	r26, r20
    266c:	c9 01       	movw	r24, r18
    266e:	8d 83       	std	Y+5, r24	; 0x05
    2670:	9e 83       	std	Y+6, r25	; 0x06
    2672:	af 83       	std	Y+7, r26	; 0x07
    2674:	b8 87       	std	Y+8, r27	; 0x08
    2676:	3a c0       	rjmp	.+116    	; 0x26ec <CLCD_voidSendNumber+0x178>
      while(cpy_u32power>0)
      {
    	  cpy_u32num=cpy_u32Number/cpy_u32power;  //01234/1000=0
    2678:	89 85       	ldd	r24, Y+9	; 0x09
    267a:	9a 85       	ldd	r25, Y+10	; 0x0a
    267c:	ab 85       	ldd	r26, Y+11	; 0x0b
    267e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2680:	2d 81       	ldd	r18, Y+5	; 0x05
    2682:	3e 81       	ldd	r19, Y+6	; 0x06
    2684:	4f 81       	ldd	r20, Y+7	; 0x07
    2686:	58 85       	ldd	r21, Y+8	; 0x08
    2688:	bc 01       	movw	r22, r24
    268a:	cd 01       	movw	r24, r26
    268c:	0e 94 de 29 	call	0x53bc	; 0x53bc <__udivmodsi4>
    2690:	da 01       	movw	r26, r20
    2692:	c9 01       	movw	r24, r18
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	9a 83       	std	Y+2, r25	; 0x02
    2698:	ab 83       	std	Y+3, r26	; 0x03
    269a:	bc 83       	std	Y+4, r27	; 0x04
    	  cpy_u32Number%=cpy_u32power;
    269c:	89 85       	ldd	r24, Y+9	; 0x09
    269e:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a0:	ab 85       	ldd	r26, Y+11	; 0x0b
    26a2:	bc 85       	ldd	r27, Y+12	; 0x0c
    26a4:	2d 81       	ldd	r18, Y+5	; 0x05
    26a6:	3e 81       	ldd	r19, Y+6	; 0x06
    26a8:	4f 81       	ldd	r20, Y+7	; 0x07
    26aa:	58 85       	ldd	r21, Y+8	; 0x08
    26ac:	bc 01       	movw	r22, r24
    26ae:	cd 01       	movw	r24, r26
    26b0:	0e 94 de 29 	call	0x53bc	; 0x53bc <__udivmodsi4>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	89 87       	std	Y+9, r24	; 0x09
    26ba:	9a 87       	std	Y+10, r25	; 0x0a
    26bc:	ab 87       	std	Y+11, r26	; 0x0b
    26be:	bc 87       	std	Y+12, r27	; 0x0c
    	  cpy_u32power/=10;
    26c0:	8d 81       	ldd	r24, Y+5	; 0x05
    26c2:	9e 81       	ldd	r25, Y+6	; 0x06
    26c4:	af 81       	ldd	r26, Y+7	; 0x07
    26c6:	b8 85       	ldd	r27, Y+8	; 0x08
    26c8:	2a e0       	ldi	r18, 0x0A	; 10
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e0       	ldi	r20, 0x00	; 0
    26ce:	50 e0       	ldi	r21, 0x00	; 0
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	0e 94 de 29 	call	0x53bc	; 0x53bc <__udivmodsi4>
    26d8:	da 01       	movw	r26, r20
    26da:	c9 01       	movw	r24, r18
    26dc:	8d 83       	std	Y+5, r24	; 0x05
    26de:	9e 83       	std	Y+6, r25	; 0x06
    26e0:	af 83       	std	Y+7, r26	; 0x07
    26e2:	b8 87       	std	Y+8, r27	; 0x08

    	  CLCD_voidSendData(cpy_u32num+'0');
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	80 5d       	subi	r24, 0xD0	; 208
    26e8:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <CLCD_voidSendData>

    	  cpy_u32num=cpy_u32num/10;          //01234  0123  012   01   0 0
    	  cpy_u32power=cpy_u32power*10;      //10000
      }
      cpy_u32power=cpy_u32power/10;
      while(cpy_u32power>0)
    26ec:	8d 81       	ldd	r24, Y+5	; 0x05
    26ee:	9e 81       	ldd	r25, Y+6	; 0x06
    26f0:	af 81       	ldd	r26, Y+7	; 0x07
    26f2:	b8 85       	ldd	r27, Y+8	; 0x08
    26f4:	00 97       	sbiw	r24, 0x00	; 0
    26f6:	a1 05       	cpc	r26, r1
    26f8:	b1 05       	cpc	r27, r1
    26fa:	09 f0       	breq	.+2      	; 0x26fe <CLCD_voidSendNumber+0x18a>
    26fc:	bd cf       	rjmp	.-134    	; 0x2678 <CLCD_voidSendNumber+0x104>
      }




}
    26fe:	2c 96       	adiw	r28, 0x0c	; 12
    2700:	0f b6       	in	r0, 0x3f	; 63
    2702:	f8 94       	cli
    2704:	de bf       	out	0x3e, r29	; 62
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	cd bf       	out	0x3d, r28	; 61
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	08 95       	ret

00002710 <CLCD_voidSendFloat>:

void CLCD_voidSendFloat(f64 cpy_f64Float) 
{
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	64 97       	sbiw	r28, 0x14	; 20
    271a:	0f b6       	in	r0, 0x3f	; 63
    271c:	f8 94       	cli
    271e:	de bf       	out	0x3e, r29	; 62
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	cd bf       	out	0x3d, r28	; 61
    2724:	69 8b       	std	Y+17, r22	; 0x11
    2726:	7a 8b       	std	Y+18, r23	; 0x12
    2728:	8b 8b       	std	Y+19, r24	; 0x13
    272a:	9c 8b       	std	Y+20, r25	; 0x14
	  u32 cpy_u32power=1;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	a0 e0       	ldi	r26, 0x00	; 0
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	8d 87       	std	Y+13, r24	; 0x0d
    2736:	9e 87       	std	Y+14, r25	; 0x0e
    2738:	af 87       	std	Y+15, r26	; 0x0f
    273a:	b8 8b       	std	Y+16, r27	; 0x10
	       s32 cpy_u32num=cpy_f64Float;
    273c:	69 89       	ldd	r22, Y+17	; 0x11
    273e:	7a 89       	ldd	r23, Y+18	; 0x12
    2740:	8b 89       	ldd	r24, Y+19	; 0x13
    2742:	9c 89       	ldd	r25, Y+20	; 0x14
    2744:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixsfsi>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	89 87       	std	Y+9, r24	; 0x09
    274e:	9a 87       	std	Y+10, r25	; 0x0a
    2750:	ab 87       	std	Y+11, r26	; 0x0b
    2752:	bc 87       	std	Y+12, r27	; 0x0c
	       s32 i=0;
    2754:	1d 82       	std	Y+5, r1	; 0x05
    2756:	1e 82       	std	Y+6, r1	; 0x06
    2758:	1f 82       	std	Y+7, r1	; 0x07
    275a:	18 86       	std	Y+8, r1	; 0x08

	      if(cpy_f64Float==0)
    275c:	69 89       	ldd	r22, Y+17	; 0x11
    275e:	7a 89       	ldd	r23, Y+18	; 0x12
    2760:	8b 89       	ldd	r24, Y+19	; 0x13
    2762:	9c 89       	ldd	r25, Y+20	; 0x14
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e0       	ldi	r20, 0x00	; 0
    276a:	50 e0       	ldi	r21, 0x00	; 0
    276c:	0e 94 11 03 	call	0x622	; 0x622 <__eqsf2>
    2770:	88 23       	and	r24, r24
    2772:	21 f4       	brne	.+8      	; 0x277c <CLCD_voidSendFloat+0x6c>
	      {
	    	  CLCD_voidSendData('0');
    2774:	80 e3       	ldi	r24, 0x30	; 48
    2776:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <CLCD_voidSendData>
    277a:	d2 c0       	rjmp	.+420    	; 0x2920 <CLCD_voidSendFloat+0x210>
	    	  return;
	      }
	      if(cpy_f64Float<0)
    277c:	69 89       	ldd	r22, Y+17	; 0x11
    277e:	7a 89       	ldd	r23, Y+18	; 0x12
    2780:	8b 89       	ldd	r24, Y+19	; 0x13
    2782:	9c 89       	ldd	r25, Y+20	; 0x14
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e0       	ldi	r20, 0x00	; 0
    278a:	50 e0       	ldi	r21, 0x00	; 0
    278c:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    2790:	88 23       	and	r24, r24
    2792:	e4 f5       	brge	.+120    	; 0x280c <CLCD_voidSendFloat+0xfc>
	      {

	    	  cpy_f64Float=cpy_f64Float*(-1);
    2794:	89 89       	ldd	r24, Y+17	; 0x11
    2796:	9a 89       	ldd	r25, Y+18	; 0x12
    2798:	ab 89       	ldd	r26, Y+19	; 0x13
    279a:	bc 89       	ldd	r27, Y+20	; 0x14
    279c:	b0 58       	subi	r27, 0x80	; 128
    279e:	89 8b       	std	Y+17, r24	; 0x11
    27a0:	9a 8b       	std	Y+18, r25	; 0x12
    27a2:	ab 8b       	std	Y+19, r26	; 0x13
    27a4:	bc 8b       	std	Y+20, r27	; 0x14
	    	  CLCD_voidSendData('-');
    27a6:	8d e2       	ldi	r24, 0x2D	; 45
    27a8:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <CLCD_voidSendData>
    27ac:	2f c0       	rjmp	.+94     	; 0x280c <CLCD_voidSendFloat+0xfc>
	      }
	      while(cpy_u32num)//1234
	      {

	    	  cpy_u32num=cpy_u32num/10;
    27ae:	89 85       	ldd	r24, Y+9	; 0x09
    27b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b2:	ab 85       	ldd	r26, Y+11	; 0x0b
    27b4:	bc 85       	ldd	r27, Y+12	; 0x0c
    27b6:	2a e0       	ldi	r18, 0x0A	; 10
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	50 e0       	ldi	r21, 0x00	; 0
    27be:	bc 01       	movw	r22, r24
    27c0:	cd 01       	movw	r24, r26
    27c2:	0e 94 00 2a 	call	0x5400	; 0x5400 <__divmodsi4>
    27c6:	da 01       	movw	r26, r20
    27c8:	c9 01       	movw	r24, r18
    27ca:	89 87       	std	Y+9, r24	; 0x09
    27cc:	9a 87       	std	Y+10, r25	; 0x0a
    27ce:	ab 87       	std	Y+11, r26	; 0x0b
    27d0:	bc 87       	std	Y+12, r27	; 0x0c
	    	   i++;//4
    27d2:	8d 81       	ldd	r24, Y+5	; 0x05
    27d4:	9e 81       	ldd	r25, Y+6	; 0x06
    27d6:	af 81       	ldd	r26, Y+7	; 0x07
    27d8:	b8 85       	ldd	r27, Y+8	; 0x08
    27da:	01 96       	adiw	r24, 0x01	; 1
    27dc:	a1 1d       	adc	r26, r1
    27de:	b1 1d       	adc	r27, r1
    27e0:	8d 83       	std	Y+5, r24	; 0x05
    27e2:	9e 83       	std	Y+6, r25	; 0x06
    27e4:	af 83       	std	Y+7, r26	; 0x07
    27e6:	b8 87       	std	Y+8, r27	; 0x08
	    	  cpy_u32power=cpy_u32power*10;      //10000
    27e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ec:	af 85       	ldd	r26, Y+15	; 0x0f
    27ee:	b8 89       	ldd	r27, Y+16	; 0x10
    27f0:	2a e0       	ldi	r18, 0x0A	; 10
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e0       	ldi	r20, 0x00	; 0
    27f6:	50 e0       	ldi	r21, 0x00	; 0
    27f8:	bc 01       	movw	r22, r24
    27fa:	cd 01       	movw	r24, r26
    27fc:	0e 94 bf 29 	call	0x537e	; 0x537e <__mulsi3>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	8d 87       	std	Y+13, r24	; 0x0d
    2806:	9e 87       	std	Y+14, r25	; 0x0e
    2808:	af 87       	std	Y+15, r26	; 0x0f
    280a:	b8 8b       	std	Y+16, r27	; 0x10
	      {

	    	  cpy_f64Float=cpy_f64Float*(-1);
	    	  CLCD_voidSendData('-');
	      }
	      while(cpy_u32num)//1234
    280c:	89 85       	ldd	r24, Y+9	; 0x09
    280e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2810:	ab 85       	ldd	r26, Y+11	; 0x0b
    2812:	bc 85       	ldd	r27, Y+12	; 0x0c
    2814:	00 97       	sbiw	r24, 0x00	; 0
    2816:	a1 05       	cpc	r26, r1
    2818:	b1 05       	cpc	r27, r1
    281a:	49 f6       	brne	.-110    	; 0x27ae <CLCD_voidSendFloat+0x9e>

	    	  cpy_u32num=cpy_u32num/10;
	    	   i++;//4
	    	  cpy_u32power=cpy_u32power*10;      //10000
	      }
	      s32 int_num=cpy_f64Float*10000;  //1234.1234-->12341234
    281c:	69 89       	ldd	r22, Y+17	; 0x11
    281e:	7a 89       	ldd	r23, Y+18	; 0x12
    2820:	8b 89       	ldd	r24, Y+19	; 0x13
    2822:	9c 89       	ldd	r25, Y+20	; 0x14
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e4       	ldi	r19, 0x40	; 64
    2828:	4c e1       	ldi	r20, 0x1C	; 28
    282a:	56 e4       	ldi	r21, 0x46	; 70
    282c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	bc 01       	movw	r22, r24
    2836:	cd 01       	movw	r24, r26
    2838:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixsfsi>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	89 83       	std	Y+1, r24	; 0x01
    2842:	9a 83       	std	Y+2, r25	; 0x02
    2844:	ab 83       	std	Y+3, r26	; 0x03
    2846:	bc 83       	std	Y+4, r27	; 0x04
	      cpy_u32power=cpy_u32power*1000;
    2848:	8d 85       	ldd	r24, Y+13	; 0x0d
    284a:	9e 85       	ldd	r25, Y+14	; 0x0e
    284c:	af 85       	ldd	r26, Y+15	; 0x0f
    284e:	b8 89       	ldd	r27, Y+16	; 0x10
    2850:	28 ee       	ldi	r18, 0xE8	; 232
    2852:	33 e0       	ldi	r19, 0x03	; 3
    2854:	40 e0       	ldi	r20, 0x00	; 0
    2856:	50 e0       	ldi	r21, 0x00	; 0
    2858:	bc 01       	movw	r22, r24
    285a:	cd 01       	movw	r24, r26
    285c:	0e 94 bf 29 	call	0x537e	; 0x537e <__mulsi3>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	8d 87       	std	Y+13, r24	; 0x0d
    2866:	9e 87       	std	Y+14, r25	; 0x0e
    2868:	af 87       	std	Y+15, r26	; 0x0f
    286a:	b8 8b       	std	Y+16, r27	; 0x10
    286c:	50 c0       	rjmp	.+160    	; 0x290e <CLCD_voidSendFloat+0x1fe>
	      while(cpy_u32power>0)
	      {
	    	  cpy_u32num=int_num/cpy_u32power;  //01234/1000=0
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	9a 81       	ldd	r25, Y+2	; 0x02
    2872:	ab 81       	ldd	r26, Y+3	; 0x03
    2874:	bc 81       	ldd	r27, Y+4	; 0x04
    2876:	2d 85       	ldd	r18, Y+13	; 0x0d
    2878:	3e 85       	ldd	r19, Y+14	; 0x0e
    287a:	4f 85       	ldd	r20, Y+15	; 0x0f
    287c:	58 89       	ldd	r21, Y+16	; 0x10
    287e:	bc 01       	movw	r22, r24
    2880:	cd 01       	movw	r24, r26
    2882:	0e 94 de 29 	call	0x53bc	; 0x53bc <__udivmodsi4>
    2886:	da 01       	movw	r26, r20
    2888:	c9 01       	movw	r24, r18
    288a:	89 87       	std	Y+9, r24	; 0x09
    288c:	9a 87       	std	Y+10, r25	; 0x0a
    288e:	ab 87       	std	Y+11, r26	; 0x0b
    2890:	bc 87       	std	Y+12, r27	; 0x0c
	    	  int_num%=cpy_u32power;
    2892:	89 81       	ldd	r24, Y+1	; 0x01
    2894:	9a 81       	ldd	r25, Y+2	; 0x02
    2896:	ab 81       	ldd	r26, Y+3	; 0x03
    2898:	bc 81       	ldd	r27, Y+4	; 0x04
    289a:	2d 85       	ldd	r18, Y+13	; 0x0d
    289c:	3e 85       	ldd	r19, Y+14	; 0x0e
    289e:	4f 85       	ldd	r20, Y+15	; 0x0f
    28a0:	58 89       	ldd	r21, Y+16	; 0x10
    28a2:	bc 01       	movw	r22, r24
    28a4:	cd 01       	movw	r24, r26
    28a6:	0e 94 de 29 	call	0x53bc	; 0x53bc <__udivmodsi4>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	89 83       	std	Y+1, r24	; 0x01
    28b0:	9a 83       	std	Y+2, r25	; 0x02
    28b2:	ab 83       	std	Y+3, r26	; 0x03
    28b4:	bc 83       	std	Y+4, r27	; 0x04
	    	  cpy_u32power/=10;
    28b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ba:	af 85       	ldd	r26, Y+15	; 0x0f
    28bc:	b8 89       	ldd	r27, Y+16	; 0x10
    28be:	2a e0       	ldi	r18, 0x0A	; 10
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	40 e0       	ldi	r20, 0x00	; 0
    28c4:	50 e0       	ldi	r21, 0x00	; 0
    28c6:	bc 01       	movw	r22, r24
    28c8:	cd 01       	movw	r24, r26
    28ca:	0e 94 de 29 	call	0x53bc	; 0x53bc <__udivmodsi4>
    28ce:	da 01       	movw	r26, r20
    28d0:	c9 01       	movw	r24, r18
    28d2:	8d 87       	std	Y+13, r24	; 0x0d
    28d4:	9e 87       	std	Y+14, r25	; 0x0e
    28d6:	af 87       	std	Y+15, r26	; 0x0f
    28d8:	b8 8b       	std	Y+16, r27	; 0x10
               if(i==0)
    28da:	8d 81       	ldd	r24, Y+5	; 0x05
    28dc:	9e 81       	ldd	r25, Y+6	; 0x06
    28de:	af 81       	ldd	r26, Y+7	; 0x07
    28e0:	b8 85       	ldd	r27, Y+8	; 0x08
    28e2:	00 97       	sbiw	r24, 0x00	; 0
    28e4:	a1 05       	cpc	r26, r1
    28e6:	b1 05       	cpc	r27, r1
    28e8:	19 f4       	brne	.+6      	; 0x28f0 <CLCD_voidSendFloat+0x1e0>
               {
            	   CLCD_voidSendData('.');
    28ea:	8e e2       	ldi	r24, 0x2E	; 46
    28ec:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <CLCD_voidSendData>

               }
               i--;
    28f0:	8d 81       	ldd	r24, Y+5	; 0x05
    28f2:	9e 81       	ldd	r25, Y+6	; 0x06
    28f4:	af 81       	ldd	r26, Y+7	; 0x07
    28f6:	b8 85       	ldd	r27, Y+8	; 0x08
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	a1 09       	sbc	r26, r1
    28fc:	b1 09       	sbc	r27, r1
    28fe:	8d 83       	std	Y+5, r24	; 0x05
    2900:	9e 83       	std	Y+6, r25	; 0x06
    2902:	af 83       	std	Y+7, r26	; 0x07
    2904:	b8 87       	std	Y+8, r27	; 0x08
	    	  CLCD_voidSendData(cpy_u32num+'0');
    2906:	89 85       	ldd	r24, Y+9	; 0x09
    2908:	80 5d       	subi	r24, 0xD0	; 208
    290a:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <CLCD_voidSendData>
	    	   i++;//4
	    	  cpy_u32power=cpy_u32power*10;      //10000
	      }
	      s32 int_num=cpy_f64Float*10000;  //1234.1234-->12341234
	      cpy_u32power=cpy_u32power*1000;
	      while(cpy_u32power>0)
    290e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2910:	9e 85       	ldd	r25, Y+14	; 0x0e
    2912:	af 85       	ldd	r26, Y+15	; 0x0f
    2914:	b8 89       	ldd	r27, Y+16	; 0x10
    2916:	00 97       	sbiw	r24, 0x00	; 0
    2918:	a1 05       	cpc	r26, r1
    291a:	b1 05       	cpc	r27, r1
    291c:	09 f0       	breq	.+2      	; 0x2920 <CLCD_voidSendFloat+0x210>
    291e:	a7 cf       	rjmp	.-178    	; 0x286e <CLCD_voidSendFloat+0x15e>
		cpy_f64Float-=(s32)cpy_f64Float;//0.4    0

	}
*/

}
    2920:	64 96       	adiw	r28, 0x14	; 20
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	cf 91       	pop	r28
    292e:	df 91       	pop	r29
    2930:	08 95       	ret

00002932 <main>:
LED_CONFIG LED2={LED_PORTC, LED_PIN1, LED_ACTIVE_HIGH};
LED_CONFIG LED3={LED_PORTC, LED_PIN2, LED_ACTIVE_HIGH};
LED_CONFIG LED4={LED_PORTC, LED_PIN3, LED_ACTIVE_HIGH};

int main()
{
    2932:	0f 93       	push	r16
    2934:	1f 93       	push	r17
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	c5 5a       	subi	r28, 0xA5	; 165
    2940:	d1 40       	sbci	r29, 0x01	; 1
    2942:	0f b6       	in	r0, 0x3f	; 63
    2944:	f8 94       	cli
    2946:	de bf       	out	0x3e, r29	; 62
    2948:	0f be       	out	0x3f, r0	; 63
    294a:	cd bf       	out	0x3d, r28	; 61
	HLED_voidLEDIntialization(LED1);
    294c:	60 91 b8 00 	lds	r22, 0x00B8
    2950:	70 91 b9 00 	lds	r23, 0x00B9
    2954:	80 91 ba 00 	lds	r24, 0x00BA
    2958:	0e 94 b5 0b 	call	0x176a	; 0x176a <HLED_voidLEDIntialization>
	HLED_voidLEDIntialization(LED2);
    295c:	60 91 bb 00 	lds	r22, 0x00BB
    2960:	70 91 bc 00 	lds	r23, 0x00BC
    2964:	80 91 bd 00 	lds	r24, 0x00BD
    2968:	0e 94 b5 0b 	call	0x176a	; 0x176a <HLED_voidLEDIntialization>
	HLED_voidLEDIntialization(LED3);
    296c:	60 91 be 00 	lds	r22, 0x00BE
    2970:	70 91 bf 00 	lds	r23, 0x00BF
    2974:	80 91 c0 00 	lds	r24, 0x00C0
    2978:	0e 94 b5 0b 	call	0x176a	; 0x176a <HLED_voidLEDIntialization>
	HLED_voidLEDIntialization(LED4);
    297c:	60 91 c1 00 	lds	r22, 0x00C1
    2980:	70 91 c2 00 	lds	r23, 0x00C2
    2984:	80 91 c3 00 	lds	r24, 0x00C3
    2988:	0e 94 b5 0b 	call	0x176a	; 0x176a <HLED_voidLEDIntialization>

	CLCD_voidInitialization();
    298c:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <CLCD_voidInitialization>
	HKPD_voidInitialization();
    2990:	0e 94 0a 0c 	call	0x1814	; 0x1814 <HKPD_voidInitialization>
	CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COLUMN_1);
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	61 e0       	ldi	r22, 0x01	; 1
    2998:	0e 94 22 11 	call	0x2244	; 0x2244 <CLCD_voidSetPosition>
	CLCD_voidSendString("Choose the mode");
    299c:	80 e6       	ldi	r24, 0x60	; 96
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <CLCD_voidSendString>
	CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COLUMN_1);
    29a4:	82 e0       	ldi	r24, 0x02	; 2
    29a6:	61 e0       	ldi	r22, 0x01	; 1
    29a8:	0e 94 22 11 	call	0x2244	; 0x2244 <CLCD_voidSetPosition>
	CLCD_voidSendString("lighting the led");
    29ac:	80 e7       	ldi	r24, 0x70	; 112
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <CLCD_voidSendString>
    29b4:	fe 01       	movw	r30, r28
    29b6:	ef 55       	subi	r30, 0x5F	; 95
    29b8:	fe 4f       	sbci	r31, 0xFE	; 254
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	a0 e2       	ldi	r26, 0x20	; 32
    29c0:	b1 e4       	ldi	r27, 0x41	; 65
    29c2:	80 83       	st	Z, r24
    29c4:	91 83       	std	Z+1, r25	; 0x01
    29c6:	a2 83       	std	Z+2, r26	; 0x02
    29c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ca:	8e 01       	movw	r16, r28
    29cc:	03 56       	subi	r16, 0x63	; 99
    29ce:	1e 4f       	sbci	r17, 0xFE	; 254
    29d0:	fe 01       	movw	r30, r28
    29d2:	ef 55       	subi	r30, 0x5F	; 95
    29d4:	fe 4f       	sbci	r31, 0xFE	; 254
    29d6:	60 81       	ld	r22, Z
    29d8:	71 81       	ldd	r23, Z+1	; 0x01
    29da:	82 81       	ldd	r24, Z+2	; 0x02
    29dc:	93 81       	ldd	r25, Z+3	; 0x03
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	4a ef       	ldi	r20, 0xFA	; 250
    29e4:	54 e4       	ldi	r21, 0x44	; 68
    29e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	f8 01       	movw	r30, r16
    29f0:	80 83       	st	Z, r24
    29f2:	91 83       	std	Z+1, r25	; 0x01
    29f4:	a2 83       	std	Z+2, r26	; 0x02
    29f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29f8:	fe 01       	movw	r30, r28
    29fa:	e3 56       	subi	r30, 0x63	; 99
    29fc:	fe 4f       	sbci	r31, 0xFE	; 254
    29fe:	60 81       	ld	r22, Z
    2a00:	71 81       	ldd	r23, Z+1	; 0x01
    2a02:	82 81       	ldd	r24, Z+2	; 0x02
    2a04:	93 81       	ldd	r25, Z+3	; 0x03
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e8       	ldi	r20, 0x80	; 128
    2a0c:	5f e3       	ldi	r21, 0x3F	; 63
    2a0e:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    2a12:	88 23       	and	r24, r24
    2a14:	44 f4       	brge	.+16     	; 0x2a26 <main+0xf4>
		__ticks = 1;
    2a16:	fe 01       	movw	r30, r28
    2a18:	e5 56       	subi	r30, 0x65	; 101
    2a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	91 83       	std	Z+1, r25	; 0x01
    2a22:	80 83       	st	Z, r24
    2a24:	64 c0       	rjmp	.+200    	; 0x2aee <main+0x1bc>
	else if (__tmp > 65535)
    2a26:	fe 01       	movw	r30, r28
    2a28:	e3 56       	subi	r30, 0x63	; 99
    2a2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a2c:	60 81       	ld	r22, Z
    2a2e:	71 81       	ldd	r23, Z+1	; 0x01
    2a30:	82 81       	ldd	r24, Z+2	; 0x02
    2a32:	93 81       	ldd	r25, Z+3	; 0x03
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	3f ef       	ldi	r19, 0xFF	; 255
    2a38:	4f e7       	ldi	r20, 0x7F	; 127
    2a3a:	57 e4       	ldi	r21, 0x47	; 71
    2a3c:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    2a40:	18 16       	cp	r1, r24
    2a42:	0c f0       	brlt	.+2      	; 0x2a46 <main+0x114>
    2a44:	43 c0       	rjmp	.+134    	; 0x2acc <main+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a46:	fe 01       	movw	r30, r28
    2a48:	ef 55       	subi	r30, 0x5F	; 95
    2a4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a4c:	60 81       	ld	r22, Z
    2a4e:	71 81       	ldd	r23, Z+1	; 0x01
    2a50:	82 81       	ldd	r24, Z+2	; 0x02
    2a52:	93 81       	ldd	r25, Z+3	; 0x03
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	40 e2       	ldi	r20, 0x20	; 32
    2a5a:	51 e4       	ldi	r21, 0x41	; 65
    2a5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	8e 01       	movw	r16, r28
    2a66:	05 56       	subi	r16, 0x65	; 101
    2a68:	1e 4f       	sbci	r17, 0xFE	; 254
    2a6a:	bc 01       	movw	r22, r24
    2a6c:	cd 01       	movw	r24, r26
    2a6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	f8 01       	movw	r30, r16
    2a78:	91 83       	std	Z+1, r25	; 0x01
    2a7a:	80 83       	st	Z, r24
    2a7c:	1f c0       	rjmp	.+62     	; 0x2abc <main+0x18a>
    2a7e:	fe 01       	movw	r30, r28
    2a80:	e7 56       	subi	r30, 0x67	; 103
    2a82:	fe 4f       	sbci	r31, 0xFE	; 254
    2a84:	88 ec       	ldi	r24, 0xC8	; 200
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	91 83       	std	Z+1, r25	; 0x01
    2a8a:	80 83       	st	Z, r24
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	e7 56       	subi	r30, 0x67	; 103
    2a90:	fe 4f       	sbci	r31, 0xFE	; 254
    2a92:	80 81       	ld	r24, Z
    2a94:	91 81       	ldd	r25, Z+1	; 0x01
    2a96:	01 97       	sbiw	r24, 0x01	; 1
    2a98:	f1 f7       	brne	.-4      	; 0x2a96 <main+0x164>
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	e7 56       	subi	r30, 0x67	; 103
    2a9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa4:	de 01       	movw	r26, r28
    2aa6:	a5 56       	subi	r26, 0x65	; 101
    2aa8:	be 4f       	sbci	r27, 0xFE	; 254
    2aaa:	fe 01       	movw	r30, r28
    2aac:	e5 56       	subi	r30, 0x65	; 101
    2aae:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab0:	80 81       	ld	r24, Z
    2ab2:	91 81       	ldd	r25, Z+1	; 0x01
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	11 96       	adiw	r26, 0x01	; 1
    2ab8:	9c 93       	st	X, r25
    2aba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2abc:	fe 01       	movw	r30, r28
    2abe:	e5 56       	subi	r30, 0x65	; 101
    2ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac2:	80 81       	ld	r24, Z
    2ac4:	91 81       	ldd	r25, Z+1	; 0x01
    2ac6:	00 97       	sbiw	r24, 0x00	; 0
    2ac8:	d1 f6       	brne	.-76     	; 0x2a7e <main+0x14c>
    2aca:	27 c0       	rjmp	.+78     	; 0x2b1a <main+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2acc:	8e 01       	movw	r16, r28
    2ace:	05 56       	subi	r16, 0x65	; 101
    2ad0:	1e 4f       	sbci	r17, 0xFE	; 254
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	e3 56       	subi	r30, 0x63	; 99
    2ad6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ad8:	60 81       	ld	r22, Z
    2ada:	71 81       	ldd	r23, Z+1	; 0x01
    2adc:	82 81       	ldd	r24, Z+2	; 0x02
    2ade:	93 81       	ldd	r25, Z+3	; 0x03
    2ae0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	f8 01       	movw	r30, r16
    2aea:	91 83       	std	Z+1, r25	; 0x01
    2aec:	80 83       	st	Z, r24
    2aee:	de 01       	movw	r26, r28
    2af0:	a9 56       	subi	r26, 0x69	; 105
    2af2:	be 4f       	sbci	r27, 0xFE	; 254
    2af4:	fe 01       	movw	r30, r28
    2af6:	e5 56       	subi	r30, 0x65	; 101
    2af8:	fe 4f       	sbci	r31, 0xFE	; 254
    2afa:	80 81       	ld	r24, Z
    2afc:	91 81       	ldd	r25, Z+1	; 0x01
    2afe:	8d 93       	st	X+, r24
    2b00:	9c 93       	st	X, r25
    2b02:	fe 01       	movw	r30, r28
    2b04:	e9 56       	subi	r30, 0x69	; 105
    2b06:	fe 4f       	sbci	r31, 0xFE	; 254
    2b08:	80 81       	ld	r24, Z
    2b0a:	91 81       	ldd	r25, Z+1	; 0x01
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <main+0x1da>
    2b10:	fe 01       	movw	r30, r28
    2b12:	e9 56       	subi	r30, 0x69	; 105
    2b14:	fe 4f       	sbci	r31, 0xFE	; 254
    2b16:	91 83       	std	Z+1, r25	; 0x01
    2b18:	80 83       	st	Z, r24
	_delay_ms(10);
	CLCD_voidClearScreen();
    2b1a:	0e 94 71 10 	call	0x20e2	; 0x20e2 <CLCD_voidClearScreen>
	CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COLUMN_1);
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	61 e0       	ldi	r22, 0x01	; 1
    2b22:	0e 94 22 11 	call	0x2244	; 0x2244 <CLCD_voidSetPosition>
	CLCD_voidSendString("1-TOG  2-LTR");
    2b26:	81 e8       	ldi	r24, 0x81	; 129
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <CLCD_voidSendString>
	CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COLUMN_1);
    2b2e:	82 e0       	ldi	r24, 0x02	; 2
    2b30:	61 e0       	ldi	r22, 0x01	; 1
    2b32:	0e 94 22 11 	call	0x2244	; 0x2244 <CLCD_voidSetPosition>
    2b36:	fe 01       	movw	r30, r28
    2b38:	ed 56       	subi	r30, 0x6D	; 109
    2b3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	a0 e2       	ldi	r26, 0x20	; 32
    2b42:	b1 e4       	ldi	r27, 0x41	; 65
    2b44:	80 83       	st	Z, r24
    2b46:	91 83       	std	Z+1, r25	; 0x01
    2b48:	a2 83       	std	Z+2, r26	; 0x02
    2b4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b4c:	8e 01       	movw	r16, r28
    2b4e:	01 57       	subi	r16, 0x71	; 113
    2b50:	1e 4f       	sbci	r17, 0xFE	; 254
    2b52:	fe 01       	movw	r30, r28
    2b54:	ed 56       	subi	r30, 0x6D	; 109
    2b56:	fe 4f       	sbci	r31, 0xFE	; 254
    2b58:	60 81       	ld	r22, Z
    2b5a:	71 81       	ldd	r23, Z+1	; 0x01
    2b5c:	82 81       	ldd	r24, Z+2	; 0x02
    2b5e:	93 81       	ldd	r25, Z+3	; 0x03
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	4a ef       	ldi	r20, 0xFA	; 250
    2b66:	54 e4       	ldi	r21, 0x44	; 68
    2b68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	f8 01       	movw	r30, r16
    2b72:	80 83       	st	Z, r24
    2b74:	91 83       	std	Z+1, r25	; 0x01
    2b76:	a2 83       	std	Z+2, r26	; 0x02
    2b78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e1 57       	subi	r30, 0x71	; 113
    2b7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b80:	60 81       	ld	r22, Z
    2b82:	71 81       	ldd	r23, Z+1	; 0x01
    2b84:	82 81       	ldd	r24, Z+2	; 0x02
    2b86:	93 81       	ldd	r25, Z+3	; 0x03
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	40 e8       	ldi	r20, 0x80	; 128
    2b8e:	5f e3       	ldi	r21, 0x3F	; 63
    2b90:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    2b94:	88 23       	and	r24, r24
    2b96:	44 f4       	brge	.+16     	; 0x2ba8 <main+0x276>
		__ticks = 1;
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e3 57       	subi	r30, 0x73	; 115
    2b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	91 83       	std	Z+1, r25	; 0x01
    2ba4:	80 83       	st	Z, r24
    2ba6:	64 c0       	rjmp	.+200    	; 0x2c70 <main+0x33e>
	else if (__tmp > 65535)
    2ba8:	fe 01       	movw	r30, r28
    2baa:	e1 57       	subi	r30, 0x71	; 113
    2bac:	fe 4f       	sbci	r31, 0xFE	; 254
    2bae:	60 81       	ld	r22, Z
    2bb0:	71 81       	ldd	r23, Z+1	; 0x01
    2bb2:	82 81       	ldd	r24, Z+2	; 0x02
    2bb4:	93 81       	ldd	r25, Z+3	; 0x03
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	3f ef       	ldi	r19, 0xFF	; 255
    2bba:	4f e7       	ldi	r20, 0x7F	; 127
    2bbc:	57 e4       	ldi	r21, 0x47	; 71
    2bbe:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    2bc2:	18 16       	cp	r1, r24
    2bc4:	0c f0       	brlt	.+2      	; 0x2bc8 <main+0x296>
    2bc6:	43 c0       	rjmp	.+134    	; 0x2c4e <main+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc8:	fe 01       	movw	r30, r28
    2bca:	ed 56       	subi	r30, 0x6D	; 109
    2bcc:	fe 4f       	sbci	r31, 0xFE	; 254
    2bce:	60 81       	ld	r22, Z
    2bd0:	71 81       	ldd	r23, Z+1	; 0x01
    2bd2:	82 81       	ldd	r24, Z+2	; 0x02
    2bd4:	93 81       	ldd	r25, Z+3	; 0x03
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	40 e2       	ldi	r20, 0x20	; 32
    2bdc:	51 e4       	ldi	r21, 0x41	; 65
    2bde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	8e 01       	movw	r16, r28
    2be8:	03 57       	subi	r16, 0x73	; 115
    2bea:	1e 4f       	sbci	r17, 0xFE	; 254
    2bec:	bc 01       	movw	r22, r24
    2bee:	cd 01       	movw	r24, r26
    2bf0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	f8 01       	movw	r30, r16
    2bfa:	91 83       	std	Z+1, r25	; 0x01
    2bfc:	80 83       	st	Z, r24
    2bfe:	1f c0       	rjmp	.+62     	; 0x2c3e <main+0x30c>
    2c00:	fe 01       	movw	r30, r28
    2c02:	e5 57       	subi	r30, 0x75	; 117
    2c04:	fe 4f       	sbci	r31, 0xFE	; 254
    2c06:	88 ec       	ldi	r24, 0xC8	; 200
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	91 83       	std	Z+1, r25	; 0x01
    2c0c:	80 83       	st	Z, r24
    2c0e:	fe 01       	movw	r30, r28
    2c10:	e5 57       	subi	r30, 0x75	; 117
    2c12:	fe 4f       	sbci	r31, 0xFE	; 254
    2c14:	80 81       	ld	r24, Z
    2c16:	91 81       	ldd	r25, Z+1	; 0x01
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	f1 f7       	brne	.-4      	; 0x2c18 <main+0x2e6>
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	e5 57       	subi	r30, 0x75	; 117
    2c20:	fe 4f       	sbci	r31, 0xFE	; 254
    2c22:	91 83       	std	Z+1, r25	; 0x01
    2c24:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c26:	de 01       	movw	r26, r28
    2c28:	a3 57       	subi	r26, 0x73	; 115
    2c2a:	be 4f       	sbci	r27, 0xFE	; 254
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e3 57       	subi	r30, 0x73	; 115
    2c30:	fe 4f       	sbci	r31, 0xFE	; 254
    2c32:	80 81       	ld	r24, Z
    2c34:	91 81       	ldd	r25, Z+1	; 0x01
    2c36:	01 97       	sbiw	r24, 0x01	; 1
    2c38:	11 96       	adiw	r26, 0x01	; 1
    2c3a:	9c 93       	st	X, r25
    2c3c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c3e:	fe 01       	movw	r30, r28
    2c40:	e3 57       	subi	r30, 0x73	; 115
    2c42:	fe 4f       	sbci	r31, 0xFE	; 254
    2c44:	80 81       	ld	r24, Z
    2c46:	91 81       	ldd	r25, Z+1	; 0x01
    2c48:	00 97       	sbiw	r24, 0x00	; 0
    2c4a:	d1 f6       	brne	.-76     	; 0x2c00 <main+0x2ce>
    2c4c:	27 c0       	rjmp	.+78     	; 0x2c9c <main+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c4e:	8e 01       	movw	r16, r28
    2c50:	03 57       	subi	r16, 0x73	; 115
    2c52:	1e 4f       	sbci	r17, 0xFE	; 254
    2c54:	fe 01       	movw	r30, r28
    2c56:	e1 57       	subi	r30, 0x71	; 113
    2c58:	fe 4f       	sbci	r31, 0xFE	; 254
    2c5a:	60 81       	ld	r22, Z
    2c5c:	71 81       	ldd	r23, Z+1	; 0x01
    2c5e:	82 81       	ldd	r24, Z+2	; 0x02
    2c60:	93 81       	ldd	r25, Z+3	; 0x03
    2c62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	f8 01       	movw	r30, r16
    2c6c:	91 83       	std	Z+1, r25	; 0x01
    2c6e:	80 83       	st	Z, r24
    2c70:	de 01       	movw	r26, r28
    2c72:	a7 57       	subi	r26, 0x77	; 119
    2c74:	be 4f       	sbci	r27, 0xFE	; 254
    2c76:	fe 01       	movw	r30, r28
    2c78:	e3 57       	subi	r30, 0x73	; 115
    2c7a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c7c:	80 81       	ld	r24, Z
    2c7e:	91 81       	ldd	r25, Z+1	; 0x01
    2c80:	8d 93       	st	X+, r24
    2c82:	9c 93       	st	X, r25
    2c84:	fe 01       	movw	r30, r28
    2c86:	e7 57       	subi	r30, 0x77	; 119
    2c88:	fe 4f       	sbci	r31, 0xFE	; 254
    2c8a:	80 81       	ld	r24, Z
    2c8c:	91 81       	ldd	r25, Z+1	; 0x01
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <main+0x35c>
    2c92:	fe 01       	movw	r30, r28
    2c94:	e7 57       	subi	r30, 0x77	; 119
    2c96:	fe 4f       	sbci	r31, 0xFE	; 254
    2c98:	91 83       	std	Z+1, r25	; 0x01
    2c9a:	80 83       	st	Z, r24
	_delay_ms(10);
	CLCD_voidClearScreen();
    2c9c:	0e 94 71 10 	call	0x20e2	; 0x20e2 <CLCD_voidClearScreen>
	CLCD_voidSendString("3-RTL  4-BingBong");
    2ca0:	8e e8       	ldi	r24, 0x8E	; 142
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <CLCD_voidSendString>
	u8 keyPressed;
	while(1)
	{
		keyPressed=HKPD_u8GetPressedKey();
    2ca8:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <HKPD_u8GetPressedKey>
    2cac:	fe 01       	movw	r30, r28
    2cae:	eb 55       	subi	r30, 0x5B	; 91
    2cb0:	fe 4f       	sbci	r31, 0xFE	; 254
    2cb2:	80 83       	st	Z, r24
		if(keyPressed=='1')
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	eb 55       	subi	r30, 0x5B	; 91
    2cb8:	fe 4f       	sbci	r31, 0xFE	; 254
    2cba:	80 81       	ld	r24, Z
    2cbc:	81 33       	cpi	r24, 0x31	; 49
    2cbe:	09 f0       	breq	.+2      	; 0x2cc2 <main+0x390>
    2cc0:	ed c2       	rjmp	.+1498   	; 0x329c <main+0x96a>
		{
			HLED_voidLEDToggle(LED1);
    2cc2:	60 91 b8 00 	lds	r22, 0x00B8
    2cc6:	70 91 b9 00 	lds	r23, 0x00B9
    2cca:	80 91 ba 00 	lds	r24, 0x00BA
    2cce:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <HLED_voidLEDToggle>
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	eb 57       	subi	r30, 0x7B	; 123
    2cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	a8 e4       	ldi	r26, 0x48	; 72
    2cde:	b2 e4       	ldi	r27, 0x42	; 66
    2ce0:	80 83       	st	Z, r24
    2ce2:	91 83       	std	Z+1, r25	; 0x01
    2ce4:	a2 83       	std	Z+2, r26	; 0x02
    2ce6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce8:	8e 01       	movw	r16, r28
    2cea:	0f 57       	subi	r16, 0x7F	; 127
    2cec:	1e 4f       	sbci	r17, 0xFE	; 254
    2cee:	fe 01       	movw	r30, r28
    2cf0:	eb 57       	subi	r30, 0x7B	; 123
    2cf2:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf4:	60 81       	ld	r22, Z
    2cf6:	71 81       	ldd	r23, Z+1	; 0x01
    2cf8:	82 81       	ldd	r24, Z+2	; 0x02
    2cfa:	93 81       	ldd	r25, Z+3	; 0x03
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	4a ef       	ldi	r20, 0xFA	; 250
    2d02:	54 e4       	ldi	r21, 0x44	; 68
    2d04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	f8 01       	movw	r30, r16
    2d0e:	80 83       	st	Z, r24
    2d10:	91 83       	std	Z+1, r25	; 0x01
    2d12:	a2 83       	std	Z+2, r26	; 0x02
    2d14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d16:	fe 01       	movw	r30, r28
    2d18:	ef 57       	subi	r30, 0x7F	; 127
    2d1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d1c:	60 81       	ld	r22, Z
    2d1e:	71 81       	ldd	r23, Z+1	; 0x01
    2d20:	82 81       	ldd	r24, Z+2	; 0x02
    2d22:	93 81       	ldd	r25, Z+3	; 0x03
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	40 e8       	ldi	r20, 0x80	; 128
    2d2a:	5f e3       	ldi	r21, 0x3F	; 63
    2d2c:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    2d30:	88 23       	and	r24, r24
    2d32:	44 f4       	brge	.+16     	; 0x2d44 <main+0x412>
		__ticks = 1;
    2d34:	fe 01       	movw	r30, r28
    2d36:	e1 58       	subi	r30, 0x81	; 129
    2d38:	fe 4f       	sbci	r31, 0xFE	; 254
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	91 83       	std	Z+1, r25	; 0x01
    2d40:	80 83       	st	Z, r24
    2d42:	64 c0       	rjmp	.+200    	; 0x2e0c <main+0x4da>
	else if (__tmp > 65535)
    2d44:	fe 01       	movw	r30, r28
    2d46:	ef 57       	subi	r30, 0x7F	; 127
    2d48:	fe 4f       	sbci	r31, 0xFE	; 254
    2d4a:	60 81       	ld	r22, Z
    2d4c:	71 81       	ldd	r23, Z+1	; 0x01
    2d4e:	82 81       	ldd	r24, Z+2	; 0x02
    2d50:	93 81       	ldd	r25, Z+3	; 0x03
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	3f ef       	ldi	r19, 0xFF	; 255
    2d56:	4f e7       	ldi	r20, 0x7F	; 127
    2d58:	57 e4       	ldi	r21, 0x47	; 71
    2d5a:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    2d5e:	18 16       	cp	r1, r24
    2d60:	0c f0       	brlt	.+2      	; 0x2d64 <main+0x432>
    2d62:	43 c0       	rjmp	.+134    	; 0x2dea <main+0x4b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d64:	fe 01       	movw	r30, r28
    2d66:	eb 57       	subi	r30, 0x7B	; 123
    2d68:	fe 4f       	sbci	r31, 0xFE	; 254
    2d6a:	60 81       	ld	r22, Z
    2d6c:	71 81       	ldd	r23, Z+1	; 0x01
    2d6e:	82 81       	ldd	r24, Z+2	; 0x02
    2d70:	93 81       	ldd	r25, Z+3	; 0x03
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	40 e2       	ldi	r20, 0x20	; 32
    2d78:	51 e4       	ldi	r21, 0x41	; 65
    2d7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	8e 01       	movw	r16, r28
    2d84:	01 58       	subi	r16, 0x81	; 129
    2d86:	1e 4f       	sbci	r17, 0xFE	; 254
    2d88:	bc 01       	movw	r22, r24
    2d8a:	cd 01       	movw	r24, r26
    2d8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	f8 01       	movw	r30, r16
    2d96:	91 83       	std	Z+1, r25	; 0x01
    2d98:	80 83       	st	Z, r24
    2d9a:	1f c0       	rjmp	.+62     	; 0x2dda <main+0x4a8>
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e3 58       	subi	r30, 0x83	; 131
    2da0:	fe 4f       	sbci	r31, 0xFE	; 254
    2da2:	88 ec       	ldi	r24, 0xC8	; 200
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	91 83       	std	Z+1, r25	; 0x01
    2da8:	80 83       	st	Z, r24
    2daa:	fe 01       	movw	r30, r28
    2dac:	e3 58       	subi	r30, 0x83	; 131
    2dae:	fe 4f       	sbci	r31, 0xFE	; 254
    2db0:	80 81       	ld	r24, Z
    2db2:	91 81       	ldd	r25, Z+1	; 0x01
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	f1 f7       	brne	.-4      	; 0x2db4 <main+0x482>
    2db8:	fe 01       	movw	r30, r28
    2dba:	e3 58       	subi	r30, 0x83	; 131
    2dbc:	fe 4f       	sbci	r31, 0xFE	; 254
    2dbe:	91 83       	std	Z+1, r25	; 0x01
    2dc0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc2:	de 01       	movw	r26, r28
    2dc4:	a1 58       	subi	r26, 0x81	; 129
    2dc6:	be 4f       	sbci	r27, 0xFE	; 254
    2dc8:	fe 01       	movw	r30, r28
    2dca:	e1 58       	subi	r30, 0x81	; 129
    2dcc:	fe 4f       	sbci	r31, 0xFE	; 254
    2dce:	80 81       	ld	r24, Z
    2dd0:	91 81       	ldd	r25, Z+1	; 0x01
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	11 96       	adiw	r26, 0x01	; 1
    2dd6:	9c 93       	st	X, r25
    2dd8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e1 58       	subi	r30, 0x81	; 129
    2dde:	fe 4f       	sbci	r31, 0xFE	; 254
    2de0:	80 81       	ld	r24, Z
    2de2:	91 81       	ldd	r25, Z+1	; 0x01
    2de4:	00 97       	sbiw	r24, 0x00	; 0
    2de6:	d1 f6       	brne	.-76     	; 0x2d9c <main+0x46a>
    2de8:	27 c0       	rjmp	.+78     	; 0x2e38 <main+0x506>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dea:	8e 01       	movw	r16, r28
    2dec:	01 58       	subi	r16, 0x81	; 129
    2dee:	1e 4f       	sbci	r17, 0xFE	; 254
    2df0:	fe 01       	movw	r30, r28
    2df2:	ef 57       	subi	r30, 0x7F	; 127
    2df4:	fe 4f       	sbci	r31, 0xFE	; 254
    2df6:	60 81       	ld	r22, Z
    2df8:	71 81       	ldd	r23, Z+1	; 0x01
    2dfa:	82 81       	ldd	r24, Z+2	; 0x02
    2dfc:	93 81       	ldd	r25, Z+3	; 0x03
    2dfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	f8 01       	movw	r30, r16
    2e08:	91 83       	std	Z+1, r25	; 0x01
    2e0a:	80 83       	st	Z, r24
    2e0c:	de 01       	movw	r26, r28
    2e0e:	a5 58       	subi	r26, 0x85	; 133
    2e10:	be 4f       	sbci	r27, 0xFE	; 254
    2e12:	fe 01       	movw	r30, r28
    2e14:	e1 58       	subi	r30, 0x81	; 129
    2e16:	fe 4f       	sbci	r31, 0xFE	; 254
    2e18:	80 81       	ld	r24, Z
    2e1a:	91 81       	ldd	r25, Z+1	; 0x01
    2e1c:	8d 93       	st	X+, r24
    2e1e:	9c 93       	st	X, r25
    2e20:	fe 01       	movw	r30, r28
    2e22:	e5 58       	subi	r30, 0x85	; 133
    2e24:	fe 4f       	sbci	r31, 0xFE	; 254
    2e26:	80 81       	ld	r24, Z
    2e28:	91 81       	ldd	r25, Z+1	; 0x01
    2e2a:	01 97       	sbiw	r24, 0x01	; 1
    2e2c:	f1 f7       	brne	.-4      	; 0x2e2a <main+0x4f8>
    2e2e:	fe 01       	movw	r30, r28
    2e30:	e5 58       	subi	r30, 0x85	; 133
    2e32:	fe 4f       	sbci	r31, 0xFE	; 254
    2e34:	91 83       	std	Z+1, r25	; 0x01
    2e36:	80 83       	st	Z, r24
			_delay_ms(50);
			HLED_voidLEDToggle(LED2);
    2e38:	60 91 bb 00 	lds	r22, 0x00BB
    2e3c:	70 91 bc 00 	lds	r23, 0x00BC
    2e40:	80 91 bd 00 	lds	r24, 0x00BD
    2e44:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <HLED_voidLEDToggle>
    2e48:	fe 01       	movw	r30, r28
    2e4a:	e9 58       	subi	r30, 0x89	; 137
    2e4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e4e:	80 e0       	ldi	r24, 0x00	; 0
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	a8 e4       	ldi	r26, 0x48	; 72
    2e54:	b2 e4       	ldi	r27, 0x42	; 66
    2e56:	80 83       	st	Z, r24
    2e58:	91 83       	std	Z+1, r25	; 0x01
    2e5a:	a2 83       	std	Z+2, r26	; 0x02
    2e5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5e:	8e 01       	movw	r16, r28
    2e60:	0d 58       	subi	r16, 0x8D	; 141
    2e62:	1e 4f       	sbci	r17, 0xFE	; 254
    2e64:	fe 01       	movw	r30, r28
    2e66:	e9 58       	subi	r30, 0x89	; 137
    2e68:	fe 4f       	sbci	r31, 0xFE	; 254
    2e6a:	60 81       	ld	r22, Z
    2e6c:	71 81       	ldd	r23, Z+1	; 0x01
    2e6e:	82 81       	ldd	r24, Z+2	; 0x02
    2e70:	93 81       	ldd	r25, Z+3	; 0x03
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	4a ef       	ldi	r20, 0xFA	; 250
    2e78:	54 e4       	ldi	r21, 0x44	; 68
    2e7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	f8 01       	movw	r30, r16
    2e84:	80 83       	st	Z, r24
    2e86:	91 83       	std	Z+1, r25	; 0x01
    2e88:	a2 83       	std	Z+2, r26	; 0x02
    2e8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	ed 58       	subi	r30, 0x8D	; 141
    2e90:	fe 4f       	sbci	r31, 0xFE	; 254
    2e92:	60 81       	ld	r22, Z
    2e94:	71 81       	ldd	r23, Z+1	; 0x01
    2e96:	82 81       	ldd	r24, Z+2	; 0x02
    2e98:	93 81       	ldd	r25, Z+3	; 0x03
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	40 e8       	ldi	r20, 0x80	; 128
    2ea0:	5f e3       	ldi	r21, 0x3F	; 63
    2ea2:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    2ea6:	88 23       	and	r24, r24
    2ea8:	44 f4       	brge	.+16     	; 0x2eba <main+0x588>
		__ticks = 1;
    2eaa:	fe 01       	movw	r30, r28
    2eac:	ef 58       	subi	r30, 0x8F	; 143
    2eae:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	91 83       	std	Z+1, r25	; 0x01
    2eb6:	80 83       	st	Z, r24
    2eb8:	64 c0       	rjmp	.+200    	; 0x2f82 <main+0x650>
	else if (__tmp > 65535)
    2eba:	fe 01       	movw	r30, r28
    2ebc:	ed 58       	subi	r30, 0x8D	; 141
    2ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec0:	60 81       	ld	r22, Z
    2ec2:	71 81       	ldd	r23, Z+1	; 0x01
    2ec4:	82 81       	ldd	r24, Z+2	; 0x02
    2ec6:	93 81       	ldd	r25, Z+3	; 0x03
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	3f ef       	ldi	r19, 0xFF	; 255
    2ecc:	4f e7       	ldi	r20, 0x7F	; 127
    2ece:	57 e4       	ldi	r21, 0x47	; 71
    2ed0:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    2ed4:	18 16       	cp	r1, r24
    2ed6:	0c f0       	brlt	.+2      	; 0x2eda <main+0x5a8>
    2ed8:	43 c0       	rjmp	.+134    	; 0x2f60 <main+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eda:	fe 01       	movw	r30, r28
    2edc:	e9 58       	subi	r30, 0x89	; 137
    2ede:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee0:	60 81       	ld	r22, Z
    2ee2:	71 81       	ldd	r23, Z+1	; 0x01
    2ee4:	82 81       	ldd	r24, Z+2	; 0x02
    2ee6:	93 81       	ldd	r25, Z+3	; 0x03
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	40 e2       	ldi	r20, 0x20	; 32
    2eee:	51 e4       	ldi	r21, 0x41	; 65
    2ef0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	8e 01       	movw	r16, r28
    2efa:	0f 58       	subi	r16, 0x8F	; 143
    2efc:	1e 4f       	sbci	r17, 0xFE	; 254
    2efe:	bc 01       	movw	r22, r24
    2f00:	cd 01       	movw	r24, r26
    2f02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	f8 01       	movw	r30, r16
    2f0c:	91 83       	std	Z+1, r25	; 0x01
    2f0e:	80 83       	st	Z, r24
    2f10:	1f c0       	rjmp	.+62     	; 0x2f50 <main+0x61e>
    2f12:	fe 01       	movw	r30, r28
    2f14:	e1 59       	subi	r30, 0x91	; 145
    2f16:	fe 4f       	sbci	r31, 0xFE	; 254
    2f18:	88 ec       	ldi	r24, 0xC8	; 200
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	91 83       	std	Z+1, r25	; 0x01
    2f1e:	80 83       	st	Z, r24
    2f20:	fe 01       	movw	r30, r28
    2f22:	e1 59       	subi	r30, 0x91	; 145
    2f24:	fe 4f       	sbci	r31, 0xFE	; 254
    2f26:	80 81       	ld	r24, Z
    2f28:	91 81       	ldd	r25, Z+1	; 0x01
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <main+0x5f8>
    2f2e:	fe 01       	movw	r30, r28
    2f30:	e1 59       	subi	r30, 0x91	; 145
    2f32:	fe 4f       	sbci	r31, 0xFE	; 254
    2f34:	91 83       	std	Z+1, r25	; 0x01
    2f36:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f38:	de 01       	movw	r26, r28
    2f3a:	af 58       	subi	r26, 0x8F	; 143
    2f3c:	be 4f       	sbci	r27, 0xFE	; 254
    2f3e:	fe 01       	movw	r30, r28
    2f40:	ef 58       	subi	r30, 0x8F	; 143
    2f42:	fe 4f       	sbci	r31, 0xFE	; 254
    2f44:	80 81       	ld	r24, Z
    2f46:	91 81       	ldd	r25, Z+1	; 0x01
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	11 96       	adiw	r26, 0x01	; 1
    2f4c:	9c 93       	st	X, r25
    2f4e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f50:	fe 01       	movw	r30, r28
    2f52:	ef 58       	subi	r30, 0x8F	; 143
    2f54:	fe 4f       	sbci	r31, 0xFE	; 254
    2f56:	80 81       	ld	r24, Z
    2f58:	91 81       	ldd	r25, Z+1	; 0x01
    2f5a:	00 97       	sbiw	r24, 0x00	; 0
    2f5c:	d1 f6       	brne	.-76     	; 0x2f12 <main+0x5e0>
    2f5e:	27 c0       	rjmp	.+78     	; 0x2fae <main+0x67c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f60:	8e 01       	movw	r16, r28
    2f62:	0f 58       	subi	r16, 0x8F	; 143
    2f64:	1e 4f       	sbci	r17, 0xFE	; 254
    2f66:	fe 01       	movw	r30, r28
    2f68:	ed 58       	subi	r30, 0x8D	; 141
    2f6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f6c:	60 81       	ld	r22, Z
    2f6e:	71 81       	ldd	r23, Z+1	; 0x01
    2f70:	82 81       	ldd	r24, Z+2	; 0x02
    2f72:	93 81       	ldd	r25, Z+3	; 0x03
    2f74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	f8 01       	movw	r30, r16
    2f7e:	91 83       	std	Z+1, r25	; 0x01
    2f80:	80 83       	st	Z, r24
    2f82:	de 01       	movw	r26, r28
    2f84:	a3 59       	subi	r26, 0x93	; 147
    2f86:	be 4f       	sbci	r27, 0xFE	; 254
    2f88:	fe 01       	movw	r30, r28
    2f8a:	ef 58       	subi	r30, 0x8F	; 143
    2f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f8e:	80 81       	ld	r24, Z
    2f90:	91 81       	ldd	r25, Z+1	; 0x01
    2f92:	8d 93       	st	X+, r24
    2f94:	9c 93       	st	X, r25
    2f96:	fe 01       	movw	r30, r28
    2f98:	e3 59       	subi	r30, 0x93	; 147
    2f9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f9c:	80 81       	ld	r24, Z
    2f9e:	91 81       	ldd	r25, Z+1	; 0x01
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	f1 f7       	brne	.-4      	; 0x2fa0 <main+0x66e>
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	e3 59       	subi	r30, 0x93	; 147
    2fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    2faa:	91 83       	std	Z+1, r25	; 0x01
    2fac:	80 83       	st	Z, r24
			_delay_ms(50);
			HLED_voidLEDToggle(LED3);
    2fae:	60 91 be 00 	lds	r22, 0x00BE
    2fb2:	70 91 bf 00 	lds	r23, 0x00BF
    2fb6:	80 91 c0 00 	lds	r24, 0x00C0
    2fba:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <HLED_voidLEDToggle>
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	e7 59       	subi	r30, 0x97	; 151
    2fc2:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	a8 e4       	ldi	r26, 0x48	; 72
    2fca:	b2 e4       	ldi	r27, 0x42	; 66
    2fcc:	80 83       	st	Z, r24
    2fce:	91 83       	std	Z+1, r25	; 0x01
    2fd0:	a2 83       	std	Z+2, r26	; 0x02
    2fd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd4:	8e 01       	movw	r16, r28
    2fd6:	0b 59       	subi	r16, 0x9B	; 155
    2fd8:	1e 4f       	sbci	r17, 0xFE	; 254
    2fda:	fe 01       	movw	r30, r28
    2fdc:	e7 59       	subi	r30, 0x97	; 151
    2fde:	fe 4f       	sbci	r31, 0xFE	; 254
    2fe0:	60 81       	ld	r22, Z
    2fe2:	71 81       	ldd	r23, Z+1	; 0x01
    2fe4:	82 81       	ldd	r24, Z+2	; 0x02
    2fe6:	93 81       	ldd	r25, Z+3	; 0x03
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	4a ef       	ldi	r20, 0xFA	; 250
    2fee:	54 e4       	ldi	r21, 0x44	; 68
    2ff0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	f8 01       	movw	r30, r16
    2ffa:	80 83       	st	Z, r24
    2ffc:	91 83       	std	Z+1, r25	; 0x01
    2ffe:	a2 83       	std	Z+2, r26	; 0x02
    3000:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3002:	fe 01       	movw	r30, r28
    3004:	eb 59       	subi	r30, 0x9B	; 155
    3006:	fe 4f       	sbci	r31, 0xFE	; 254
    3008:	60 81       	ld	r22, Z
    300a:	71 81       	ldd	r23, Z+1	; 0x01
    300c:	82 81       	ldd	r24, Z+2	; 0x02
    300e:	93 81       	ldd	r25, Z+3	; 0x03
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	40 e8       	ldi	r20, 0x80	; 128
    3016:	5f e3       	ldi	r21, 0x3F	; 63
    3018:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    301c:	88 23       	and	r24, r24
    301e:	44 f4       	brge	.+16     	; 0x3030 <main+0x6fe>
		__ticks = 1;
    3020:	fe 01       	movw	r30, r28
    3022:	ed 59       	subi	r30, 0x9D	; 157
    3024:	fe 4f       	sbci	r31, 0xFE	; 254
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	91 83       	std	Z+1, r25	; 0x01
    302c:	80 83       	st	Z, r24
    302e:	64 c0       	rjmp	.+200    	; 0x30f8 <main+0x7c6>
	else if (__tmp > 65535)
    3030:	fe 01       	movw	r30, r28
    3032:	eb 59       	subi	r30, 0x9B	; 155
    3034:	fe 4f       	sbci	r31, 0xFE	; 254
    3036:	60 81       	ld	r22, Z
    3038:	71 81       	ldd	r23, Z+1	; 0x01
    303a:	82 81       	ldd	r24, Z+2	; 0x02
    303c:	93 81       	ldd	r25, Z+3	; 0x03
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	3f ef       	ldi	r19, 0xFF	; 255
    3042:	4f e7       	ldi	r20, 0x7F	; 127
    3044:	57 e4       	ldi	r21, 0x47	; 71
    3046:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    304a:	18 16       	cp	r1, r24
    304c:	0c f0       	brlt	.+2      	; 0x3050 <main+0x71e>
    304e:	43 c0       	rjmp	.+134    	; 0x30d6 <main+0x7a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3050:	fe 01       	movw	r30, r28
    3052:	e7 59       	subi	r30, 0x97	; 151
    3054:	fe 4f       	sbci	r31, 0xFE	; 254
    3056:	60 81       	ld	r22, Z
    3058:	71 81       	ldd	r23, Z+1	; 0x01
    305a:	82 81       	ldd	r24, Z+2	; 0x02
    305c:	93 81       	ldd	r25, Z+3	; 0x03
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	40 e2       	ldi	r20, 0x20	; 32
    3064:	51 e4       	ldi	r21, 0x41	; 65
    3066:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	8e 01       	movw	r16, r28
    3070:	0d 59       	subi	r16, 0x9D	; 157
    3072:	1e 4f       	sbci	r17, 0xFE	; 254
    3074:	bc 01       	movw	r22, r24
    3076:	cd 01       	movw	r24, r26
    3078:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	f8 01       	movw	r30, r16
    3082:	91 83       	std	Z+1, r25	; 0x01
    3084:	80 83       	st	Z, r24
    3086:	1f c0       	rjmp	.+62     	; 0x30c6 <main+0x794>
    3088:	fe 01       	movw	r30, r28
    308a:	ef 59       	subi	r30, 0x9F	; 159
    308c:	fe 4f       	sbci	r31, 0xFE	; 254
    308e:	88 ec       	ldi	r24, 0xC8	; 200
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	91 83       	std	Z+1, r25	; 0x01
    3094:	80 83       	st	Z, r24
    3096:	fe 01       	movw	r30, r28
    3098:	ef 59       	subi	r30, 0x9F	; 159
    309a:	fe 4f       	sbci	r31, 0xFE	; 254
    309c:	80 81       	ld	r24, Z
    309e:	91 81       	ldd	r25, Z+1	; 0x01
    30a0:	01 97       	sbiw	r24, 0x01	; 1
    30a2:	f1 f7       	brne	.-4      	; 0x30a0 <main+0x76e>
    30a4:	fe 01       	movw	r30, r28
    30a6:	ef 59       	subi	r30, 0x9F	; 159
    30a8:	fe 4f       	sbci	r31, 0xFE	; 254
    30aa:	91 83       	std	Z+1, r25	; 0x01
    30ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ae:	de 01       	movw	r26, r28
    30b0:	ad 59       	subi	r26, 0x9D	; 157
    30b2:	be 4f       	sbci	r27, 0xFE	; 254
    30b4:	fe 01       	movw	r30, r28
    30b6:	ed 59       	subi	r30, 0x9D	; 157
    30b8:	fe 4f       	sbci	r31, 0xFE	; 254
    30ba:	80 81       	ld	r24, Z
    30bc:	91 81       	ldd	r25, Z+1	; 0x01
    30be:	01 97       	sbiw	r24, 0x01	; 1
    30c0:	11 96       	adiw	r26, 0x01	; 1
    30c2:	9c 93       	st	X, r25
    30c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c6:	fe 01       	movw	r30, r28
    30c8:	ed 59       	subi	r30, 0x9D	; 157
    30ca:	fe 4f       	sbci	r31, 0xFE	; 254
    30cc:	80 81       	ld	r24, Z
    30ce:	91 81       	ldd	r25, Z+1	; 0x01
    30d0:	00 97       	sbiw	r24, 0x00	; 0
    30d2:	d1 f6       	brne	.-76     	; 0x3088 <main+0x756>
    30d4:	27 c0       	rjmp	.+78     	; 0x3124 <main+0x7f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d6:	8e 01       	movw	r16, r28
    30d8:	0d 59       	subi	r16, 0x9D	; 157
    30da:	1e 4f       	sbci	r17, 0xFE	; 254
    30dc:	fe 01       	movw	r30, r28
    30de:	eb 59       	subi	r30, 0x9B	; 155
    30e0:	fe 4f       	sbci	r31, 0xFE	; 254
    30e2:	60 81       	ld	r22, Z
    30e4:	71 81       	ldd	r23, Z+1	; 0x01
    30e6:	82 81       	ldd	r24, Z+2	; 0x02
    30e8:	93 81       	ldd	r25, Z+3	; 0x03
    30ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	f8 01       	movw	r30, r16
    30f4:	91 83       	std	Z+1, r25	; 0x01
    30f6:	80 83       	st	Z, r24
    30f8:	de 01       	movw	r26, r28
    30fa:	a1 5a       	subi	r26, 0xA1	; 161
    30fc:	be 4f       	sbci	r27, 0xFE	; 254
    30fe:	fe 01       	movw	r30, r28
    3100:	ed 59       	subi	r30, 0x9D	; 157
    3102:	fe 4f       	sbci	r31, 0xFE	; 254
    3104:	80 81       	ld	r24, Z
    3106:	91 81       	ldd	r25, Z+1	; 0x01
    3108:	8d 93       	st	X+, r24
    310a:	9c 93       	st	X, r25
    310c:	fe 01       	movw	r30, r28
    310e:	e1 5a       	subi	r30, 0xA1	; 161
    3110:	fe 4f       	sbci	r31, 0xFE	; 254
    3112:	80 81       	ld	r24, Z
    3114:	91 81       	ldd	r25, Z+1	; 0x01
    3116:	01 97       	sbiw	r24, 0x01	; 1
    3118:	f1 f7       	brne	.-4      	; 0x3116 <main+0x7e4>
    311a:	fe 01       	movw	r30, r28
    311c:	e1 5a       	subi	r30, 0xA1	; 161
    311e:	fe 4f       	sbci	r31, 0xFE	; 254
    3120:	91 83       	std	Z+1, r25	; 0x01
    3122:	80 83       	st	Z, r24
			_delay_ms(50);
			HLED_voidLEDToggle(LED4);
    3124:	60 91 c1 00 	lds	r22, 0x00C1
    3128:	70 91 c2 00 	lds	r23, 0x00C2
    312c:	80 91 c3 00 	lds	r24, 0x00C3
    3130:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <HLED_voidLEDToggle>
    3134:	fe 01       	movw	r30, r28
    3136:	e5 5a       	subi	r30, 0xA5	; 165
    3138:	fe 4f       	sbci	r31, 0xFE	; 254
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	a8 e4       	ldi	r26, 0x48	; 72
    3140:	b2 e4       	ldi	r27, 0x42	; 66
    3142:	80 83       	st	Z, r24
    3144:	91 83       	std	Z+1, r25	; 0x01
    3146:	a2 83       	std	Z+2, r26	; 0x02
    3148:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    314a:	8e 01       	movw	r16, r28
    314c:	09 5a       	subi	r16, 0xA9	; 169
    314e:	1e 4f       	sbci	r17, 0xFE	; 254
    3150:	fe 01       	movw	r30, r28
    3152:	e5 5a       	subi	r30, 0xA5	; 165
    3154:	fe 4f       	sbci	r31, 0xFE	; 254
    3156:	60 81       	ld	r22, Z
    3158:	71 81       	ldd	r23, Z+1	; 0x01
    315a:	82 81       	ldd	r24, Z+2	; 0x02
    315c:	93 81       	ldd	r25, Z+3	; 0x03
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	4a ef       	ldi	r20, 0xFA	; 250
    3164:	54 e4       	ldi	r21, 0x44	; 68
    3166:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	f8 01       	movw	r30, r16
    3170:	80 83       	st	Z, r24
    3172:	91 83       	std	Z+1, r25	; 0x01
    3174:	a2 83       	std	Z+2, r26	; 0x02
    3176:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3178:	fe 01       	movw	r30, r28
    317a:	e9 5a       	subi	r30, 0xA9	; 169
    317c:	fe 4f       	sbci	r31, 0xFE	; 254
    317e:	60 81       	ld	r22, Z
    3180:	71 81       	ldd	r23, Z+1	; 0x01
    3182:	82 81       	ldd	r24, Z+2	; 0x02
    3184:	93 81       	ldd	r25, Z+3	; 0x03
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	40 e8       	ldi	r20, 0x80	; 128
    318c:	5f e3       	ldi	r21, 0x3F	; 63
    318e:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    3192:	88 23       	and	r24, r24
    3194:	44 f4       	brge	.+16     	; 0x31a6 <main+0x874>
		__ticks = 1;
    3196:	fe 01       	movw	r30, r28
    3198:	eb 5a       	subi	r30, 0xAB	; 171
    319a:	fe 4f       	sbci	r31, 0xFE	; 254
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	91 83       	std	Z+1, r25	; 0x01
    31a2:	80 83       	st	Z, r24
    31a4:	64 c0       	rjmp	.+200    	; 0x326e <main+0x93c>
	else if (__tmp > 65535)
    31a6:	fe 01       	movw	r30, r28
    31a8:	e9 5a       	subi	r30, 0xA9	; 169
    31aa:	fe 4f       	sbci	r31, 0xFE	; 254
    31ac:	60 81       	ld	r22, Z
    31ae:	71 81       	ldd	r23, Z+1	; 0x01
    31b0:	82 81       	ldd	r24, Z+2	; 0x02
    31b2:	93 81       	ldd	r25, Z+3	; 0x03
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	3f ef       	ldi	r19, 0xFF	; 255
    31b8:	4f e7       	ldi	r20, 0x7F	; 127
    31ba:	57 e4       	ldi	r21, 0x47	; 71
    31bc:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    31c0:	18 16       	cp	r1, r24
    31c2:	0c f0       	brlt	.+2      	; 0x31c6 <main+0x894>
    31c4:	43 c0       	rjmp	.+134    	; 0x324c <main+0x91a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c6:	fe 01       	movw	r30, r28
    31c8:	e5 5a       	subi	r30, 0xA5	; 165
    31ca:	fe 4f       	sbci	r31, 0xFE	; 254
    31cc:	60 81       	ld	r22, Z
    31ce:	71 81       	ldd	r23, Z+1	; 0x01
    31d0:	82 81       	ldd	r24, Z+2	; 0x02
    31d2:	93 81       	ldd	r25, Z+3	; 0x03
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	40 e2       	ldi	r20, 0x20	; 32
    31da:	51 e4       	ldi	r21, 0x41	; 65
    31dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	8e 01       	movw	r16, r28
    31e6:	0b 5a       	subi	r16, 0xAB	; 171
    31e8:	1e 4f       	sbci	r17, 0xFE	; 254
    31ea:	bc 01       	movw	r22, r24
    31ec:	cd 01       	movw	r24, r26
    31ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	f8 01       	movw	r30, r16
    31f8:	91 83       	std	Z+1, r25	; 0x01
    31fa:	80 83       	st	Z, r24
    31fc:	1f c0       	rjmp	.+62     	; 0x323c <main+0x90a>
    31fe:	fe 01       	movw	r30, r28
    3200:	ed 5a       	subi	r30, 0xAD	; 173
    3202:	fe 4f       	sbci	r31, 0xFE	; 254
    3204:	88 ec       	ldi	r24, 0xC8	; 200
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	91 83       	std	Z+1, r25	; 0x01
    320a:	80 83       	st	Z, r24
    320c:	fe 01       	movw	r30, r28
    320e:	ed 5a       	subi	r30, 0xAD	; 173
    3210:	fe 4f       	sbci	r31, 0xFE	; 254
    3212:	80 81       	ld	r24, Z
    3214:	91 81       	ldd	r25, Z+1	; 0x01
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	f1 f7       	brne	.-4      	; 0x3216 <main+0x8e4>
    321a:	fe 01       	movw	r30, r28
    321c:	ed 5a       	subi	r30, 0xAD	; 173
    321e:	fe 4f       	sbci	r31, 0xFE	; 254
    3220:	91 83       	std	Z+1, r25	; 0x01
    3222:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3224:	de 01       	movw	r26, r28
    3226:	ab 5a       	subi	r26, 0xAB	; 171
    3228:	be 4f       	sbci	r27, 0xFE	; 254
    322a:	fe 01       	movw	r30, r28
    322c:	eb 5a       	subi	r30, 0xAB	; 171
    322e:	fe 4f       	sbci	r31, 0xFE	; 254
    3230:	80 81       	ld	r24, Z
    3232:	91 81       	ldd	r25, Z+1	; 0x01
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	11 96       	adiw	r26, 0x01	; 1
    3238:	9c 93       	st	X, r25
    323a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    323c:	fe 01       	movw	r30, r28
    323e:	eb 5a       	subi	r30, 0xAB	; 171
    3240:	fe 4f       	sbci	r31, 0xFE	; 254
    3242:	80 81       	ld	r24, Z
    3244:	91 81       	ldd	r25, Z+1	; 0x01
    3246:	00 97       	sbiw	r24, 0x00	; 0
    3248:	d1 f6       	brne	.-76     	; 0x31fe <main+0x8cc>
    324a:	28 c0       	rjmp	.+80     	; 0x329c <main+0x96a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    324c:	8e 01       	movw	r16, r28
    324e:	0b 5a       	subi	r16, 0xAB	; 171
    3250:	1e 4f       	sbci	r17, 0xFE	; 254
    3252:	fe 01       	movw	r30, r28
    3254:	e9 5a       	subi	r30, 0xA9	; 169
    3256:	fe 4f       	sbci	r31, 0xFE	; 254
    3258:	60 81       	ld	r22, Z
    325a:	71 81       	ldd	r23, Z+1	; 0x01
    325c:	82 81       	ldd	r24, Z+2	; 0x02
    325e:	93 81       	ldd	r25, Z+3	; 0x03
    3260:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	f8 01       	movw	r30, r16
    326a:	91 83       	std	Z+1, r25	; 0x01
    326c:	80 83       	st	Z, r24
    326e:	de 01       	movw	r26, r28
    3270:	af 5a       	subi	r26, 0xAF	; 175
    3272:	be 4f       	sbci	r27, 0xFE	; 254
    3274:	fe 01       	movw	r30, r28
    3276:	eb 5a       	subi	r30, 0xAB	; 171
    3278:	fe 4f       	sbci	r31, 0xFE	; 254
    327a:	80 81       	ld	r24, Z
    327c:	91 81       	ldd	r25, Z+1	; 0x01
    327e:	11 96       	adiw	r26, 0x01	; 1
    3280:	9c 93       	st	X, r25
    3282:	8e 93       	st	-X, r24
    3284:	fe 01       	movw	r30, r28
    3286:	ef 5a       	subi	r30, 0xAF	; 175
    3288:	fe 4f       	sbci	r31, 0xFE	; 254
    328a:	80 81       	ld	r24, Z
    328c:	91 81       	ldd	r25, Z+1	; 0x01
    328e:	01 97       	sbiw	r24, 0x01	; 1
    3290:	f1 f7       	brne	.-4      	; 0x328e <main+0x95c>
    3292:	fe 01       	movw	r30, r28
    3294:	ef 5a       	subi	r30, 0xAF	; 175
    3296:	fe 4f       	sbci	r31, 0xFE	; 254
    3298:	91 83       	std	Z+1, r25	; 0x01
    329a:	80 83       	st	Z, r24
			_delay_ms(50);
		}
		if(keyPressed=='2')
    329c:	fe 01       	movw	r30, r28
    329e:	eb 55       	subi	r30, 0x5B	; 91
    32a0:	fe 4f       	sbci	r31, 0xFE	; 254
    32a2:	80 81       	ld	r24, Z
    32a4:	82 33       	cpi	r24, 0x32	; 50
    32a6:	09 f0       	breq	.+2      	; 0x32aa <main+0x978>
    32a8:	d9 c5       	rjmp	.+2994   	; 0x3e5c <main+0x152a>
		{
			HLED_voidLEDOn(LED1);
    32aa:	60 91 b8 00 	lds	r22, 0x00B8
    32ae:	70 91 b9 00 	lds	r23, 0x00B9
    32b2:	80 91 ba 00 	lds	r24, 0x00BA
    32b6:	0e 94 cb 0b 	call	0x1796	; 0x1796 <HLED_voidLEDOn>
    32ba:	fe 01       	movw	r30, r28
    32bc:	e3 5b       	subi	r30, 0xB3	; 179
    32be:	fe 4f       	sbci	r31, 0xFE	; 254
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	a8 e4       	ldi	r26, 0x48	; 72
    32c6:	b2 e4       	ldi	r27, 0x42	; 66
    32c8:	80 83       	st	Z, r24
    32ca:	91 83       	std	Z+1, r25	; 0x01
    32cc:	a2 83       	std	Z+2, r26	; 0x02
    32ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32d0:	8e 01       	movw	r16, r28
    32d2:	07 5b       	subi	r16, 0xB7	; 183
    32d4:	1e 4f       	sbci	r17, 0xFE	; 254
    32d6:	fe 01       	movw	r30, r28
    32d8:	e3 5b       	subi	r30, 0xB3	; 179
    32da:	fe 4f       	sbci	r31, 0xFE	; 254
    32dc:	60 81       	ld	r22, Z
    32de:	71 81       	ldd	r23, Z+1	; 0x01
    32e0:	82 81       	ldd	r24, Z+2	; 0x02
    32e2:	93 81       	ldd	r25, Z+3	; 0x03
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	4a ef       	ldi	r20, 0xFA	; 250
    32ea:	54 e4       	ldi	r21, 0x44	; 68
    32ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	f8 01       	movw	r30, r16
    32f6:	80 83       	st	Z, r24
    32f8:	91 83       	std	Z+1, r25	; 0x01
    32fa:	a2 83       	std	Z+2, r26	; 0x02
    32fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32fe:	fe 01       	movw	r30, r28
    3300:	e7 5b       	subi	r30, 0xB7	; 183
    3302:	fe 4f       	sbci	r31, 0xFE	; 254
    3304:	60 81       	ld	r22, Z
    3306:	71 81       	ldd	r23, Z+1	; 0x01
    3308:	82 81       	ldd	r24, Z+2	; 0x02
    330a:	93 81       	ldd	r25, Z+3	; 0x03
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	40 e8       	ldi	r20, 0x80	; 128
    3312:	5f e3       	ldi	r21, 0x3F	; 63
    3314:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    3318:	88 23       	and	r24, r24
    331a:	44 f4       	brge	.+16     	; 0x332c <main+0x9fa>
		__ticks = 1;
    331c:	fe 01       	movw	r30, r28
    331e:	e9 5b       	subi	r30, 0xB9	; 185
    3320:	fe 4f       	sbci	r31, 0xFE	; 254
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	91 83       	std	Z+1, r25	; 0x01
    3328:	80 83       	st	Z, r24
    332a:	64 c0       	rjmp	.+200    	; 0x33f4 <main+0xac2>
	else if (__tmp > 65535)
    332c:	fe 01       	movw	r30, r28
    332e:	e7 5b       	subi	r30, 0xB7	; 183
    3330:	fe 4f       	sbci	r31, 0xFE	; 254
    3332:	60 81       	ld	r22, Z
    3334:	71 81       	ldd	r23, Z+1	; 0x01
    3336:	82 81       	ldd	r24, Z+2	; 0x02
    3338:	93 81       	ldd	r25, Z+3	; 0x03
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	3f ef       	ldi	r19, 0xFF	; 255
    333e:	4f e7       	ldi	r20, 0x7F	; 127
    3340:	57 e4       	ldi	r21, 0x47	; 71
    3342:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    3346:	18 16       	cp	r1, r24
    3348:	0c f0       	brlt	.+2      	; 0x334c <main+0xa1a>
    334a:	43 c0       	rjmp	.+134    	; 0x33d2 <main+0xaa0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    334c:	fe 01       	movw	r30, r28
    334e:	e3 5b       	subi	r30, 0xB3	; 179
    3350:	fe 4f       	sbci	r31, 0xFE	; 254
    3352:	60 81       	ld	r22, Z
    3354:	71 81       	ldd	r23, Z+1	; 0x01
    3356:	82 81       	ldd	r24, Z+2	; 0x02
    3358:	93 81       	ldd	r25, Z+3	; 0x03
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	40 e2       	ldi	r20, 0x20	; 32
    3360:	51 e4       	ldi	r21, 0x41	; 65
    3362:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3366:	dc 01       	movw	r26, r24
    3368:	cb 01       	movw	r24, r22
    336a:	8e 01       	movw	r16, r28
    336c:	09 5b       	subi	r16, 0xB9	; 185
    336e:	1e 4f       	sbci	r17, 0xFE	; 254
    3370:	bc 01       	movw	r22, r24
    3372:	cd 01       	movw	r24, r26
    3374:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3378:	dc 01       	movw	r26, r24
    337a:	cb 01       	movw	r24, r22
    337c:	f8 01       	movw	r30, r16
    337e:	91 83       	std	Z+1, r25	; 0x01
    3380:	80 83       	st	Z, r24
    3382:	1f c0       	rjmp	.+62     	; 0x33c2 <main+0xa90>
    3384:	fe 01       	movw	r30, r28
    3386:	eb 5b       	subi	r30, 0xBB	; 187
    3388:	fe 4f       	sbci	r31, 0xFE	; 254
    338a:	88 ec       	ldi	r24, 0xC8	; 200
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	91 83       	std	Z+1, r25	; 0x01
    3390:	80 83       	st	Z, r24
    3392:	fe 01       	movw	r30, r28
    3394:	eb 5b       	subi	r30, 0xBB	; 187
    3396:	fe 4f       	sbci	r31, 0xFE	; 254
    3398:	80 81       	ld	r24, Z
    339a:	91 81       	ldd	r25, Z+1	; 0x01
    339c:	01 97       	sbiw	r24, 0x01	; 1
    339e:	f1 f7       	brne	.-4      	; 0x339c <main+0xa6a>
    33a0:	fe 01       	movw	r30, r28
    33a2:	eb 5b       	subi	r30, 0xBB	; 187
    33a4:	fe 4f       	sbci	r31, 0xFE	; 254
    33a6:	91 83       	std	Z+1, r25	; 0x01
    33a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33aa:	de 01       	movw	r26, r28
    33ac:	a9 5b       	subi	r26, 0xB9	; 185
    33ae:	be 4f       	sbci	r27, 0xFE	; 254
    33b0:	fe 01       	movw	r30, r28
    33b2:	e9 5b       	subi	r30, 0xB9	; 185
    33b4:	fe 4f       	sbci	r31, 0xFE	; 254
    33b6:	80 81       	ld	r24, Z
    33b8:	91 81       	ldd	r25, Z+1	; 0x01
    33ba:	01 97       	sbiw	r24, 0x01	; 1
    33bc:	11 96       	adiw	r26, 0x01	; 1
    33be:	9c 93       	st	X, r25
    33c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33c2:	fe 01       	movw	r30, r28
    33c4:	e9 5b       	subi	r30, 0xB9	; 185
    33c6:	fe 4f       	sbci	r31, 0xFE	; 254
    33c8:	80 81       	ld	r24, Z
    33ca:	91 81       	ldd	r25, Z+1	; 0x01
    33cc:	00 97       	sbiw	r24, 0x00	; 0
    33ce:	d1 f6       	brne	.-76     	; 0x3384 <main+0xa52>
    33d0:	27 c0       	rjmp	.+78     	; 0x3420 <main+0xaee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33d2:	8e 01       	movw	r16, r28
    33d4:	09 5b       	subi	r16, 0xB9	; 185
    33d6:	1e 4f       	sbci	r17, 0xFE	; 254
    33d8:	fe 01       	movw	r30, r28
    33da:	e7 5b       	subi	r30, 0xB7	; 183
    33dc:	fe 4f       	sbci	r31, 0xFE	; 254
    33de:	60 81       	ld	r22, Z
    33e0:	71 81       	ldd	r23, Z+1	; 0x01
    33e2:	82 81       	ldd	r24, Z+2	; 0x02
    33e4:	93 81       	ldd	r25, Z+3	; 0x03
    33e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	f8 01       	movw	r30, r16
    33f0:	91 83       	std	Z+1, r25	; 0x01
    33f2:	80 83       	st	Z, r24
    33f4:	de 01       	movw	r26, r28
    33f6:	ad 5b       	subi	r26, 0xBD	; 189
    33f8:	be 4f       	sbci	r27, 0xFE	; 254
    33fa:	fe 01       	movw	r30, r28
    33fc:	e9 5b       	subi	r30, 0xB9	; 185
    33fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3400:	80 81       	ld	r24, Z
    3402:	91 81       	ldd	r25, Z+1	; 0x01
    3404:	8d 93       	st	X+, r24
    3406:	9c 93       	st	X, r25
    3408:	fe 01       	movw	r30, r28
    340a:	ed 5b       	subi	r30, 0xBD	; 189
    340c:	fe 4f       	sbci	r31, 0xFE	; 254
    340e:	80 81       	ld	r24, Z
    3410:	91 81       	ldd	r25, Z+1	; 0x01
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	f1 f7       	brne	.-4      	; 0x3412 <main+0xae0>
    3416:	fe 01       	movw	r30, r28
    3418:	ed 5b       	subi	r30, 0xBD	; 189
    341a:	fe 4f       	sbci	r31, 0xFE	; 254
    341c:	91 83       	std	Z+1, r25	; 0x01
    341e:	80 83       	st	Z, r24
			_delay_ms(50);
			HLED_voidLEDOn(LED2);
    3420:	60 91 bb 00 	lds	r22, 0x00BB
    3424:	70 91 bc 00 	lds	r23, 0x00BC
    3428:	80 91 bd 00 	lds	r24, 0x00BD
    342c:	0e 94 cb 0b 	call	0x1796	; 0x1796 <HLED_voidLEDOn>
    3430:	fe 01       	movw	r30, r28
    3432:	e1 5c       	subi	r30, 0xC1	; 193
    3434:	fe 4f       	sbci	r31, 0xFE	; 254
    3436:	80 e0       	ldi	r24, 0x00	; 0
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	a8 e4       	ldi	r26, 0x48	; 72
    343c:	b2 e4       	ldi	r27, 0x42	; 66
    343e:	80 83       	st	Z, r24
    3440:	91 83       	std	Z+1, r25	; 0x01
    3442:	a2 83       	std	Z+2, r26	; 0x02
    3444:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3446:	8e 01       	movw	r16, r28
    3448:	05 5c       	subi	r16, 0xC5	; 197
    344a:	1e 4f       	sbci	r17, 0xFE	; 254
    344c:	fe 01       	movw	r30, r28
    344e:	e1 5c       	subi	r30, 0xC1	; 193
    3450:	fe 4f       	sbci	r31, 0xFE	; 254
    3452:	60 81       	ld	r22, Z
    3454:	71 81       	ldd	r23, Z+1	; 0x01
    3456:	82 81       	ldd	r24, Z+2	; 0x02
    3458:	93 81       	ldd	r25, Z+3	; 0x03
    345a:	20 e0       	ldi	r18, 0x00	; 0
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	4a ef       	ldi	r20, 0xFA	; 250
    3460:	54 e4       	ldi	r21, 0x44	; 68
    3462:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3466:	dc 01       	movw	r26, r24
    3468:	cb 01       	movw	r24, r22
    346a:	f8 01       	movw	r30, r16
    346c:	80 83       	st	Z, r24
    346e:	91 83       	std	Z+1, r25	; 0x01
    3470:	a2 83       	std	Z+2, r26	; 0x02
    3472:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3474:	fe 01       	movw	r30, r28
    3476:	e5 5c       	subi	r30, 0xC5	; 197
    3478:	fe 4f       	sbci	r31, 0xFE	; 254
    347a:	60 81       	ld	r22, Z
    347c:	71 81       	ldd	r23, Z+1	; 0x01
    347e:	82 81       	ldd	r24, Z+2	; 0x02
    3480:	93 81       	ldd	r25, Z+3	; 0x03
    3482:	20 e0       	ldi	r18, 0x00	; 0
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	40 e8       	ldi	r20, 0x80	; 128
    3488:	5f e3       	ldi	r21, 0x3F	; 63
    348a:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    348e:	88 23       	and	r24, r24
    3490:	44 f4       	brge	.+16     	; 0x34a2 <main+0xb70>
		__ticks = 1;
    3492:	fe 01       	movw	r30, r28
    3494:	e7 5c       	subi	r30, 0xC7	; 199
    3496:	fe 4f       	sbci	r31, 0xFE	; 254
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	91 83       	std	Z+1, r25	; 0x01
    349e:	80 83       	st	Z, r24
    34a0:	64 c0       	rjmp	.+200    	; 0x356a <main+0xc38>
	else if (__tmp > 65535)
    34a2:	fe 01       	movw	r30, r28
    34a4:	e5 5c       	subi	r30, 0xC5	; 197
    34a6:	fe 4f       	sbci	r31, 0xFE	; 254
    34a8:	60 81       	ld	r22, Z
    34aa:	71 81       	ldd	r23, Z+1	; 0x01
    34ac:	82 81       	ldd	r24, Z+2	; 0x02
    34ae:	93 81       	ldd	r25, Z+3	; 0x03
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	3f ef       	ldi	r19, 0xFF	; 255
    34b4:	4f e7       	ldi	r20, 0x7F	; 127
    34b6:	57 e4       	ldi	r21, 0x47	; 71
    34b8:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    34bc:	18 16       	cp	r1, r24
    34be:	0c f0       	brlt	.+2      	; 0x34c2 <main+0xb90>
    34c0:	43 c0       	rjmp	.+134    	; 0x3548 <main+0xc16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c2:	fe 01       	movw	r30, r28
    34c4:	e1 5c       	subi	r30, 0xC1	; 193
    34c6:	fe 4f       	sbci	r31, 0xFE	; 254
    34c8:	60 81       	ld	r22, Z
    34ca:	71 81       	ldd	r23, Z+1	; 0x01
    34cc:	82 81       	ldd	r24, Z+2	; 0x02
    34ce:	93 81       	ldd	r25, Z+3	; 0x03
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	40 e2       	ldi	r20, 0x20	; 32
    34d6:	51 e4       	ldi	r21, 0x41	; 65
    34d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	8e 01       	movw	r16, r28
    34e2:	07 5c       	subi	r16, 0xC7	; 199
    34e4:	1e 4f       	sbci	r17, 0xFE	; 254
    34e6:	bc 01       	movw	r22, r24
    34e8:	cd 01       	movw	r24, r26
    34ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34ee:	dc 01       	movw	r26, r24
    34f0:	cb 01       	movw	r24, r22
    34f2:	f8 01       	movw	r30, r16
    34f4:	91 83       	std	Z+1, r25	; 0x01
    34f6:	80 83       	st	Z, r24
    34f8:	1f c0       	rjmp	.+62     	; 0x3538 <main+0xc06>
    34fa:	fe 01       	movw	r30, r28
    34fc:	e9 5c       	subi	r30, 0xC9	; 201
    34fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3500:	88 ec       	ldi	r24, 0xC8	; 200
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	91 83       	std	Z+1, r25	; 0x01
    3506:	80 83       	st	Z, r24
    3508:	fe 01       	movw	r30, r28
    350a:	e9 5c       	subi	r30, 0xC9	; 201
    350c:	fe 4f       	sbci	r31, 0xFE	; 254
    350e:	80 81       	ld	r24, Z
    3510:	91 81       	ldd	r25, Z+1	; 0x01
    3512:	01 97       	sbiw	r24, 0x01	; 1
    3514:	f1 f7       	brne	.-4      	; 0x3512 <main+0xbe0>
    3516:	fe 01       	movw	r30, r28
    3518:	e9 5c       	subi	r30, 0xC9	; 201
    351a:	fe 4f       	sbci	r31, 0xFE	; 254
    351c:	91 83       	std	Z+1, r25	; 0x01
    351e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3520:	de 01       	movw	r26, r28
    3522:	a7 5c       	subi	r26, 0xC7	; 199
    3524:	be 4f       	sbci	r27, 0xFE	; 254
    3526:	fe 01       	movw	r30, r28
    3528:	e7 5c       	subi	r30, 0xC7	; 199
    352a:	fe 4f       	sbci	r31, 0xFE	; 254
    352c:	80 81       	ld	r24, Z
    352e:	91 81       	ldd	r25, Z+1	; 0x01
    3530:	01 97       	sbiw	r24, 0x01	; 1
    3532:	11 96       	adiw	r26, 0x01	; 1
    3534:	9c 93       	st	X, r25
    3536:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3538:	fe 01       	movw	r30, r28
    353a:	e7 5c       	subi	r30, 0xC7	; 199
    353c:	fe 4f       	sbci	r31, 0xFE	; 254
    353e:	80 81       	ld	r24, Z
    3540:	91 81       	ldd	r25, Z+1	; 0x01
    3542:	00 97       	sbiw	r24, 0x00	; 0
    3544:	d1 f6       	brne	.-76     	; 0x34fa <main+0xbc8>
    3546:	27 c0       	rjmp	.+78     	; 0x3596 <main+0xc64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3548:	8e 01       	movw	r16, r28
    354a:	07 5c       	subi	r16, 0xC7	; 199
    354c:	1e 4f       	sbci	r17, 0xFE	; 254
    354e:	fe 01       	movw	r30, r28
    3550:	e5 5c       	subi	r30, 0xC5	; 197
    3552:	fe 4f       	sbci	r31, 0xFE	; 254
    3554:	60 81       	ld	r22, Z
    3556:	71 81       	ldd	r23, Z+1	; 0x01
    3558:	82 81       	ldd	r24, Z+2	; 0x02
    355a:	93 81       	ldd	r25, Z+3	; 0x03
    355c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	f8 01       	movw	r30, r16
    3566:	91 83       	std	Z+1, r25	; 0x01
    3568:	80 83       	st	Z, r24
    356a:	de 01       	movw	r26, r28
    356c:	ab 5c       	subi	r26, 0xCB	; 203
    356e:	be 4f       	sbci	r27, 0xFE	; 254
    3570:	fe 01       	movw	r30, r28
    3572:	e7 5c       	subi	r30, 0xC7	; 199
    3574:	fe 4f       	sbci	r31, 0xFE	; 254
    3576:	80 81       	ld	r24, Z
    3578:	91 81       	ldd	r25, Z+1	; 0x01
    357a:	8d 93       	st	X+, r24
    357c:	9c 93       	st	X, r25
    357e:	fe 01       	movw	r30, r28
    3580:	eb 5c       	subi	r30, 0xCB	; 203
    3582:	fe 4f       	sbci	r31, 0xFE	; 254
    3584:	80 81       	ld	r24, Z
    3586:	91 81       	ldd	r25, Z+1	; 0x01
    3588:	01 97       	sbiw	r24, 0x01	; 1
    358a:	f1 f7       	brne	.-4      	; 0x3588 <main+0xc56>
    358c:	fe 01       	movw	r30, r28
    358e:	eb 5c       	subi	r30, 0xCB	; 203
    3590:	fe 4f       	sbci	r31, 0xFE	; 254
    3592:	91 83       	std	Z+1, r25	; 0x01
    3594:	80 83       	st	Z, r24
			_delay_ms(50);
			HLED_voidLEDOn(LED3);
    3596:	60 91 be 00 	lds	r22, 0x00BE
    359a:	70 91 bf 00 	lds	r23, 0x00BF
    359e:	80 91 c0 00 	lds	r24, 0x00C0
    35a2:	0e 94 cb 0b 	call	0x1796	; 0x1796 <HLED_voidLEDOn>
    35a6:	fe 01       	movw	r30, r28
    35a8:	ef 5c       	subi	r30, 0xCF	; 207
    35aa:	fe 4f       	sbci	r31, 0xFE	; 254
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	a8 e4       	ldi	r26, 0x48	; 72
    35b2:	b2 e4       	ldi	r27, 0x42	; 66
    35b4:	80 83       	st	Z, r24
    35b6:	91 83       	std	Z+1, r25	; 0x01
    35b8:	a2 83       	std	Z+2, r26	; 0x02
    35ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35bc:	8e 01       	movw	r16, r28
    35be:	03 5d       	subi	r16, 0xD3	; 211
    35c0:	1e 4f       	sbci	r17, 0xFE	; 254
    35c2:	fe 01       	movw	r30, r28
    35c4:	ef 5c       	subi	r30, 0xCF	; 207
    35c6:	fe 4f       	sbci	r31, 0xFE	; 254
    35c8:	60 81       	ld	r22, Z
    35ca:	71 81       	ldd	r23, Z+1	; 0x01
    35cc:	82 81       	ldd	r24, Z+2	; 0x02
    35ce:	93 81       	ldd	r25, Z+3	; 0x03
    35d0:	20 e0       	ldi	r18, 0x00	; 0
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	4a ef       	ldi	r20, 0xFA	; 250
    35d6:	54 e4       	ldi	r21, 0x44	; 68
    35d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	f8 01       	movw	r30, r16
    35e2:	80 83       	st	Z, r24
    35e4:	91 83       	std	Z+1, r25	; 0x01
    35e6:	a2 83       	std	Z+2, r26	; 0x02
    35e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35ea:	fe 01       	movw	r30, r28
    35ec:	e3 5d       	subi	r30, 0xD3	; 211
    35ee:	fe 4f       	sbci	r31, 0xFE	; 254
    35f0:	60 81       	ld	r22, Z
    35f2:	71 81       	ldd	r23, Z+1	; 0x01
    35f4:	82 81       	ldd	r24, Z+2	; 0x02
    35f6:	93 81       	ldd	r25, Z+3	; 0x03
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	40 e8       	ldi	r20, 0x80	; 128
    35fe:	5f e3       	ldi	r21, 0x3F	; 63
    3600:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    3604:	88 23       	and	r24, r24
    3606:	44 f4       	brge	.+16     	; 0x3618 <main+0xce6>
		__ticks = 1;
    3608:	fe 01       	movw	r30, r28
    360a:	e5 5d       	subi	r30, 0xD5	; 213
    360c:	fe 4f       	sbci	r31, 0xFE	; 254
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	91 83       	std	Z+1, r25	; 0x01
    3614:	80 83       	st	Z, r24
    3616:	64 c0       	rjmp	.+200    	; 0x36e0 <main+0xdae>
	else if (__tmp > 65535)
    3618:	fe 01       	movw	r30, r28
    361a:	e3 5d       	subi	r30, 0xD3	; 211
    361c:	fe 4f       	sbci	r31, 0xFE	; 254
    361e:	60 81       	ld	r22, Z
    3620:	71 81       	ldd	r23, Z+1	; 0x01
    3622:	82 81       	ldd	r24, Z+2	; 0x02
    3624:	93 81       	ldd	r25, Z+3	; 0x03
    3626:	20 e0       	ldi	r18, 0x00	; 0
    3628:	3f ef       	ldi	r19, 0xFF	; 255
    362a:	4f e7       	ldi	r20, 0x7F	; 127
    362c:	57 e4       	ldi	r21, 0x47	; 71
    362e:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    3632:	18 16       	cp	r1, r24
    3634:	0c f0       	brlt	.+2      	; 0x3638 <main+0xd06>
    3636:	43 c0       	rjmp	.+134    	; 0x36be <main+0xd8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3638:	fe 01       	movw	r30, r28
    363a:	ef 5c       	subi	r30, 0xCF	; 207
    363c:	fe 4f       	sbci	r31, 0xFE	; 254
    363e:	60 81       	ld	r22, Z
    3640:	71 81       	ldd	r23, Z+1	; 0x01
    3642:	82 81       	ldd	r24, Z+2	; 0x02
    3644:	93 81       	ldd	r25, Z+3	; 0x03
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	40 e2       	ldi	r20, 0x20	; 32
    364c:	51 e4       	ldi	r21, 0x41	; 65
    364e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	8e 01       	movw	r16, r28
    3658:	05 5d       	subi	r16, 0xD5	; 213
    365a:	1e 4f       	sbci	r17, 0xFE	; 254
    365c:	bc 01       	movw	r22, r24
    365e:	cd 01       	movw	r24, r26
    3660:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3664:	dc 01       	movw	r26, r24
    3666:	cb 01       	movw	r24, r22
    3668:	f8 01       	movw	r30, r16
    366a:	91 83       	std	Z+1, r25	; 0x01
    366c:	80 83       	st	Z, r24
    366e:	1f c0       	rjmp	.+62     	; 0x36ae <main+0xd7c>
    3670:	fe 01       	movw	r30, r28
    3672:	e7 5d       	subi	r30, 0xD7	; 215
    3674:	fe 4f       	sbci	r31, 0xFE	; 254
    3676:	88 ec       	ldi	r24, 0xC8	; 200
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	91 83       	std	Z+1, r25	; 0x01
    367c:	80 83       	st	Z, r24
    367e:	fe 01       	movw	r30, r28
    3680:	e7 5d       	subi	r30, 0xD7	; 215
    3682:	fe 4f       	sbci	r31, 0xFE	; 254
    3684:	80 81       	ld	r24, Z
    3686:	91 81       	ldd	r25, Z+1	; 0x01
    3688:	01 97       	sbiw	r24, 0x01	; 1
    368a:	f1 f7       	brne	.-4      	; 0x3688 <main+0xd56>
    368c:	fe 01       	movw	r30, r28
    368e:	e7 5d       	subi	r30, 0xD7	; 215
    3690:	fe 4f       	sbci	r31, 0xFE	; 254
    3692:	91 83       	std	Z+1, r25	; 0x01
    3694:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3696:	de 01       	movw	r26, r28
    3698:	a5 5d       	subi	r26, 0xD5	; 213
    369a:	be 4f       	sbci	r27, 0xFE	; 254
    369c:	fe 01       	movw	r30, r28
    369e:	e5 5d       	subi	r30, 0xD5	; 213
    36a0:	fe 4f       	sbci	r31, 0xFE	; 254
    36a2:	80 81       	ld	r24, Z
    36a4:	91 81       	ldd	r25, Z+1	; 0x01
    36a6:	01 97       	sbiw	r24, 0x01	; 1
    36a8:	11 96       	adiw	r26, 0x01	; 1
    36aa:	9c 93       	st	X, r25
    36ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ae:	fe 01       	movw	r30, r28
    36b0:	e5 5d       	subi	r30, 0xD5	; 213
    36b2:	fe 4f       	sbci	r31, 0xFE	; 254
    36b4:	80 81       	ld	r24, Z
    36b6:	91 81       	ldd	r25, Z+1	; 0x01
    36b8:	00 97       	sbiw	r24, 0x00	; 0
    36ba:	d1 f6       	brne	.-76     	; 0x3670 <main+0xd3e>
    36bc:	27 c0       	rjmp	.+78     	; 0x370c <main+0xdda>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36be:	8e 01       	movw	r16, r28
    36c0:	05 5d       	subi	r16, 0xD5	; 213
    36c2:	1e 4f       	sbci	r17, 0xFE	; 254
    36c4:	fe 01       	movw	r30, r28
    36c6:	e3 5d       	subi	r30, 0xD3	; 211
    36c8:	fe 4f       	sbci	r31, 0xFE	; 254
    36ca:	60 81       	ld	r22, Z
    36cc:	71 81       	ldd	r23, Z+1	; 0x01
    36ce:	82 81       	ldd	r24, Z+2	; 0x02
    36d0:	93 81       	ldd	r25, Z+3	; 0x03
    36d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36d6:	dc 01       	movw	r26, r24
    36d8:	cb 01       	movw	r24, r22
    36da:	f8 01       	movw	r30, r16
    36dc:	91 83       	std	Z+1, r25	; 0x01
    36de:	80 83       	st	Z, r24
    36e0:	de 01       	movw	r26, r28
    36e2:	a9 5d       	subi	r26, 0xD9	; 217
    36e4:	be 4f       	sbci	r27, 0xFE	; 254
    36e6:	fe 01       	movw	r30, r28
    36e8:	e5 5d       	subi	r30, 0xD5	; 213
    36ea:	fe 4f       	sbci	r31, 0xFE	; 254
    36ec:	80 81       	ld	r24, Z
    36ee:	91 81       	ldd	r25, Z+1	; 0x01
    36f0:	8d 93       	st	X+, r24
    36f2:	9c 93       	st	X, r25
    36f4:	fe 01       	movw	r30, r28
    36f6:	e9 5d       	subi	r30, 0xD9	; 217
    36f8:	fe 4f       	sbci	r31, 0xFE	; 254
    36fa:	80 81       	ld	r24, Z
    36fc:	91 81       	ldd	r25, Z+1	; 0x01
    36fe:	01 97       	sbiw	r24, 0x01	; 1
    3700:	f1 f7       	brne	.-4      	; 0x36fe <main+0xdcc>
    3702:	fe 01       	movw	r30, r28
    3704:	e9 5d       	subi	r30, 0xD9	; 217
    3706:	fe 4f       	sbci	r31, 0xFE	; 254
    3708:	91 83       	std	Z+1, r25	; 0x01
    370a:	80 83       	st	Z, r24
			_delay_ms(50);
			HLED_voidLEDOn(LED4);
    370c:	60 91 c1 00 	lds	r22, 0x00C1
    3710:	70 91 c2 00 	lds	r23, 0x00C2
    3714:	80 91 c3 00 	lds	r24, 0x00C3
    3718:	0e 94 cb 0b 	call	0x1796	; 0x1796 <HLED_voidLEDOn>
    371c:	fe 01       	movw	r30, r28
    371e:	ed 5d       	subi	r30, 0xDD	; 221
    3720:	fe 4f       	sbci	r31, 0xFE	; 254
    3722:	80 e0       	ldi	r24, 0x00	; 0
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	a0 e2       	ldi	r26, 0x20	; 32
    3728:	b1 e4       	ldi	r27, 0x41	; 65
    372a:	80 83       	st	Z, r24
    372c:	91 83       	std	Z+1, r25	; 0x01
    372e:	a2 83       	std	Z+2, r26	; 0x02
    3730:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3732:	8e 01       	movw	r16, r28
    3734:	01 5e       	subi	r16, 0xE1	; 225
    3736:	1e 4f       	sbci	r17, 0xFE	; 254
    3738:	fe 01       	movw	r30, r28
    373a:	ed 5d       	subi	r30, 0xDD	; 221
    373c:	fe 4f       	sbci	r31, 0xFE	; 254
    373e:	60 81       	ld	r22, Z
    3740:	71 81       	ldd	r23, Z+1	; 0x01
    3742:	82 81       	ldd	r24, Z+2	; 0x02
    3744:	93 81       	ldd	r25, Z+3	; 0x03
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	4a ef       	ldi	r20, 0xFA	; 250
    374c:	54 e4       	ldi	r21, 0x44	; 68
    374e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3752:	dc 01       	movw	r26, r24
    3754:	cb 01       	movw	r24, r22
    3756:	f8 01       	movw	r30, r16
    3758:	80 83       	st	Z, r24
    375a:	91 83       	std	Z+1, r25	; 0x01
    375c:	a2 83       	std	Z+2, r26	; 0x02
    375e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3760:	fe 01       	movw	r30, r28
    3762:	e1 5e       	subi	r30, 0xE1	; 225
    3764:	fe 4f       	sbci	r31, 0xFE	; 254
    3766:	60 81       	ld	r22, Z
    3768:	71 81       	ldd	r23, Z+1	; 0x01
    376a:	82 81       	ldd	r24, Z+2	; 0x02
    376c:	93 81       	ldd	r25, Z+3	; 0x03
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	40 e8       	ldi	r20, 0x80	; 128
    3774:	5f e3       	ldi	r21, 0x3F	; 63
    3776:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    377a:	88 23       	and	r24, r24
    377c:	44 f4       	brge	.+16     	; 0x378e <main+0xe5c>
		__ticks = 1;
    377e:	fe 01       	movw	r30, r28
    3780:	e3 5e       	subi	r30, 0xE3	; 227
    3782:	fe 4f       	sbci	r31, 0xFE	; 254
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	91 83       	std	Z+1, r25	; 0x01
    378a:	80 83       	st	Z, r24
    378c:	64 c0       	rjmp	.+200    	; 0x3856 <main+0xf24>
	else if (__tmp > 65535)
    378e:	fe 01       	movw	r30, r28
    3790:	e1 5e       	subi	r30, 0xE1	; 225
    3792:	fe 4f       	sbci	r31, 0xFE	; 254
    3794:	60 81       	ld	r22, Z
    3796:	71 81       	ldd	r23, Z+1	; 0x01
    3798:	82 81       	ldd	r24, Z+2	; 0x02
    379a:	93 81       	ldd	r25, Z+3	; 0x03
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	3f ef       	ldi	r19, 0xFF	; 255
    37a0:	4f e7       	ldi	r20, 0x7F	; 127
    37a2:	57 e4       	ldi	r21, 0x47	; 71
    37a4:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    37a8:	18 16       	cp	r1, r24
    37aa:	0c f0       	brlt	.+2      	; 0x37ae <main+0xe7c>
    37ac:	43 c0       	rjmp	.+134    	; 0x3834 <main+0xf02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ae:	fe 01       	movw	r30, r28
    37b0:	ed 5d       	subi	r30, 0xDD	; 221
    37b2:	fe 4f       	sbci	r31, 0xFE	; 254
    37b4:	60 81       	ld	r22, Z
    37b6:	71 81       	ldd	r23, Z+1	; 0x01
    37b8:	82 81       	ldd	r24, Z+2	; 0x02
    37ba:	93 81       	ldd	r25, Z+3	; 0x03
    37bc:	20 e0       	ldi	r18, 0x00	; 0
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	40 e2       	ldi	r20, 0x20	; 32
    37c2:	51 e4       	ldi	r21, 0x41	; 65
    37c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37c8:	dc 01       	movw	r26, r24
    37ca:	cb 01       	movw	r24, r22
    37cc:	8e 01       	movw	r16, r28
    37ce:	03 5e       	subi	r16, 0xE3	; 227
    37d0:	1e 4f       	sbci	r17, 0xFE	; 254
    37d2:	bc 01       	movw	r22, r24
    37d4:	cd 01       	movw	r24, r26
    37d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37da:	dc 01       	movw	r26, r24
    37dc:	cb 01       	movw	r24, r22
    37de:	f8 01       	movw	r30, r16
    37e0:	91 83       	std	Z+1, r25	; 0x01
    37e2:	80 83       	st	Z, r24
    37e4:	1f c0       	rjmp	.+62     	; 0x3824 <main+0xef2>
    37e6:	fe 01       	movw	r30, r28
    37e8:	e5 5e       	subi	r30, 0xE5	; 229
    37ea:	fe 4f       	sbci	r31, 0xFE	; 254
    37ec:	88 ec       	ldi	r24, 0xC8	; 200
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	91 83       	std	Z+1, r25	; 0x01
    37f2:	80 83       	st	Z, r24
    37f4:	fe 01       	movw	r30, r28
    37f6:	e5 5e       	subi	r30, 0xE5	; 229
    37f8:	fe 4f       	sbci	r31, 0xFE	; 254
    37fa:	80 81       	ld	r24, Z
    37fc:	91 81       	ldd	r25, Z+1	; 0x01
    37fe:	01 97       	sbiw	r24, 0x01	; 1
    3800:	f1 f7       	brne	.-4      	; 0x37fe <main+0xecc>
    3802:	fe 01       	movw	r30, r28
    3804:	e5 5e       	subi	r30, 0xE5	; 229
    3806:	fe 4f       	sbci	r31, 0xFE	; 254
    3808:	91 83       	std	Z+1, r25	; 0x01
    380a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    380c:	de 01       	movw	r26, r28
    380e:	a3 5e       	subi	r26, 0xE3	; 227
    3810:	be 4f       	sbci	r27, 0xFE	; 254
    3812:	fe 01       	movw	r30, r28
    3814:	e3 5e       	subi	r30, 0xE3	; 227
    3816:	fe 4f       	sbci	r31, 0xFE	; 254
    3818:	80 81       	ld	r24, Z
    381a:	91 81       	ldd	r25, Z+1	; 0x01
    381c:	01 97       	sbiw	r24, 0x01	; 1
    381e:	11 96       	adiw	r26, 0x01	; 1
    3820:	9c 93       	st	X, r25
    3822:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3824:	fe 01       	movw	r30, r28
    3826:	e3 5e       	subi	r30, 0xE3	; 227
    3828:	fe 4f       	sbci	r31, 0xFE	; 254
    382a:	80 81       	ld	r24, Z
    382c:	91 81       	ldd	r25, Z+1	; 0x01
    382e:	00 97       	sbiw	r24, 0x00	; 0
    3830:	d1 f6       	brne	.-76     	; 0x37e6 <main+0xeb4>
    3832:	27 c0       	rjmp	.+78     	; 0x3882 <main+0xf50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3834:	8e 01       	movw	r16, r28
    3836:	03 5e       	subi	r16, 0xE3	; 227
    3838:	1e 4f       	sbci	r17, 0xFE	; 254
    383a:	fe 01       	movw	r30, r28
    383c:	e1 5e       	subi	r30, 0xE1	; 225
    383e:	fe 4f       	sbci	r31, 0xFE	; 254
    3840:	60 81       	ld	r22, Z
    3842:	71 81       	ldd	r23, Z+1	; 0x01
    3844:	82 81       	ldd	r24, Z+2	; 0x02
    3846:	93 81       	ldd	r25, Z+3	; 0x03
    3848:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    384c:	dc 01       	movw	r26, r24
    384e:	cb 01       	movw	r24, r22
    3850:	f8 01       	movw	r30, r16
    3852:	91 83       	std	Z+1, r25	; 0x01
    3854:	80 83       	st	Z, r24
    3856:	de 01       	movw	r26, r28
    3858:	a7 5e       	subi	r26, 0xE7	; 231
    385a:	be 4f       	sbci	r27, 0xFE	; 254
    385c:	fe 01       	movw	r30, r28
    385e:	e3 5e       	subi	r30, 0xE3	; 227
    3860:	fe 4f       	sbci	r31, 0xFE	; 254
    3862:	80 81       	ld	r24, Z
    3864:	91 81       	ldd	r25, Z+1	; 0x01
    3866:	8d 93       	st	X+, r24
    3868:	9c 93       	st	X, r25
    386a:	fe 01       	movw	r30, r28
    386c:	e7 5e       	subi	r30, 0xE7	; 231
    386e:	fe 4f       	sbci	r31, 0xFE	; 254
    3870:	80 81       	ld	r24, Z
    3872:	91 81       	ldd	r25, Z+1	; 0x01
    3874:	01 97       	sbiw	r24, 0x01	; 1
    3876:	f1 f7       	brne	.-4      	; 0x3874 <main+0xf42>
    3878:	fe 01       	movw	r30, r28
    387a:	e7 5e       	subi	r30, 0xE7	; 231
    387c:	fe 4f       	sbci	r31, 0xFE	; 254
    387e:	91 83       	std	Z+1, r25	; 0x01
    3880:	80 83       	st	Z, r24
			_delay_ms(10);
			HLED_voidLEDOff(LED1);
    3882:	60 91 b8 00 	lds	r22, 0x00B8
    3886:	70 91 b9 00 	lds	r23, 0x00B9
    388a:	80 91 ba 00 	lds	r24, 0x00BA
    388e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <HLED_voidLEDOff>
    3892:	fe 01       	movw	r30, r28
    3894:	eb 5e       	subi	r30, 0xEB	; 235
    3896:	fe 4f       	sbci	r31, 0xFE	; 254
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	a0 e2       	ldi	r26, 0x20	; 32
    389e:	b1 e4       	ldi	r27, 0x41	; 65
    38a0:	80 83       	st	Z, r24
    38a2:	91 83       	std	Z+1, r25	; 0x01
    38a4:	a2 83       	std	Z+2, r26	; 0x02
    38a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a8:	8e 01       	movw	r16, r28
    38aa:	0f 5e       	subi	r16, 0xEF	; 239
    38ac:	1e 4f       	sbci	r17, 0xFE	; 254
    38ae:	fe 01       	movw	r30, r28
    38b0:	eb 5e       	subi	r30, 0xEB	; 235
    38b2:	fe 4f       	sbci	r31, 0xFE	; 254
    38b4:	60 81       	ld	r22, Z
    38b6:	71 81       	ldd	r23, Z+1	; 0x01
    38b8:	82 81       	ldd	r24, Z+2	; 0x02
    38ba:	93 81       	ldd	r25, Z+3	; 0x03
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	4a ef       	ldi	r20, 0xFA	; 250
    38c2:	54 e4       	ldi	r21, 0x44	; 68
    38c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38c8:	dc 01       	movw	r26, r24
    38ca:	cb 01       	movw	r24, r22
    38cc:	f8 01       	movw	r30, r16
    38ce:	80 83       	st	Z, r24
    38d0:	91 83       	std	Z+1, r25	; 0x01
    38d2:	a2 83       	std	Z+2, r26	; 0x02
    38d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38d6:	fe 01       	movw	r30, r28
    38d8:	ef 5e       	subi	r30, 0xEF	; 239
    38da:	fe 4f       	sbci	r31, 0xFE	; 254
    38dc:	60 81       	ld	r22, Z
    38de:	71 81       	ldd	r23, Z+1	; 0x01
    38e0:	82 81       	ldd	r24, Z+2	; 0x02
    38e2:	93 81       	ldd	r25, Z+3	; 0x03
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	40 e8       	ldi	r20, 0x80	; 128
    38ea:	5f e3       	ldi	r21, 0x3F	; 63
    38ec:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    38f0:	88 23       	and	r24, r24
    38f2:	44 f4       	brge	.+16     	; 0x3904 <main+0xfd2>
		__ticks = 1;
    38f4:	fe 01       	movw	r30, r28
    38f6:	e1 5f       	subi	r30, 0xF1	; 241
    38f8:	fe 4f       	sbci	r31, 0xFE	; 254
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	91 83       	std	Z+1, r25	; 0x01
    3900:	80 83       	st	Z, r24
    3902:	64 c0       	rjmp	.+200    	; 0x39cc <main+0x109a>
	else if (__tmp > 65535)
    3904:	fe 01       	movw	r30, r28
    3906:	ef 5e       	subi	r30, 0xEF	; 239
    3908:	fe 4f       	sbci	r31, 0xFE	; 254
    390a:	60 81       	ld	r22, Z
    390c:	71 81       	ldd	r23, Z+1	; 0x01
    390e:	82 81       	ldd	r24, Z+2	; 0x02
    3910:	93 81       	ldd	r25, Z+3	; 0x03
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	3f ef       	ldi	r19, 0xFF	; 255
    3916:	4f e7       	ldi	r20, 0x7F	; 127
    3918:	57 e4       	ldi	r21, 0x47	; 71
    391a:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    391e:	18 16       	cp	r1, r24
    3920:	0c f0       	brlt	.+2      	; 0x3924 <main+0xff2>
    3922:	43 c0       	rjmp	.+134    	; 0x39aa <main+0x1078>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3924:	fe 01       	movw	r30, r28
    3926:	eb 5e       	subi	r30, 0xEB	; 235
    3928:	fe 4f       	sbci	r31, 0xFE	; 254
    392a:	60 81       	ld	r22, Z
    392c:	71 81       	ldd	r23, Z+1	; 0x01
    392e:	82 81       	ldd	r24, Z+2	; 0x02
    3930:	93 81       	ldd	r25, Z+3	; 0x03
    3932:	20 e0       	ldi	r18, 0x00	; 0
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	40 e2       	ldi	r20, 0x20	; 32
    3938:	51 e4       	ldi	r21, 0x41	; 65
    393a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	8e 01       	movw	r16, r28
    3944:	01 5f       	subi	r16, 0xF1	; 241
    3946:	1e 4f       	sbci	r17, 0xFE	; 254
    3948:	bc 01       	movw	r22, r24
    394a:	cd 01       	movw	r24, r26
    394c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	f8 01       	movw	r30, r16
    3956:	91 83       	std	Z+1, r25	; 0x01
    3958:	80 83       	st	Z, r24
    395a:	1f c0       	rjmp	.+62     	; 0x399a <main+0x1068>
    395c:	fe 01       	movw	r30, r28
    395e:	e3 5f       	subi	r30, 0xF3	; 243
    3960:	fe 4f       	sbci	r31, 0xFE	; 254
    3962:	88 ec       	ldi	r24, 0xC8	; 200
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	91 83       	std	Z+1, r25	; 0x01
    3968:	80 83       	st	Z, r24
    396a:	fe 01       	movw	r30, r28
    396c:	e3 5f       	subi	r30, 0xF3	; 243
    396e:	fe 4f       	sbci	r31, 0xFE	; 254
    3970:	80 81       	ld	r24, Z
    3972:	91 81       	ldd	r25, Z+1	; 0x01
    3974:	01 97       	sbiw	r24, 0x01	; 1
    3976:	f1 f7       	brne	.-4      	; 0x3974 <main+0x1042>
    3978:	fe 01       	movw	r30, r28
    397a:	e3 5f       	subi	r30, 0xF3	; 243
    397c:	fe 4f       	sbci	r31, 0xFE	; 254
    397e:	91 83       	std	Z+1, r25	; 0x01
    3980:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3982:	de 01       	movw	r26, r28
    3984:	a1 5f       	subi	r26, 0xF1	; 241
    3986:	be 4f       	sbci	r27, 0xFE	; 254
    3988:	fe 01       	movw	r30, r28
    398a:	e1 5f       	subi	r30, 0xF1	; 241
    398c:	fe 4f       	sbci	r31, 0xFE	; 254
    398e:	80 81       	ld	r24, Z
    3990:	91 81       	ldd	r25, Z+1	; 0x01
    3992:	01 97       	sbiw	r24, 0x01	; 1
    3994:	11 96       	adiw	r26, 0x01	; 1
    3996:	9c 93       	st	X, r25
    3998:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    399a:	fe 01       	movw	r30, r28
    399c:	e1 5f       	subi	r30, 0xF1	; 241
    399e:	fe 4f       	sbci	r31, 0xFE	; 254
    39a0:	80 81       	ld	r24, Z
    39a2:	91 81       	ldd	r25, Z+1	; 0x01
    39a4:	00 97       	sbiw	r24, 0x00	; 0
    39a6:	d1 f6       	brne	.-76     	; 0x395c <main+0x102a>
    39a8:	27 c0       	rjmp	.+78     	; 0x39f8 <main+0x10c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39aa:	8e 01       	movw	r16, r28
    39ac:	01 5f       	subi	r16, 0xF1	; 241
    39ae:	1e 4f       	sbci	r17, 0xFE	; 254
    39b0:	fe 01       	movw	r30, r28
    39b2:	ef 5e       	subi	r30, 0xEF	; 239
    39b4:	fe 4f       	sbci	r31, 0xFE	; 254
    39b6:	60 81       	ld	r22, Z
    39b8:	71 81       	ldd	r23, Z+1	; 0x01
    39ba:	82 81       	ldd	r24, Z+2	; 0x02
    39bc:	93 81       	ldd	r25, Z+3	; 0x03
    39be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	f8 01       	movw	r30, r16
    39c8:	91 83       	std	Z+1, r25	; 0x01
    39ca:	80 83       	st	Z, r24
    39cc:	de 01       	movw	r26, r28
    39ce:	a5 5f       	subi	r26, 0xF5	; 245
    39d0:	be 4f       	sbci	r27, 0xFE	; 254
    39d2:	fe 01       	movw	r30, r28
    39d4:	e1 5f       	subi	r30, 0xF1	; 241
    39d6:	fe 4f       	sbci	r31, 0xFE	; 254
    39d8:	80 81       	ld	r24, Z
    39da:	91 81       	ldd	r25, Z+1	; 0x01
    39dc:	8d 93       	st	X+, r24
    39de:	9c 93       	st	X, r25
    39e0:	fe 01       	movw	r30, r28
    39e2:	e5 5f       	subi	r30, 0xF5	; 245
    39e4:	fe 4f       	sbci	r31, 0xFE	; 254
    39e6:	80 81       	ld	r24, Z
    39e8:	91 81       	ldd	r25, Z+1	; 0x01
    39ea:	01 97       	sbiw	r24, 0x01	; 1
    39ec:	f1 f7       	brne	.-4      	; 0x39ea <main+0x10b8>
    39ee:	fe 01       	movw	r30, r28
    39f0:	e5 5f       	subi	r30, 0xF5	; 245
    39f2:	fe 4f       	sbci	r31, 0xFE	; 254
    39f4:	91 83       	std	Z+1, r25	; 0x01
    39f6:	80 83       	st	Z, r24
			_delay_ms(10);
			HLED_voidLEDOff(LED2);
    39f8:	60 91 bb 00 	lds	r22, 0x00BB
    39fc:	70 91 bc 00 	lds	r23, 0x00BC
    3a00:	80 91 bd 00 	lds	r24, 0x00BD
    3a04:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <HLED_voidLEDOff>
    3a08:	fe 01       	movw	r30, r28
    3a0a:	e9 5f       	subi	r30, 0xF9	; 249
    3a0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a0e:	80 e0       	ldi	r24, 0x00	; 0
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	a0 e2       	ldi	r26, 0x20	; 32
    3a14:	b1 e4       	ldi	r27, 0x41	; 65
    3a16:	80 83       	st	Z, r24
    3a18:	91 83       	std	Z+1, r25	; 0x01
    3a1a:	a2 83       	std	Z+2, r26	; 0x02
    3a1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a1e:	8e 01       	movw	r16, r28
    3a20:	0d 5f       	subi	r16, 0xFD	; 253
    3a22:	1e 4f       	sbci	r17, 0xFE	; 254
    3a24:	fe 01       	movw	r30, r28
    3a26:	e9 5f       	subi	r30, 0xF9	; 249
    3a28:	fe 4f       	sbci	r31, 0xFE	; 254
    3a2a:	60 81       	ld	r22, Z
    3a2c:	71 81       	ldd	r23, Z+1	; 0x01
    3a2e:	82 81       	ldd	r24, Z+2	; 0x02
    3a30:	93 81       	ldd	r25, Z+3	; 0x03
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	4a ef       	ldi	r20, 0xFA	; 250
    3a38:	54 e4       	ldi	r21, 0x44	; 68
    3a3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	f8 01       	movw	r30, r16
    3a44:	80 83       	st	Z, r24
    3a46:	91 83       	std	Z+1, r25	; 0x01
    3a48:	a2 83       	std	Z+2, r26	; 0x02
    3a4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a4c:	fe 01       	movw	r30, r28
    3a4e:	ed 5f       	subi	r30, 0xFD	; 253
    3a50:	fe 4f       	sbci	r31, 0xFE	; 254
    3a52:	60 81       	ld	r22, Z
    3a54:	71 81       	ldd	r23, Z+1	; 0x01
    3a56:	82 81       	ldd	r24, Z+2	; 0x02
    3a58:	93 81       	ldd	r25, Z+3	; 0x03
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	40 e8       	ldi	r20, 0x80	; 128
    3a60:	5f e3       	ldi	r21, 0x3F	; 63
    3a62:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    3a66:	88 23       	and	r24, r24
    3a68:	44 f4       	brge	.+16     	; 0x3a7a <main+0x1148>
		__ticks = 1;
    3a6a:	fe 01       	movw	r30, r28
    3a6c:	ef 5f       	subi	r30, 0xFF	; 255
    3a6e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	91 83       	std	Z+1, r25	; 0x01
    3a76:	80 83       	st	Z, r24
    3a78:	64 c0       	rjmp	.+200    	; 0x3b42 <main+0x1210>
	else if (__tmp > 65535)
    3a7a:	fe 01       	movw	r30, r28
    3a7c:	ed 5f       	subi	r30, 0xFD	; 253
    3a7e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a80:	60 81       	ld	r22, Z
    3a82:	71 81       	ldd	r23, Z+1	; 0x01
    3a84:	82 81       	ldd	r24, Z+2	; 0x02
    3a86:	93 81       	ldd	r25, Z+3	; 0x03
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	3f ef       	ldi	r19, 0xFF	; 255
    3a8c:	4f e7       	ldi	r20, 0x7F	; 127
    3a8e:	57 e4       	ldi	r21, 0x47	; 71
    3a90:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    3a94:	18 16       	cp	r1, r24
    3a96:	0c f0       	brlt	.+2      	; 0x3a9a <main+0x1168>
    3a98:	43 c0       	rjmp	.+134    	; 0x3b20 <main+0x11ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	e9 5f       	subi	r30, 0xF9	; 249
    3a9e:	fe 4f       	sbci	r31, 0xFE	; 254
    3aa0:	60 81       	ld	r22, Z
    3aa2:	71 81       	ldd	r23, Z+1	; 0x01
    3aa4:	82 81       	ldd	r24, Z+2	; 0x02
    3aa6:	93 81       	ldd	r25, Z+3	; 0x03
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	40 e2       	ldi	r20, 0x20	; 32
    3aae:	51 e4       	ldi	r21, 0x41	; 65
    3ab0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	cb 01       	movw	r24, r22
    3ab8:	8e 01       	movw	r16, r28
    3aba:	0f 5f       	subi	r16, 0xFF	; 255
    3abc:	1e 4f       	sbci	r17, 0xFE	; 254
    3abe:	bc 01       	movw	r22, r24
    3ac0:	cd 01       	movw	r24, r26
    3ac2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	cb 01       	movw	r24, r22
    3aca:	f8 01       	movw	r30, r16
    3acc:	91 83       	std	Z+1, r25	; 0x01
    3ace:	80 83       	st	Z, r24
    3ad0:	1f c0       	rjmp	.+62     	; 0x3b10 <main+0x11de>
    3ad2:	fe 01       	movw	r30, r28
    3ad4:	e1 50       	subi	r30, 0x01	; 1
    3ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad8:	88 ec       	ldi	r24, 0xC8	; 200
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	91 83       	std	Z+1, r25	; 0x01
    3ade:	80 83       	st	Z, r24
    3ae0:	fe 01       	movw	r30, r28
    3ae2:	e1 50       	subi	r30, 0x01	; 1
    3ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae6:	80 81       	ld	r24, Z
    3ae8:	91 81       	ldd	r25, Z+1	; 0x01
    3aea:	01 97       	sbiw	r24, 0x01	; 1
    3aec:	f1 f7       	brne	.-4      	; 0x3aea <main+0x11b8>
    3aee:	fe 01       	movw	r30, r28
    3af0:	e1 50       	subi	r30, 0x01	; 1
    3af2:	ff 4f       	sbci	r31, 0xFF	; 255
    3af4:	91 83       	std	Z+1, r25	; 0x01
    3af6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3af8:	de 01       	movw	r26, r28
    3afa:	af 5f       	subi	r26, 0xFF	; 255
    3afc:	be 4f       	sbci	r27, 0xFE	; 254
    3afe:	fe 01       	movw	r30, r28
    3b00:	ef 5f       	subi	r30, 0xFF	; 255
    3b02:	fe 4f       	sbci	r31, 0xFE	; 254
    3b04:	80 81       	ld	r24, Z
    3b06:	91 81       	ldd	r25, Z+1	; 0x01
    3b08:	01 97       	sbiw	r24, 0x01	; 1
    3b0a:	11 96       	adiw	r26, 0x01	; 1
    3b0c:	9c 93       	st	X, r25
    3b0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b10:	fe 01       	movw	r30, r28
    3b12:	ef 5f       	subi	r30, 0xFF	; 255
    3b14:	fe 4f       	sbci	r31, 0xFE	; 254
    3b16:	80 81       	ld	r24, Z
    3b18:	91 81       	ldd	r25, Z+1	; 0x01
    3b1a:	00 97       	sbiw	r24, 0x00	; 0
    3b1c:	d1 f6       	brne	.-76     	; 0x3ad2 <main+0x11a0>
    3b1e:	27 c0       	rjmp	.+78     	; 0x3b6e <main+0x123c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b20:	8e 01       	movw	r16, r28
    3b22:	0f 5f       	subi	r16, 0xFF	; 255
    3b24:	1e 4f       	sbci	r17, 0xFE	; 254
    3b26:	fe 01       	movw	r30, r28
    3b28:	ed 5f       	subi	r30, 0xFD	; 253
    3b2a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b2c:	60 81       	ld	r22, Z
    3b2e:	71 81       	ldd	r23, Z+1	; 0x01
    3b30:	82 81       	ldd	r24, Z+2	; 0x02
    3b32:	93 81       	ldd	r25, Z+3	; 0x03
    3b34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b38:	dc 01       	movw	r26, r24
    3b3a:	cb 01       	movw	r24, r22
    3b3c:	f8 01       	movw	r30, r16
    3b3e:	91 83       	std	Z+1, r25	; 0x01
    3b40:	80 83       	st	Z, r24
    3b42:	de 01       	movw	r26, r28
    3b44:	a3 50       	subi	r26, 0x03	; 3
    3b46:	bf 4f       	sbci	r27, 0xFF	; 255
    3b48:	fe 01       	movw	r30, r28
    3b4a:	ef 5f       	subi	r30, 0xFF	; 255
    3b4c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b4e:	80 81       	ld	r24, Z
    3b50:	91 81       	ldd	r25, Z+1	; 0x01
    3b52:	8d 93       	st	X+, r24
    3b54:	9c 93       	st	X, r25
    3b56:	fe 01       	movw	r30, r28
    3b58:	e3 50       	subi	r30, 0x03	; 3
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	80 81       	ld	r24, Z
    3b5e:	91 81       	ldd	r25, Z+1	; 0x01
    3b60:	01 97       	sbiw	r24, 0x01	; 1
    3b62:	f1 f7       	brne	.-4      	; 0x3b60 <main+0x122e>
    3b64:	fe 01       	movw	r30, r28
    3b66:	e3 50       	subi	r30, 0x03	; 3
    3b68:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6a:	91 83       	std	Z+1, r25	; 0x01
    3b6c:	80 83       	st	Z, r24
			_delay_ms(10);
			HLED_voidLEDOff(LED3);
    3b6e:	60 91 be 00 	lds	r22, 0x00BE
    3b72:	70 91 bf 00 	lds	r23, 0x00BF
    3b76:	80 91 c0 00 	lds	r24, 0x00C0
    3b7a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <HLED_voidLEDOff>
    3b7e:	fe 01       	movw	r30, r28
    3b80:	e7 50       	subi	r30, 0x07	; 7
    3b82:	ff 4f       	sbci	r31, 0xFF	; 255
    3b84:	80 e0       	ldi	r24, 0x00	; 0
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	a0 e2       	ldi	r26, 0x20	; 32
    3b8a:	b1 e4       	ldi	r27, 0x41	; 65
    3b8c:	80 83       	st	Z, r24
    3b8e:	91 83       	std	Z+1, r25	; 0x01
    3b90:	a2 83       	std	Z+2, r26	; 0x02
    3b92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b94:	8e 01       	movw	r16, r28
    3b96:	0b 50       	subi	r16, 0x0B	; 11
    3b98:	1f 4f       	sbci	r17, 0xFF	; 255
    3b9a:	fe 01       	movw	r30, r28
    3b9c:	e7 50       	subi	r30, 0x07	; 7
    3b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba0:	60 81       	ld	r22, Z
    3ba2:	71 81       	ldd	r23, Z+1	; 0x01
    3ba4:	82 81       	ldd	r24, Z+2	; 0x02
    3ba6:	93 81       	ldd	r25, Z+3	; 0x03
    3ba8:	20 e0       	ldi	r18, 0x00	; 0
    3baa:	30 e0       	ldi	r19, 0x00	; 0
    3bac:	4a ef       	ldi	r20, 0xFA	; 250
    3bae:	54 e4       	ldi	r21, 0x44	; 68
    3bb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3bb4:	dc 01       	movw	r26, r24
    3bb6:	cb 01       	movw	r24, r22
    3bb8:	f8 01       	movw	r30, r16
    3bba:	80 83       	st	Z, r24
    3bbc:	91 83       	std	Z+1, r25	; 0x01
    3bbe:	a2 83       	std	Z+2, r26	; 0x02
    3bc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bc2:	fe 01       	movw	r30, r28
    3bc4:	eb 50       	subi	r30, 0x0B	; 11
    3bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc8:	60 81       	ld	r22, Z
    3bca:	71 81       	ldd	r23, Z+1	; 0x01
    3bcc:	82 81       	ldd	r24, Z+2	; 0x02
    3bce:	93 81       	ldd	r25, Z+3	; 0x03
    3bd0:	20 e0       	ldi	r18, 0x00	; 0
    3bd2:	30 e0       	ldi	r19, 0x00	; 0
    3bd4:	40 e8       	ldi	r20, 0x80	; 128
    3bd6:	5f e3       	ldi	r21, 0x3F	; 63
    3bd8:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    3bdc:	88 23       	and	r24, r24
    3bde:	44 f4       	brge	.+16     	; 0x3bf0 <main+0x12be>
		__ticks = 1;
    3be0:	fe 01       	movw	r30, r28
    3be2:	ed 50       	subi	r30, 0x0D	; 13
    3be4:	ff 4f       	sbci	r31, 0xFF	; 255
    3be6:	81 e0       	ldi	r24, 0x01	; 1
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	91 83       	std	Z+1, r25	; 0x01
    3bec:	80 83       	st	Z, r24
    3bee:	64 c0       	rjmp	.+200    	; 0x3cb8 <main+0x1386>
	else if (__tmp > 65535)
    3bf0:	fe 01       	movw	r30, r28
    3bf2:	eb 50       	subi	r30, 0x0B	; 11
    3bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf6:	60 81       	ld	r22, Z
    3bf8:	71 81       	ldd	r23, Z+1	; 0x01
    3bfa:	82 81       	ldd	r24, Z+2	; 0x02
    3bfc:	93 81       	ldd	r25, Z+3	; 0x03
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	3f ef       	ldi	r19, 0xFF	; 255
    3c02:	4f e7       	ldi	r20, 0x7F	; 127
    3c04:	57 e4       	ldi	r21, 0x47	; 71
    3c06:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    3c0a:	18 16       	cp	r1, r24
    3c0c:	0c f0       	brlt	.+2      	; 0x3c10 <main+0x12de>
    3c0e:	43 c0       	rjmp	.+134    	; 0x3c96 <main+0x1364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c10:	fe 01       	movw	r30, r28
    3c12:	e7 50       	subi	r30, 0x07	; 7
    3c14:	ff 4f       	sbci	r31, 0xFF	; 255
    3c16:	60 81       	ld	r22, Z
    3c18:	71 81       	ldd	r23, Z+1	; 0x01
    3c1a:	82 81       	ldd	r24, Z+2	; 0x02
    3c1c:	93 81       	ldd	r25, Z+3	; 0x03
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	40 e2       	ldi	r20, 0x20	; 32
    3c24:	51 e4       	ldi	r21, 0x41	; 65
    3c26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c2a:	dc 01       	movw	r26, r24
    3c2c:	cb 01       	movw	r24, r22
    3c2e:	8e 01       	movw	r16, r28
    3c30:	0d 50       	subi	r16, 0x0D	; 13
    3c32:	1f 4f       	sbci	r17, 0xFF	; 255
    3c34:	bc 01       	movw	r22, r24
    3c36:	cd 01       	movw	r24, r26
    3c38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c3c:	dc 01       	movw	r26, r24
    3c3e:	cb 01       	movw	r24, r22
    3c40:	f8 01       	movw	r30, r16
    3c42:	91 83       	std	Z+1, r25	; 0x01
    3c44:	80 83       	st	Z, r24
    3c46:	1f c0       	rjmp	.+62     	; 0x3c86 <main+0x1354>
    3c48:	fe 01       	movw	r30, r28
    3c4a:	ef 50       	subi	r30, 0x0F	; 15
    3c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4e:	88 ec       	ldi	r24, 0xC8	; 200
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	91 83       	std	Z+1, r25	; 0x01
    3c54:	80 83       	st	Z, r24
    3c56:	fe 01       	movw	r30, r28
    3c58:	ef 50       	subi	r30, 0x0F	; 15
    3c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5c:	80 81       	ld	r24, Z
    3c5e:	91 81       	ldd	r25, Z+1	; 0x01
    3c60:	01 97       	sbiw	r24, 0x01	; 1
    3c62:	f1 f7       	brne	.-4      	; 0x3c60 <main+0x132e>
    3c64:	fe 01       	movw	r30, r28
    3c66:	ef 50       	subi	r30, 0x0F	; 15
    3c68:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6a:	91 83       	std	Z+1, r25	; 0x01
    3c6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c6e:	de 01       	movw	r26, r28
    3c70:	ad 50       	subi	r26, 0x0D	; 13
    3c72:	bf 4f       	sbci	r27, 0xFF	; 255
    3c74:	fe 01       	movw	r30, r28
    3c76:	ed 50       	subi	r30, 0x0D	; 13
    3c78:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7a:	80 81       	ld	r24, Z
    3c7c:	91 81       	ldd	r25, Z+1	; 0x01
    3c7e:	01 97       	sbiw	r24, 0x01	; 1
    3c80:	11 96       	adiw	r26, 0x01	; 1
    3c82:	9c 93       	st	X, r25
    3c84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c86:	fe 01       	movw	r30, r28
    3c88:	ed 50       	subi	r30, 0x0D	; 13
    3c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8c:	80 81       	ld	r24, Z
    3c8e:	91 81       	ldd	r25, Z+1	; 0x01
    3c90:	00 97       	sbiw	r24, 0x00	; 0
    3c92:	d1 f6       	brne	.-76     	; 0x3c48 <main+0x1316>
    3c94:	27 c0       	rjmp	.+78     	; 0x3ce4 <main+0x13b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c96:	8e 01       	movw	r16, r28
    3c98:	0d 50       	subi	r16, 0x0D	; 13
    3c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c9c:	fe 01       	movw	r30, r28
    3c9e:	eb 50       	subi	r30, 0x0B	; 11
    3ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca2:	60 81       	ld	r22, Z
    3ca4:	71 81       	ldd	r23, Z+1	; 0x01
    3ca6:	82 81       	ldd	r24, Z+2	; 0x02
    3ca8:	93 81       	ldd	r25, Z+3	; 0x03
    3caa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cae:	dc 01       	movw	r26, r24
    3cb0:	cb 01       	movw	r24, r22
    3cb2:	f8 01       	movw	r30, r16
    3cb4:	91 83       	std	Z+1, r25	; 0x01
    3cb6:	80 83       	st	Z, r24
    3cb8:	de 01       	movw	r26, r28
    3cba:	a1 51       	subi	r26, 0x11	; 17
    3cbc:	bf 4f       	sbci	r27, 0xFF	; 255
    3cbe:	fe 01       	movw	r30, r28
    3cc0:	ed 50       	subi	r30, 0x0D	; 13
    3cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc4:	80 81       	ld	r24, Z
    3cc6:	91 81       	ldd	r25, Z+1	; 0x01
    3cc8:	8d 93       	st	X+, r24
    3cca:	9c 93       	st	X, r25
    3ccc:	fe 01       	movw	r30, r28
    3cce:	e1 51       	subi	r30, 0x11	; 17
    3cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd2:	80 81       	ld	r24, Z
    3cd4:	91 81       	ldd	r25, Z+1	; 0x01
    3cd6:	01 97       	sbiw	r24, 0x01	; 1
    3cd8:	f1 f7       	brne	.-4      	; 0x3cd6 <main+0x13a4>
    3cda:	fe 01       	movw	r30, r28
    3cdc:	e1 51       	subi	r30, 0x11	; 17
    3cde:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce0:	91 83       	std	Z+1, r25	; 0x01
    3ce2:	80 83       	st	Z, r24
			_delay_ms(10);
			HLED_voidLEDOff(LED4);
    3ce4:	60 91 c1 00 	lds	r22, 0x00C1
    3ce8:	70 91 c2 00 	lds	r23, 0x00C2
    3cec:	80 91 c3 00 	lds	r24, 0x00C3
    3cf0:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <HLED_voidLEDOff>
    3cf4:	fe 01       	movw	r30, r28
    3cf6:	e5 51       	subi	r30, 0x15	; 21
    3cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfa:	80 e0       	ldi	r24, 0x00	; 0
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	a0 e2       	ldi	r26, 0x20	; 32
    3d00:	b1 e4       	ldi	r27, 0x41	; 65
    3d02:	80 83       	st	Z, r24
    3d04:	91 83       	std	Z+1, r25	; 0x01
    3d06:	a2 83       	std	Z+2, r26	; 0x02
    3d08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d0a:	8e 01       	movw	r16, r28
    3d0c:	09 51       	subi	r16, 0x19	; 25
    3d0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d10:	fe 01       	movw	r30, r28
    3d12:	e5 51       	subi	r30, 0x15	; 21
    3d14:	ff 4f       	sbci	r31, 0xFF	; 255
    3d16:	60 81       	ld	r22, Z
    3d18:	71 81       	ldd	r23, Z+1	; 0x01
    3d1a:	82 81       	ldd	r24, Z+2	; 0x02
    3d1c:	93 81       	ldd	r25, Z+3	; 0x03
    3d1e:	20 e0       	ldi	r18, 0x00	; 0
    3d20:	30 e0       	ldi	r19, 0x00	; 0
    3d22:	4a ef       	ldi	r20, 0xFA	; 250
    3d24:	54 e4       	ldi	r21, 0x44	; 68
    3d26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d2a:	dc 01       	movw	r26, r24
    3d2c:	cb 01       	movw	r24, r22
    3d2e:	f8 01       	movw	r30, r16
    3d30:	80 83       	st	Z, r24
    3d32:	91 83       	std	Z+1, r25	; 0x01
    3d34:	a2 83       	std	Z+2, r26	; 0x02
    3d36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d38:	fe 01       	movw	r30, r28
    3d3a:	e9 51       	subi	r30, 0x19	; 25
    3d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3e:	60 81       	ld	r22, Z
    3d40:	71 81       	ldd	r23, Z+1	; 0x01
    3d42:	82 81       	ldd	r24, Z+2	; 0x02
    3d44:	93 81       	ldd	r25, Z+3	; 0x03
    3d46:	20 e0       	ldi	r18, 0x00	; 0
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	40 e8       	ldi	r20, 0x80	; 128
    3d4c:	5f e3       	ldi	r21, 0x3F	; 63
    3d4e:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    3d52:	88 23       	and	r24, r24
    3d54:	44 f4       	brge	.+16     	; 0x3d66 <main+0x1434>
		__ticks = 1;
    3d56:	fe 01       	movw	r30, r28
    3d58:	eb 51       	subi	r30, 0x1B	; 27
    3d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5c:	81 e0       	ldi	r24, 0x01	; 1
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	91 83       	std	Z+1, r25	; 0x01
    3d62:	80 83       	st	Z, r24
    3d64:	64 c0       	rjmp	.+200    	; 0x3e2e <main+0x14fc>
	else if (__tmp > 65535)
    3d66:	fe 01       	movw	r30, r28
    3d68:	e9 51       	subi	r30, 0x19	; 25
    3d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6c:	60 81       	ld	r22, Z
    3d6e:	71 81       	ldd	r23, Z+1	; 0x01
    3d70:	82 81       	ldd	r24, Z+2	; 0x02
    3d72:	93 81       	ldd	r25, Z+3	; 0x03
    3d74:	20 e0       	ldi	r18, 0x00	; 0
    3d76:	3f ef       	ldi	r19, 0xFF	; 255
    3d78:	4f e7       	ldi	r20, 0x7F	; 127
    3d7a:	57 e4       	ldi	r21, 0x47	; 71
    3d7c:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    3d80:	18 16       	cp	r1, r24
    3d82:	0c f0       	brlt	.+2      	; 0x3d86 <main+0x1454>
    3d84:	43 c0       	rjmp	.+134    	; 0x3e0c <main+0x14da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d86:	fe 01       	movw	r30, r28
    3d88:	e5 51       	subi	r30, 0x15	; 21
    3d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8c:	60 81       	ld	r22, Z
    3d8e:	71 81       	ldd	r23, Z+1	; 0x01
    3d90:	82 81       	ldd	r24, Z+2	; 0x02
    3d92:	93 81       	ldd	r25, Z+3	; 0x03
    3d94:	20 e0       	ldi	r18, 0x00	; 0
    3d96:	30 e0       	ldi	r19, 0x00	; 0
    3d98:	40 e2       	ldi	r20, 0x20	; 32
    3d9a:	51 e4       	ldi	r21, 0x41	; 65
    3d9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3da0:	dc 01       	movw	r26, r24
    3da2:	cb 01       	movw	r24, r22
    3da4:	8e 01       	movw	r16, r28
    3da6:	0b 51       	subi	r16, 0x1B	; 27
    3da8:	1f 4f       	sbci	r17, 0xFF	; 255
    3daa:	bc 01       	movw	r22, r24
    3dac:	cd 01       	movw	r24, r26
    3dae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3db2:	dc 01       	movw	r26, r24
    3db4:	cb 01       	movw	r24, r22
    3db6:	f8 01       	movw	r30, r16
    3db8:	91 83       	std	Z+1, r25	; 0x01
    3dba:	80 83       	st	Z, r24
    3dbc:	1f c0       	rjmp	.+62     	; 0x3dfc <main+0x14ca>
    3dbe:	fe 01       	movw	r30, r28
    3dc0:	ed 51       	subi	r30, 0x1D	; 29
    3dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc4:	88 ec       	ldi	r24, 0xC8	; 200
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	91 83       	std	Z+1, r25	; 0x01
    3dca:	80 83       	st	Z, r24
    3dcc:	fe 01       	movw	r30, r28
    3dce:	ed 51       	subi	r30, 0x1D	; 29
    3dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd2:	80 81       	ld	r24, Z
    3dd4:	91 81       	ldd	r25, Z+1	; 0x01
    3dd6:	01 97       	sbiw	r24, 0x01	; 1
    3dd8:	f1 f7       	brne	.-4      	; 0x3dd6 <main+0x14a4>
    3dda:	fe 01       	movw	r30, r28
    3ddc:	ed 51       	subi	r30, 0x1D	; 29
    3dde:	ff 4f       	sbci	r31, 0xFF	; 255
    3de0:	91 83       	std	Z+1, r25	; 0x01
    3de2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3de4:	de 01       	movw	r26, r28
    3de6:	ab 51       	subi	r26, 0x1B	; 27
    3de8:	bf 4f       	sbci	r27, 0xFF	; 255
    3dea:	fe 01       	movw	r30, r28
    3dec:	eb 51       	subi	r30, 0x1B	; 27
    3dee:	ff 4f       	sbci	r31, 0xFF	; 255
    3df0:	80 81       	ld	r24, Z
    3df2:	91 81       	ldd	r25, Z+1	; 0x01
    3df4:	01 97       	sbiw	r24, 0x01	; 1
    3df6:	11 96       	adiw	r26, 0x01	; 1
    3df8:	9c 93       	st	X, r25
    3dfa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dfc:	fe 01       	movw	r30, r28
    3dfe:	eb 51       	subi	r30, 0x1B	; 27
    3e00:	ff 4f       	sbci	r31, 0xFF	; 255
    3e02:	80 81       	ld	r24, Z
    3e04:	91 81       	ldd	r25, Z+1	; 0x01
    3e06:	00 97       	sbiw	r24, 0x00	; 0
    3e08:	d1 f6       	brne	.-76     	; 0x3dbe <main+0x148c>
    3e0a:	28 c0       	rjmp	.+80     	; 0x3e5c <main+0x152a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e0c:	8e 01       	movw	r16, r28
    3e0e:	0b 51       	subi	r16, 0x1B	; 27
    3e10:	1f 4f       	sbci	r17, 0xFF	; 255
    3e12:	fe 01       	movw	r30, r28
    3e14:	e9 51       	subi	r30, 0x19	; 25
    3e16:	ff 4f       	sbci	r31, 0xFF	; 255
    3e18:	60 81       	ld	r22, Z
    3e1a:	71 81       	ldd	r23, Z+1	; 0x01
    3e1c:	82 81       	ldd	r24, Z+2	; 0x02
    3e1e:	93 81       	ldd	r25, Z+3	; 0x03
    3e20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e24:	dc 01       	movw	r26, r24
    3e26:	cb 01       	movw	r24, r22
    3e28:	f8 01       	movw	r30, r16
    3e2a:	91 83       	std	Z+1, r25	; 0x01
    3e2c:	80 83       	st	Z, r24
    3e2e:	de 01       	movw	r26, r28
    3e30:	af 51       	subi	r26, 0x1F	; 31
    3e32:	bf 4f       	sbci	r27, 0xFF	; 255
    3e34:	fe 01       	movw	r30, r28
    3e36:	eb 51       	subi	r30, 0x1B	; 27
    3e38:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3a:	80 81       	ld	r24, Z
    3e3c:	91 81       	ldd	r25, Z+1	; 0x01
    3e3e:	11 96       	adiw	r26, 0x01	; 1
    3e40:	9c 93       	st	X, r25
    3e42:	8e 93       	st	-X, r24
    3e44:	fe 01       	movw	r30, r28
    3e46:	ef 51       	subi	r30, 0x1F	; 31
    3e48:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4a:	80 81       	ld	r24, Z
    3e4c:	91 81       	ldd	r25, Z+1	; 0x01
    3e4e:	01 97       	sbiw	r24, 0x01	; 1
    3e50:	f1 f7       	brne	.-4      	; 0x3e4e <main+0x151c>
    3e52:	fe 01       	movw	r30, r28
    3e54:	ef 51       	subi	r30, 0x1F	; 31
    3e56:	ff 4f       	sbci	r31, 0xFF	; 255
    3e58:	91 83       	std	Z+1, r25	; 0x01
    3e5a:	80 83       	st	Z, r24
			_delay_ms(10);

		}

		if(keyPressed=='3')
    3e5c:	fe 01       	movw	r30, r28
    3e5e:	eb 55       	subi	r30, 0x5B	; 91
    3e60:	fe 4f       	sbci	r31, 0xFE	; 254
    3e62:	80 81       	ld	r24, Z
    3e64:	83 33       	cpi	r24, 0x33	; 51
    3e66:	09 f0       	breq	.+2      	; 0x3e6a <main+0x1538>
    3e68:	d9 c5       	rjmp	.+2994   	; 0x4a1c <main+0x20ea>
		{
			HLED_voidLEDOn(LED1);
    3e6a:	60 91 b8 00 	lds	r22, 0x00B8
    3e6e:	70 91 b9 00 	lds	r23, 0x00B9
    3e72:	80 91 ba 00 	lds	r24, 0x00BA
    3e76:	0e 94 cb 0b 	call	0x1796	; 0x1796 <HLED_voidLEDOn>
    3e7a:	fe 01       	movw	r30, r28
    3e7c:	e3 52       	subi	r30, 0x23	; 35
    3e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e80:	80 e0       	ldi	r24, 0x00	; 0
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	a8 e4       	ldi	r26, 0x48	; 72
    3e86:	b2 e4       	ldi	r27, 0x42	; 66
    3e88:	80 83       	st	Z, r24
    3e8a:	91 83       	std	Z+1, r25	; 0x01
    3e8c:	a2 83       	std	Z+2, r26	; 0x02
    3e8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e90:	8e 01       	movw	r16, r28
    3e92:	07 52       	subi	r16, 0x27	; 39
    3e94:	1f 4f       	sbci	r17, 0xFF	; 255
    3e96:	fe 01       	movw	r30, r28
    3e98:	e3 52       	subi	r30, 0x23	; 35
    3e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9c:	60 81       	ld	r22, Z
    3e9e:	71 81       	ldd	r23, Z+1	; 0x01
    3ea0:	82 81       	ldd	r24, Z+2	; 0x02
    3ea2:	93 81       	ldd	r25, Z+3	; 0x03
    3ea4:	20 e0       	ldi	r18, 0x00	; 0
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	4a ef       	ldi	r20, 0xFA	; 250
    3eaa:	54 e4       	ldi	r21, 0x44	; 68
    3eac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3eb0:	dc 01       	movw	r26, r24
    3eb2:	cb 01       	movw	r24, r22
    3eb4:	f8 01       	movw	r30, r16
    3eb6:	80 83       	st	Z, r24
    3eb8:	91 83       	std	Z+1, r25	; 0x01
    3eba:	a2 83       	std	Z+2, r26	; 0x02
    3ebc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ebe:	fe 01       	movw	r30, r28
    3ec0:	e7 52       	subi	r30, 0x27	; 39
    3ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec4:	60 81       	ld	r22, Z
    3ec6:	71 81       	ldd	r23, Z+1	; 0x01
    3ec8:	82 81       	ldd	r24, Z+2	; 0x02
    3eca:	93 81       	ldd	r25, Z+3	; 0x03
    3ecc:	20 e0       	ldi	r18, 0x00	; 0
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	40 e8       	ldi	r20, 0x80	; 128
    3ed2:	5f e3       	ldi	r21, 0x3F	; 63
    3ed4:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    3ed8:	88 23       	and	r24, r24
    3eda:	44 f4       	brge	.+16     	; 0x3eec <main+0x15ba>
		__ticks = 1;
    3edc:	fe 01       	movw	r30, r28
    3ede:	e9 52       	subi	r30, 0x29	; 41
    3ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee2:	81 e0       	ldi	r24, 0x01	; 1
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	91 83       	std	Z+1, r25	; 0x01
    3ee8:	80 83       	st	Z, r24
    3eea:	64 c0       	rjmp	.+200    	; 0x3fb4 <main+0x1682>
	else if (__tmp > 65535)
    3eec:	fe 01       	movw	r30, r28
    3eee:	e7 52       	subi	r30, 0x27	; 39
    3ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef2:	60 81       	ld	r22, Z
    3ef4:	71 81       	ldd	r23, Z+1	; 0x01
    3ef6:	82 81       	ldd	r24, Z+2	; 0x02
    3ef8:	93 81       	ldd	r25, Z+3	; 0x03
    3efa:	20 e0       	ldi	r18, 0x00	; 0
    3efc:	3f ef       	ldi	r19, 0xFF	; 255
    3efe:	4f e7       	ldi	r20, 0x7F	; 127
    3f00:	57 e4       	ldi	r21, 0x47	; 71
    3f02:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    3f06:	18 16       	cp	r1, r24
    3f08:	0c f0       	brlt	.+2      	; 0x3f0c <main+0x15da>
    3f0a:	43 c0       	rjmp	.+134    	; 0x3f92 <main+0x1660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f0c:	fe 01       	movw	r30, r28
    3f0e:	e3 52       	subi	r30, 0x23	; 35
    3f10:	ff 4f       	sbci	r31, 0xFF	; 255
    3f12:	60 81       	ld	r22, Z
    3f14:	71 81       	ldd	r23, Z+1	; 0x01
    3f16:	82 81       	ldd	r24, Z+2	; 0x02
    3f18:	93 81       	ldd	r25, Z+3	; 0x03
    3f1a:	20 e0       	ldi	r18, 0x00	; 0
    3f1c:	30 e0       	ldi	r19, 0x00	; 0
    3f1e:	40 e2       	ldi	r20, 0x20	; 32
    3f20:	51 e4       	ldi	r21, 0x41	; 65
    3f22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f26:	dc 01       	movw	r26, r24
    3f28:	cb 01       	movw	r24, r22
    3f2a:	8e 01       	movw	r16, r28
    3f2c:	09 52       	subi	r16, 0x29	; 41
    3f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f30:	bc 01       	movw	r22, r24
    3f32:	cd 01       	movw	r24, r26
    3f34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f38:	dc 01       	movw	r26, r24
    3f3a:	cb 01       	movw	r24, r22
    3f3c:	f8 01       	movw	r30, r16
    3f3e:	91 83       	std	Z+1, r25	; 0x01
    3f40:	80 83       	st	Z, r24
    3f42:	1f c0       	rjmp	.+62     	; 0x3f82 <main+0x1650>
    3f44:	fe 01       	movw	r30, r28
    3f46:	eb 52       	subi	r30, 0x2B	; 43
    3f48:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4a:	88 ec       	ldi	r24, 0xC8	; 200
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	91 83       	std	Z+1, r25	; 0x01
    3f50:	80 83       	st	Z, r24
    3f52:	fe 01       	movw	r30, r28
    3f54:	eb 52       	subi	r30, 0x2B	; 43
    3f56:	ff 4f       	sbci	r31, 0xFF	; 255
    3f58:	80 81       	ld	r24, Z
    3f5a:	91 81       	ldd	r25, Z+1	; 0x01
    3f5c:	01 97       	sbiw	r24, 0x01	; 1
    3f5e:	f1 f7       	brne	.-4      	; 0x3f5c <main+0x162a>
    3f60:	fe 01       	movw	r30, r28
    3f62:	eb 52       	subi	r30, 0x2B	; 43
    3f64:	ff 4f       	sbci	r31, 0xFF	; 255
    3f66:	91 83       	std	Z+1, r25	; 0x01
    3f68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f6a:	de 01       	movw	r26, r28
    3f6c:	a9 52       	subi	r26, 0x29	; 41
    3f6e:	bf 4f       	sbci	r27, 0xFF	; 255
    3f70:	fe 01       	movw	r30, r28
    3f72:	e9 52       	subi	r30, 0x29	; 41
    3f74:	ff 4f       	sbci	r31, 0xFF	; 255
    3f76:	80 81       	ld	r24, Z
    3f78:	91 81       	ldd	r25, Z+1	; 0x01
    3f7a:	01 97       	sbiw	r24, 0x01	; 1
    3f7c:	11 96       	adiw	r26, 0x01	; 1
    3f7e:	9c 93       	st	X, r25
    3f80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f82:	fe 01       	movw	r30, r28
    3f84:	e9 52       	subi	r30, 0x29	; 41
    3f86:	ff 4f       	sbci	r31, 0xFF	; 255
    3f88:	80 81       	ld	r24, Z
    3f8a:	91 81       	ldd	r25, Z+1	; 0x01
    3f8c:	00 97       	sbiw	r24, 0x00	; 0
    3f8e:	d1 f6       	brne	.-76     	; 0x3f44 <main+0x1612>
    3f90:	27 c0       	rjmp	.+78     	; 0x3fe0 <main+0x16ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f92:	8e 01       	movw	r16, r28
    3f94:	09 52       	subi	r16, 0x29	; 41
    3f96:	1f 4f       	sbci	r17, 0xFF	; 255
    3f98:	fe 01       	movw	r30, r28
    3f9a:	e7 52       	subi	r30, 0x27	; 39
    3f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9e:	60 81       	ld	r22, Z
    3fa0:	71 81       	ldd	r23, Z+1	; 0x01
    3fa2:	82 81       	ldd	r24, Z+2	; 0x02
    3fa4:	93 81       	ldd	r25, Z+3	; 0x03
    3fa6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3faa:	dc 01       	movw	r26, r24
    3fac:	cb 01       	movw	r24, r22
    3fae:	f8 01       	movw	r30, r16
    3fb0:	91 83       	std	Z+1, r25	; 0x01
    3fb2:	80 83       	st	Z, r24
    3fb4:	de 01       	movw	r26, r28
    3fb6:	ad 52       	subi	r26, 0x2D	; 45
    3fb8:	bf 4f       	sbci	r27, 0xFF	; 255
    3fba:	fe 01       	movw	r30, r28
    3fbc:	e9 52       	subi	r30, 0x29	; 41
    3fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc0:	80 81       	ld	r24, Z
    3fc2:	91 81       	ldd	r25, Z+1	; 0x01
    3fc4:	8d 93       	st	X+, r24
    3fc6:	9c 93       	st	X, r25
    3fc8:	fe 01       	movw	r30, r28
    3fca:	ed 52       	subi	r30, 0x2D	; 45
    3fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fce:	80 81       	ld	r24, Z
    3fd0:	91 81       	ldd	r25, Z+1	; 0x01
    3fd2:	01 97       	sbiw	r24, 0x01	; 1
    3fd4:	f1 f7       	brne	.-4      	; 0x3fd2 <main+0x16a0>
    3fd6:	fe 01       	movw	r30, r28
    3fd8:	ed 52       	subi	r30, 0x2D	; 45
    3fda:	ff 4f       	sbci	r31, 0xFF	; 255
    3fdc:	91 83       	std	Z+1, r25	; 0x01
    3fde:	80 83       	st	Z, r24
			_delay_ms(50);
			HLED_voidLEDOn(LED2);
    3fe0:	60 91 bb 00 	lds	r22, 0x00BB
    3fe4:	70 91 bc 00 	lds	r23, 0x00BC
    3fe8:	80 91 bd 00 	lds	r24, 0x00BD
    3fec:	0e 94 cb 0b 	call	0x1796	; 0x1796 <HLED_voidLEDOn>
    3ff0:	fe 01       	movw	r30, r28
    3ff2:	e1 53       	subi	r30, 0x31	; 49
    3ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff6:	80 e0       	ldi	r24, 0x00	; 0
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	a8 e4       	ldi	r26, 0x48	; 72
    3ffc:	b2 e4       	ldi	r27, 0x42	; 66
    3ffe:	80 83       	st	Z, r24
    4000:	91 83       	std	Z+1, r25	; 0x01
    4002:	a2 83       	std	Z+2, r26	; 0x02
    4004:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4006:	8e 01       	movw	r16, r28
    4008:	05 53       	subi	r16, 0x35	; 53
    400a:	1f 4f       	sbci	r17, 0xFF	; 255
    400c:	fe 01       	movw	r30, r28
    400e:	e1 53       	subi	r30, 0x31	; 49
    4010:	ff 4f       	sbci	r31, 0xFF	; 255
    4012:	60 81       	ld	r22, Z
    4014:	71 81       	ldd	r23, Z+1	; 0x01
    4016:	82 81       	ldd	r24, Z+2	; 0x02
    4018:	93 81       	ldd	r25, Z+3	; 0x03
    401a:	20 e0       	ldi	r18, 0x00	; 0
    401c:	30 e0       	ldi	r19, 0x00	; 0
    401e:	4a ef       	ldi	r20, 0xFA	; 250
    4020:	54 e4       	ldi	r21, 0x44	; 68
    4022:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4026:	dc 01       	movw	r26, r24
    4028:	cb 01       	movw	r24, r22
    402a:	f8 01       	movw	r30, r16
    402c:	80 83       	st	Z, r24
    402e:	91 83       	std	Z+1, r25	; 0x01
    4030:	a2 83       	std	Z+2, r26	; 0x02
    4032:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4034:	fe 01       	movw	r30, r28
    4036:	e5 53       	subi	r30, 0x35	; 53
    4038:	ff 4f       	sbci	r31, 0xFF	; 255
    403a:	60 81       	ld	r22, Z
    403c:	71 81       	ldd	r23, Z+1	; 0x01
    403e:	82 81       	ldd	r24, Z+2	; 0x02
    4040:	93 81       	ldd	r25, Z+3	; 0x03
    4042:	20 e0       	ldi	r18, 0x00	; 0
    4044:	30 e0       	ldi	r19, 0x00	; 0
    4046:	40 e8       	ldi	r20, 0x80	; 128
    4048:	5f e3       	ldi	r21, 0x3F	; 63
    404a:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    404e:	88 23       	and	r24, r24
    4050:	44 f4       	brge	.+16     	; 0x4062 <main+0x1730>
		__ticks = 1;
    4052:	fe 01       	movw	r30, r28
    4054:	e7 53       	subi	r30, 0x37	; 55
    4056:	ff 4f       	sbci	r31, 0xFF	; 255
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	91 83       	std	Z+1, r25	; 0x01
    405e:	80 83       	st	Z, r24
    4060:	64 c0       	rjmp	.+200    	; 0x412a <main+0x17f8>
	else if (__tmp > 65535)
    4062:	fe 01       	movw	r30, r28
    4064:	e5 53       	subi	r30, 0x35	; 53
    4066:	ff 4f       	sbci	r31, 0xFF	; 255
    4068:	60 81       	ld	r22, Z
    406a:	71 81       	ldd	r23, Z+1	; 0x01
    406c:	82 81       	ldd	r24, Z+2	; 0x02
    406e:	93 81       	ldd	r25, Z+3	; 0x03
    4070:	20 e0       	ldi	r18, 0x00	; 0
    4072:	3f ef       	ldi	r19, 0xFF	; 255
    4074:	4f e7       	ldi	r20, 0x7F	; 127
    4076:	57 e4       	ldi	r21, 0x47	; 71
    4078:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    407c:	18 16       	cp	r1, r24
    407e:	0c f0       	brlt	.+2      	; 0x4082 <main+0x1750>
    4080:	43 c0       	rjmp	.+134    	; 0x4108 <main+0x17d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4082:	fe 01       	movw	r30, r28
    4084:	e1 53       	subi	r30, 0x31	; 49
    4086:	ff 4f       	sbci	r31, 0xFF	; 255
    4088:	60 81       	ld	r22, Z
    408a:	71 81       	ldd	r23, Z+1	; 0x01
    408c:	82 81       	ldd	r24, Z+2	; 0x02
    408e:	93 81       	ldd	r25, Z+3	; 0x03
    4090:	20 e0       	ldi	r18, 0x00	; 0
    4092:	30 e0       	ldi	r19, 0x00	; 0
    4094:	40 e2       	ldi	r20, 0x20	; 32
    4096:	51 e4       	ldi	r21, 0x41	; 65
    4098:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    409c:	dc 01       	movw	r26, r24
    409e:	cb 01       	movw	r24, r22
    40a0:	8e 01       	movw	r16, r28
    40a2:	07 53       	subi	r16, 0x37	; 55
    40a4:	1f 4f       	sbci	r17, 0xFF	; 255
    40a6:	bc 01       	movw	r22, r24
    40a8:	cd 01       	movw	r24, r26
    40aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    40ae:	dc 01       	movw	r26, r24
    40b0:	cb 01       	movw	r24, r22
    40b2:	f8 01       	movw	r30, r16
    40b4:	91 83       	std	Z+1, r25	; 0x01
    40b6:	80 83       	st	Z, r24
    40b8:	1f c0       	rjmp	.+62     	; 0x40f8 <main+0x17c6>
    40ba:	fe 01       	movw	r30, r28
    40bc:	e9 53       	subi	r30, 0x39	; 57
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	88 ec       	ldi	r24, 0xC8	; 200
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	91 83       	std	Z+1, r25	; 0x01
    40c6:	80 83       	st	Z, r24
    40c8:	fe 01       	movw	r30, r28
    40ca:	e9 53       	subi	r30, 0x39	; 57
    40cc:	ff 4f       	sbci	r31, 0xFF	; 255
    40ce:	80 81       	ld	r24, Z
    40d0:	91 81       	ldd	r25, Z+1	; 0x01
    40d2:	01 97       	sbiw	r24, 0x01	; 1
    40d4:	f1 f7       	brne	.-4      	; 0x40d2 <main+0x17a0>
    40d6:	fe 01       	movw	r30, r28
    40d8:	e9 53       	subi	r30, 0x39	; 57
    40da:	ff 4f       	sbci	r31, 0xFF	; 255
    40dc:	91 83       	std	Z+1, r25	; 0x01
    40de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40e0:	de 01       	movw	r26, r28
    40e2:	a7 53       	subi	r26, 0x37	; 55
    40e4:	bf 4f       	sbci	r27, 0xFF	; 255
    40e6:	fe 01       	movw	r30, r28
    40e8:	e7 53       	subi	r30, 0x37	; 55
    40ea:	ff 4f       	sbci	r31, 0xFF	; 255
    40ec:	80 81       	ld	r24, Z
    40ee:	91 81       	ldd	r25, Z+1	; 0x01
    40f0:	01 97       	sbiw	r24, 0x01	; 1
    40f2:	11 96       	adiw	r26, 0x01	; 1
    40f4:	9c 93       	st	X, r25
    40f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40f8:	fe 01       	movw	r30, r28
    40fa:	e7 53       	subi	r30, 0x37	; 55
    40fc:	ff 4f       	sbci	r31, 0xFF	; 255
    40fe:	80 81       	ld	r24, Z
    4100:	91 81       	ldd	r25, Z+1	; 0x01
    4102:	00 97       	sbiw	r24, 0x00	; 0
    4104:	d1 f6       	brne	.-76     	; 0x40ba <main+0x1788>
    4106:	27 c0       	rjmp	.+78     	; 0x4156 <main+0x1824>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4108:	8e 01       	movw	r16, r28
    410a:	07 53       	subi	r16, 0x37	; 55
    410c:	1f 4f       	sbci	r17, 0xFF	; 255
    410e:	fe 01       	movw	r30, r28
    4110:	e5 53       	subi	r30, 0x35	; 53
    4112:	ff 4f       	sbci	r31, 0xFF	; 255
    4114:	60 81       	ld	r22, Z
    4116:	71 81       	ldd	r23, Z+1	; 0x01
    4118:	82 81       	ldd	r24, Z+2	; 0x02
    411a:	93 81       	ldd	r25, Z+3	; 0x03
    411c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4120:	dc 01       	movw	r26, r24
    4122:	cb 01       	movw	r24, r22
    4124:	f8 01       	movw	r30, r16
    4126:	91 83       	std	Z+1, r25	; 0x01
    4128:	80 83       	st	Z, r24
    412a:	de 01       	movw	r26, r28
    412c:	ab 53       	subi	r26, 0x3B	; 59
    412e:	bf 4f       	sbci	r27, 0xFF	; 255
    4130:	fe 01       	movw	r30, r28
    4132:	e7 53       	subi	r30, 0x37	; 55
    4134:	ff 4f       	sbci	r31, 0xFF	; 255
    4136:	80 81       	ld	r24, Z
    4138:	91 81       	ldd	r25, Z+1	; 0x01
    413a:	8d 93       	st	X+, r24
    413c:	9c 93       	st	X, r25
    413e:	fe 01       	movw	r30, r28
    4140:	eb 53       	subi	r30, 0x3B	; 59
    4142:	ff 4f       	sbci	r31, 0xFF	; 255
    4144:	80 81       	ld	r24, Z
    4146:	91 81       	ldd	r25, Z+1	; 0x01
    4148:	01 97       	sbiw	r24, 0x01	; 1
    414a:	f1 f7       	brne	.-4      	; 0x4148 <main+0x1816>
    414c:	fe 01       	movw	r30, r28
    414e:	eb 53       	subi	r30, 0x3B	; 59
    4150:	ff 4f       	sbci	r31, 0xFF	; 255
    4152:	91 83       	std	Z+1, r25	; 0x01
    4154:	80 83       	st	Z, r24
			_delay_ms(50);
			HLED_voidLEDOn(LED3);
    4156:	60 91 be 00 	lds	r22, 0x00BE
    415a:	70 91 bf 00 	lds	r23, 0x00BF
    415e:	80 91 c0 00 	lds	r24, 0x00C0
    4162:	0e 94 cb 0b 	call	0x1796	; 0x1796 <HLED_voidLEDOn>
    4166:	fe 01       	movw	r30, r28
    4168:	ef 53       	subi	r30, 0x3F	; 63
    416a:	ff 4f       	sbci	r31, 0xFF	; 255
    416c:	80 e0       	ldi	r24, 0x00	; 0
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	a8 e4       	ldi	r26, 0x48	; 72
    4172:	b2 e4       	ldi	r27, 0x42	; 66
    4174:	80 83       	st	Z, r24
    4176:	91 83       	std	Z+1, r25	; 0x01
    4178:	a2 83       	std	Z+2, r26	; 0x02
    417a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    417c:	8e 01       	movw	r16, r28
    417e:	03 54       	subi	r16, 0x43	; 67
    4180:	1f 4f       	sbci	r17, 0xFF	; 255
    4182:	fe 01       	movw	r30, r28
    4184:	ef 53       	subi	r30, 0x3F	; 63
    4186:	ff 4f       	sbci	r31, 0xFF	; 255
    4188:	60 81       	ld	r22, Z
    418a:	71 81       	ldd	r23, Z+1	; 0x01
    418c:	82 81       	ldd	r24, Z+2	; 0x02
    418e:	93 81       	ldd	r25, Z+3	; 0x03
    4190:	20 e0       	ldi	r18, 0x00	; 0
    4192:	30 e0       	ldi	r19, 0x00	; 0
    4194:	4a ef       	ldi	r20, 0xFA	; 250
    4196:	54 e4       	ldi	r21, 0x44	; 68
    4198:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    419c:	dc 01       	movw	r26, r24
    419e:	cb 01       	movw	r24, r22
    41a0:	f8 01       	movw	r30, r16
    41a2:	80 83       	st	Z, r24
    41a4:	91 83       	std	Z+1, r25	; 0x01
    41a6:	a2 83       	std	Z+2, r26	; 0x02
    41a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41aa:	fe 01       	movw	r30, r28
    41ac:	e3 54       	subi	r30, 0x43	; 67
    41ae:	ff 4f       	sbci	r31, 0xFF	; 255
    41b0:	60 81       	ld	r22, Z
    41b2:	71 81       	ldd	r23, Z+1	; 0x01
    41b4:	82 81       	ldd	r24, Z+2	; 0x02
    41b6:	93 81       	ldd	r25, Z+3	; 0x03
    41b8:	20 e0       	ldi	r18, 0x00	; 0
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	40 e8       	ldi	r20, 0x80	; 128
    41be:	5f e3       	ldi	r21, 0x3F	; 63
    41c0:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    41c4:	88 23       	and	r24, r24
    41c6:	44 f4       	brge	.+16     	; 0x41d8 <main+0x18a6>
		__ticks = 1;
    41c8:	fe 01       	movw	r30, r28
    41ca:	e5 54       	subi	r30, 0x45	; 69
    41cc:	ff 4f       	sbci	r31, 0xFF	; 255
    41ce:	81 e0       	ldi	r24, 0x01	; 1
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	91 83       	std	Z+1, r25	; 0x01
    41d4:	80 83       	st	Z, r24
    41d6:	64 c0       	rjmp	.+200    	; 0x42a0 <main+0x196e>
	else if (__tmp > 65535)
    41d8:	fe 01       	movw	r30, r28
    41da:	e3 54       	subi	r30, 0x43	; 67
    41dc:	ff 4f       	sbci	r31, 0xFF	; 255
    41de:	60 81       	ld	r22, Z
    41e0:	71 81       	ldd	r23, Z+1	; 0x01
    41e2:	82 81       	ldd	r24, Z+2	; 0x02
    41e4:	93 81       	ldd	r25, Z+3	; 0x03
    41e6:	20 e0       	ldi	r18, 0x00	; 0
    41e8:	3f ef       	ldi	r19, 0xFF	; 255
    41ea:	4f e7       	ldi	r20, 0x7F	; 127
    41ec:	57 e4       	ldi	r21, 0x47	; 71
    41ee:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    41f2:	18 16       	cp	r1, r24
    41f4:	0c f0       	brlt	.+2      	; 0x41f8 <main+0x18c6>
    41f6:	43 c0       	rjmp	.+134    	; 0x427e <main+0x194c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41f8:	fe 01       	movw	r30, r28
    41fa:	ef 53       	subi	r30, 0x3F	; 63
    41fc:	ff 4f       	sbci	r31, 0xFF	; 255
    41fe:	60 81       	ld	r22, Z
    4200:	71 81       	ldd	r23, Z+1	; 0x01
    4202:	82 81       	ldd	r24, Z+2	; 0x02
    4204:	93 81       	ldd	r25, Z+3	; 0x03
    4206:	20 e0       	ldi	r18, 0x00	; 0
    4208:	30 e0       	ldi	r19, 0x00	; 0
    420a:	40 e2       	ldi	r20, 0x20	; 32
    420c:	51 e4       	ldi	r21, 0x41	; 65
    420e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4212:	dc 01       	movw	r26, r24
    4214:	cb 01       	movw	r24, r22
    4216:	8e 01       	movw	r16, r28
    4218:	05 54       	subi	r16, 0x45	; 69
    421a:	1f 4f       	sbci	r17, 0xFF	; 255
    421c:	bc 01       	movw	r22, r24
    421e:	cd 01       	movw	r24, r26
    4220:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4224:	dc 01       	movw	r26, r24
    4226:	cb 01       	movw	r24, r22
    4228:	f8 01       	movw	r30, r16
    422a:	91 83       	std	Z+1, r25	; 0x01
    422c:	80 83       	st	Z, r24
    422e:	1f c0       	rjmp	.+62     	; 0x426e <main+0x193c>
    4230:	fe 01       	movw	r30, r28
    4232:	e7 54       	subi	r30, 0x47	; 71
    4234:	ff 4f       	sbci	r31, 0xFF	; 255
    4236:	88 ec       	ldi	r24, 0xC8	; 200
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	91 83       	std	Z+1, r25	; 0x01
    423c:	80 83       	st	Z, r24
    423e:	fe 01       	movw	r30, r28
    4240:	e7 54       	subi	r30, 0x47	; 71
    4242:	ff 4f       	sbci	r31, 0xFF	; 255
    4244:	80 81       	ld	r24, Z
    4246:	91 81       	ldd	r25, Z+1	; 0x01
    4248:	01 97       	sbiw	r24, 0x01	; 1
    424a:	f1 f7       	brne	.-4      	; 0x4248 <main+0x1916>
    424c:	fe 01       	movw	r30, r28
    424e:	e7 54       	subi	r30, 0x47	; 71
    4250:	ff 4f       	sbci	r31, 0xFF	; 255
    4252:	91 83       	std	Z+1, r25	; 0x01
    4254:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4256:	de 01       	movw	r26, r28
    4258:	a5 54       	subi	r26, 0x45	; 69
    425a:	bf 4f       	sbci	r27, 0xFF	; 255
    425c:	fe 01       	movw	r30, r28
    425e:	e5 54       	subi	r30, 0x45	; 69
    4260:	ff 4f       	sbci	r31, 0xFF	; 255
    4262:	80 81       	ld	r24, Z
    4264:	91 81       	ldd	r25, Z+1	; 0x01
    4266:	01 97       	sbiw	r24, 0x01	; 1
    4268:	11 96       	adiw	r26, 0x01	; 1
    426a:	9c 93       	st	X, r25
    426c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    426e:	fe 01       	movw	r30, r28
    4270:	e5 54       	subi	r30, 0x45	; 69
    4272:	ff 4f       	sbci	r31, 0xFF	; 255
    4274:	80 81       	ld	r24, Z
    4276:	91 81       	ldd	r25, Z+1	; 0x01
    4278:	00 97       	sbiw	r24, 0x00	; 0
    427a:	d1 f6       	brne	.-76     	; 0x4230 <main+0x18fe>
    427c:	27 c0       	rjmp	.+78     	; 0x42cc <main+0x199a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    427e:	8e 01       	movw	r16, r28
    4280:	05 54       	subi	r16, 0x45	; 69
    4282:	1f 4f       	sbci	r17, 0xFF	; 255
    4284:	fe 01       	movw	r30, r28
    4286:	e3 54       	subi	r30, 0x43	; 67
    4288:	ff 4f       	sbci	r31, 0xFF	; 255
    428a:	60 81       	ld	r22, Z
    428c:	71 81       	ldd	r23, Z+1	; 0x01
    428e:	82 81       	ldd	r24, Z+2	; 0x02
    4290:	93 81       	ldd	r25, Z+3	; 0x03
    4292:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4296:	dc 01       	movw	r26, r24
    4298:	cb 01       	movw	r24, r22
    429a:	f8 01       	movw	r30, r16
    429c:	91 83       	std	Z+1, r25	; 0x01
    429e:	80 83       	st	Z, r24
    42a0:	de 01       	movw	r26, r28
    42a2:	a9 54       	subi	r26, 0x49	; 73
    42a4:	bf 4f       	sbci	r27, 0xFF	; 255
    42a6:	fe 01       	movw	r30, r28
    42a8:	e5 54       	subi	r30, 0x45	; 69
    42aa:	ff 4f       	sbci	r31, 0xFF	; 255
    42ac:	80 81       	ld	r24, Z
    42ae:	91 81       	ldd	r25, Z+1	; 0x01
    42b0:	8d 93       	st	X+, r24
    42b2:	9c 93       	st	X, r25
    42b4:	fe 01       	movw	r30, r28
    42b6:	e9 54       	subi	r30, 0x49	; 73
    42b8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ba:	80 81       	ld	r24, Z
    42bc:	91 81       	ldd	r25, Z+1	; 0x01
    42be:	01 97       	sbiw	r24, 0x01	; 1
    42c0:	f1 f7       	brne	.-4      	; 0x42be <main+0x198c>
    42c2:	fe 01       	movw	r30, r28
    42c4:	e9 54       	subi	r30, 0x49	; 73
    42c6:	ff 4f       	sbci	r31, 0xFF	; 255
    42c8:	91 83       	std	Z+1, r25	; 0x01
    42ca:	80 83       	st	Z, r24
			_delay_ms(50);
			HLED_voidLEDOn(LED4);
    42cc:	60 91 c1 00 	lds	r22, 0x00C1
    42d0:	70 91 c2 00 	lds	r23, 0x00C2
    42d4:	80 91 c3 00 	lds	r24, 0x00C3
    42d8:	0e 94 cb 0b 	call	0x1796	; 0x1796 <HLED_voidLEDOn>
    42dc:	fe 01       	movw	r30, r28
    42de:	ed 54       	subi	r30, 0x4D	; 77
    42e0:	ff 4f       	sbci	r31, 0xFF	; 255
    42e2:	80 e0       	ldi	r24, 0x00	; 0
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	a0 e2       	ldi	r26, 0x20	; 32
    42e8:	b1 e4       	ldi	r27, 0x41	; 65
    42ea:	80 83       	st	Z, r24
    42ec:	91 83       	std	Z+1, r25	; 0x01
    42ee:	a2 83       	std	Z+2, r26	; 0x02
    42f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42f2:	8e 01       	movw	r16, r28
    42f4:	01 55       	subi	r16, 0x51	; 81
    42f6:	1f 4f       	sbci	r17, 0xFF	; 255
    42f8:	fe 01       	movw	r30, r28
    42fa:	ed 54       	subi	r30, 0x4D	; 77
    42fc:	ff 4f       	sbci	r31, 0xFF	; 255
    42fe:	60 81       	ld	r22, Z
    4300:	71 81       	ldd	r23, Z+1	; 0x01
    4302:	82 81       	ldd	r24, Z+2	; 0x02
    4304:	93 81       	ldd	r25, Z+3	; 0x03
    4306:	20 e0       	ldi	r18, 0x00	; 0
    4308:	30 e0       	ldi	r19, 0x00	; 0
    430a:	4a ef       	ldi	r20, 0xFA	; 250
    430c:	54 e4       	ldi	r21, 0x44	; 68
    430e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4312:	dc 01       	movw	r26, r24
    4314:	cb 01       	movw	r24, r22
    4316:	f8 01       	movw	r30, r16
    4318:	80 83       	st	Z, r24
    431a:	91 83       	std	Z+1, r25	; 0x01
    431c:	a2 83       	std	Z+2, r26	; 0x02
    431e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4320:	fe 01       	movw	r30, r28
    4322:	e1 55       	subi	r30, 0x51	; 81
    4324:	ff 4f       	sbci	r31, 0xFF	; 255
    4326:	60 81       	ld	r22, Z
    4328:	71 81       	ldd	r23, Z+1	; 0x01
    432a:	82 81       	ldd	r24, Z+2	; 0x02
    432c:	93 81       	ldd	r25, Z+3	; 0x03
    432e:	20 e0       	ldi	r18, 0x00	; 0
    4330:	30 e0       	ldi	r19, 0x00	; 0
    4332:	40 e8       	ldi	r20, 0x80	; 128
    4334:	5f e3       	ldi	r21, 0x3F	; 63
    4336:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    433a:	88 23       	and	r24, r24
    433c:	44 f4       	brge	.+16     	; 0x434e <main+0x1a1c>
		__ticks = 1;
    433e:	fe 01       	movw	r30, r28
    4340:	e3 55       	subi	r30, 0x53	; 83
    4342:	ff 4f       	sbci	r31, 0xFF	; 255
    4344:	81 e0       	ldi	r24, 0x01	; 1
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	91 83       	std	Z+1, r25	; 0x01
    434a:	80 83       	st	Z, r24
    434c:	64 c0       	rjmp	.+200    	; 0x4416 <main+0x1ae4>
	else if (__tmp > 65535)
    434e:	fe 01       	movw	r30, r28
    4350:	e1 55       	subi	r30, 0x51	; 81
    4352:	ff 4f       	sbci	r31, 0xFF	; 255
    4354:	60 81       	ld	r22, Z
    4356:	71 81       	ldd	r23, Z+1	; 0x01
    4358:	82 81       	ldd	r24, Z+2	; 0x02
    435a:	93 81       	ldd	r25, Z+3	; 0x03
    435c:	20 e0       	ldi	r18, 0x00	; 0
    435e:	3f ef       	ldi	r19, 0xFF	; 255
    4360:	4f e7       	ldi	r20, 0x7F	; 127
    4362:	57 e4       	ldi	r21, 0x47	; 71
    4364:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    4368:	18 16       	cp	r1, r24
    436a:	0c f0       	brlt	.+2      	; 0x436e <main+0x1a3c>
    436c:	43 c0       	rjmp	.+134    	; 0x43f4 <main+0x1ac2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    436e:	fe 01       	movw	r30, r28
    4370:	ed 54       	subi	r30, 0x4D	; 77
    4372:	ff 4f       	sbci	r31, 0xFF	; 255
    4374:	60 81       	ld	r22, Z
    4376:	71 81       	ldd	r23, Z+1	; 0x01
    4378:	82 81       	ldd	r24, Z+2	; 0x02
    437a:	93 81       	ldd	r25, Z+3	; 0x03
    437c:	20 e0       	ldi	r18, 0x00	; 0
    437e:	30 e0       	ldi	r19, 0x00	; 0
    4380:	40 e2       	ldi	r20, 0x20	; 32
    4382:	51 e4       	ldi	r21, 0x41	; 65
    4384:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4388:	dc 01       	movw	r26, r24
    438a:	cb 01       	movw	r24, r22
    438c:	8e 01       	movw	r16, r28
    438e:	03 55       	subi	r16, 0x53	; 83
    4390:	1f 4f       	sbci	r17, 0xFF	; 255
    4392:	bc 01       	movw	r22, r24
    4394:	cd 01       	movw	r24, r26
    4396:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    439a:	dc 01       	movw	r26, r24
    439c:	cb 01       	movw	r24, r22
    439e:	f8 01       	movw	r30, r16
    43a0:	91 83       	std	Z+1, r25	; 0x01
    43a2:	80 83       	st	Z, r24
    43a4:	1f c0       	rjmp	.+62     	; 0x43e4 <main+0x1ab2>
    43a6:	fe 01       	movw	r30, r28
    43a8:	e5 55       	subi	r30, 0x55	; 85
    43aa:	ff 4f       	sbci	r31, 0xFF	; 255
    43ac:	88 ec       	ldi	r24, 0xC8	; 200
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	91 83       	std	Z+1, r25	; 0x01
    43b2:	80 83       	st	Z, r24
    43b4:	fe 01       	movw	r30, r28
    43b6:	e5 55       	subi	r30, 0x55	; 85
    43b8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ba:	80 81       	ld	r24, Z
    43bc:	91 81       	ldd	r25, Z+1	; 0x01
    43be:	01 97       	sbiw	r24, 0x01	; 1
    43c0:	f1 f7       	brne	.-4      	; 0x43be <main+0x1a8c>
    43c2:	fe 01       	movw	r30, r28
    43c4:	e5 55       	subi	r30, 0x55	; 85
    43c6:	ff 4f       	sbci	r31, 0xFF	; 255
    43c8:	91 83       	std	Z+1, r25	; 0x01
    43ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43cc:	de 01       	movw	r26, r28
    43ce:	a3 55       	subi	r26, 0x53	; 83
    43d0:	bf 4f       	sbci	r27, 0xFF	; 255
    43d2:	fe 01       	movw	r30, r28
    43d4:	e3 55       	subi	r30, 0x53	; 83
    43d6:	ff 4f       	sbci	r31, 0xFF	; 255
    43d8:	80 81       	ld	r24, Z
    43da:	91 81       	ldd	r25, Z+1	; 0x01
    43dc:	01 97       	sbiw	r24, 0x01	; 1
    43de:	11 96       	adiw	r26, 0x01	; 1
    43e0:	9c 93       	st	X, r25
    43e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43e4:	fe 01       	movw	r30, r28
    43e6:	e3 55       	subi	r30, 0x53	; 83
    43e8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ea:	80 81       	ld	r24, Z
    43ec:	91 81       	ldd	r25, Z+1	; 0x01
    43ee:	00 97       	sbiw	r24, 0x00	; 0
    43f0:	d1 f6       	brne	.-76     	; 0x43a6 <main+0x1a74>
    43f2:	27 c0       	rjmp	.+78     	; 0x4442 <main+0x1b10>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43f4:	8e 01       	movw	r16, r28
    43f6:	03 55       	subi	r16, 0x53	; 83
    43f8:	1f 4f       	sbci	r17, 0xFF	; 255
    43fa:	fe 01       	movw	r30, r28
    43fc:	e1 55       	subi	r30, 0x51	; 81
    43fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4400:	60 81       	ld	r22, Z
    4402:	71 81       	ldd	r23, Z+1	; 0x01
    4404:	82 81       	ldd	r24, Z+2	; 0x02
    4406:	93 81       	ldd	r25, Z+3	; 0x03
    4408:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    440c:	dc 01       	movw	r26, r24
    440e:	cb 01       	movw	r24, r22
    4410:	f8 01       	movw	r30, r16
    4412:	91 83       	std	Z+1, r25	; 0x01
    4414:	80 83       	st	Z, r24
    4416:	de 01       	movw	r26, r28
    4418:	a7 55       	subi	r26, 0x57	; 87
    441a:	bf 4f       	sbci	r27, 0xFF	; 255
    441c:	fe 01       	movw	r30, r28
    441e:	e3 55       	subi	r30, 0x53	; 83
    4420:	ff 4f       	sbci	r31, 0xFF	; 255
    4422:	80 81       	ld	r24, Z
    4424:	91 81       	ldd	r25, Z+1	; 0x01
    4426:	8d 93       	st	X+, r24
    4428:	9c 93       	st	X, r25
    442a:	fe 01       	movw	r30, r28
    442c:	e7 55       	subi	r30, 0x57	; 87
    442e:	ff 4f       	sbci	r31, 0xFF	; 255
    4430:	80 81       	ld	r24, Z
    4432:	91 81       	ldd	r25, Z+1	; 0x01
    4434:	01 97       	sbiw	r24, 0x01	; 1
    4436:	f1 f7       	brne	.-4      	; 0x4434 <main+0x1b02>
    4438:	fe 01       	movw	r30, r28
    443a:	e7 55       	subi	r30, 0x57	; 87
    443c:	ff 4f       	sbci	r31, 0xFF	; 255
    443e:	91 83       	std	Z+1, r25	; 0x01
    4440:	80 83       	st	Z, r24
			_delay_ms(10);
			HLED_voidLEDOff(LED4);
    4442:	60 91 c1 00 	lds	r22, 0x00C1
    4446:	70 91 c2 00 	lds	r23, 0x00C2
    444a:	80 91 c3 00 	lds	r24, 0x00C3
    444e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <HLED_voidLEDOff>
    4452:	fe 01       	movw	r30, r28
    4454:	eb 55       	subi	r30, 0x5B	; 91
    4456:	ff 4f       	sbci	r31, 0xFF	; 255
    4458:	80 e0       	ldi	r24, 0x00	; 0
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	a0 e2       	ldi	r26, 0x20	; 32
    445e:	b1 e4       	ldi	r27, 0x41	; 65
    4460:	80 83       	st	Z, r24
    4462:	91 83       	std	Z+1, r25	; 0x01
    4464:	a2 83       	std	Z+2, r26	; 0x02
    4466:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4468:	8e 01       	movw	r16, r28
    446a:	0f 55       	subi	r16, 0x5F	; 95
    446c:	1f 4f       	sbci	r17, 0xFF	; 255
    446e:	fe 01       	movw	r30, r28
    4470:	eb 55       	subi	r30, 0x5B	; 91
    4472:	ff 4f       	sbci	r31, 0xFF	; 255
    4474:	60 81       	ld	r22, Z
    4476:	71 81       	ldd	r23, Z+1	; 0x01
    4478:	82 81       	ldd	r24, Z+2	; 0x02
    447a:	93 81       	ldd	r25, Z+3	; 0x03
    447c:	20 e0       	ldi	r18, 0x00	; 0
    447e:	30 e0       	ldi	r19, 0x00	; 0
    4480:	4a ef       	ldi	r20, 0xFA	; 250
    4482:	54 e4       	ldi	r21, 0x44	; 68
    4484:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4488:	dc 01       	movw	r26, r24
    448a:	cb 01       	movw	r24, r22
    448c:	f8 01       	movw	r30, r16
    448e:	80 83       	st	Z, r24
    4490:	91 83       	std	Z+1, r25	; 0x01
    4492:	a2 83       	std	Z+2, r26	; 0x02
    4494:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4496:	fe 01       	movw	r30, r28
    4498:	ef 55       	subi	r30, 0x5F	; 95
    449a:	ff 4f       	sbci	r31, 0xFF	; 255
    449c:	60 81       	ld	r22, Z
    449e:	71 81       	ldd	r23, Z+1	; 0x01
    44a0:	82 81       	ldd	r24, Z+2	; 0x02
    44a2:	93 81       	ldd	r25, Z+3	; 0x03
    44a4:	20 e0       	ldi	r18, 0x00	; 0
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	40 e8       	ldi	r20, 0x80	; 128
    44aa:	5f e3       	ldi	r21, 0x3F	; 63
    44ac:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    44b0:	88 23       	and	r24, r24
    44b2:	44 f4       	brge	.+16     	; 0x44c4 <main+0x1b92>
		__ticks = 1;
    44b4:	fe 01       	movw	r30, r28
    44b6:	e1 56       	subi	r30, 0x61	; 97
    44b8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ba:	81 e0       	ldi	r24, 0x01	; 1
    44bc:	90 e0       	ldi	r25, 0x00	; 0
    44be:	91 83       	std	Z+1, r25	; 0x01
    44c0:	80 83       	st	Z, r24
    44c2:	64 c0       	rjmp	.+200    	; 0x458c <main+0x1c5a>
	else if (__tmp > 65535)
    44c4:	fe 01       	movw	r30, r28
    44c6:	ef 55       	subi	r30, 0x5F	; 95
    44c8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ca:	60 81       	ld	r22, Z
    44cc:	71 81       	ldd	r23, Z+1	; 0x01
    44ce:	82 81       	ldd	r24, Z+2	; 0x02
    44d0:	93 81       	ldd	r25, Z+3	; 0x03
    44d2:	20 e0       	ldi	r18, 0x00	; 0
    44d4:	3f ef       	ldi	r19, 0xFF	; 255
    44d6:	4f e7       	ldi	r20, 0x7F	; 127
    44d8:	57 e4       	ldi	r21, 0x47	; 71
    44da:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    44de:	18 16       	cp	r1, r24
    44e0:	0c f0       	brlt	.+2      	; 0x44e4 <main+0x1bb2>
    44e2:	43 c0       	rjmp	.+134    	; 0x456a <main+0x1c38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44e4:	fe 01       	movw	r30, r28
    44e6:	eb 55       	subi	r30, 0x5B	; 91
    44e8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ea:	60 81       	ld	r22, Z
    44ec:	71 81       	ldd	r23, Z+1	; 0x01
    44ee:	82 81       	ldd	r24, Z+2	; 0x02
    44f0:	93 81       	ldd	r25, Z+3	; 0x03
    44f2:	20 e0       	ldi	r18, 0x00	; 0
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	40 e2       	ldi	r20, 0x20	; 32
    44f8:	51 e4       	ldi	r21, 0x41	; 65
    44fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    44fe:	dc 01       	movw	r26, r24
    4500:	cb 01       	movw	r24, r22
    4502:	8e 01       	movw	r16, r28
    4504:	01 56       	subi	r16, 0x61	; 97
    4506:	1f 4f       	sbci	r17, 0xFF	; 255
    4508:	bc 01       	movw	r22, r24
    450a:	cd 01       	movw	r24, r26
    450c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4510:	dc 01       	movw	r26, r24
    4512:	cb 01       	movw	r24, r22
    4514:	f8 01       	movw	r30, r16
    4516:	91 83       	std	Z+1, r25	; 0x01
    4518:	80 83       	st	Z, r24
    451a:	1f c0       	rjmp	.+62     	; 0x455a <main+0x1c28>
    451c:	fe 01       	movw	r30, r28
    451e:	e3 56       	subi	r30, 0x63	; 99
    4520:	ff 4f       	sbci	r31, 0xFF	; 255
    4522:	88 ec       	ldi	r24, 0xC8	; 200
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	91 83       	std	Z+1, r25	; 0x01
    4528:	80 83       	st	Z, r24
    452a:	fe 01       	movw	r30, r28
    452c:	e3 56       	subi	r30, 0x63	; 99
    452e:	ff 4f       	sbci	r31, 0xFF	; 255
    4530:	80 81       	ld	r24, Z
    4532:	91 81       	ldd	r25, Z+1	; 0x01
    4534:	01 97       	sbiw	r24, 0x01	; 1
    4536:	f1 f7       	brne	.-4      	; 0x4534 <main+0x1c02>
    4538:	fe 01       	movw	r30, r28
    453a:	e3 56       	subi	r30, 0x63	; 99
    453c:	ff 4f       	sbci	r31, 0xFF	; 255
    453e:	91 83       	std	Z+1, r25	; 0x01
    4540:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4542:	de 01       	movw	r26, r28
    4544:	a1 56       	subi	r26, 0x61	; 97
    4546:	bf 4f       	sbci	r27, 0xFF	; 255
    4548:	fe 01       	movw	r30, r28
    454a:	e1 56       	subi	r30, 0x61	; 97
    454c:	ff 4f       	sbci	r31, 0xFF	; 255
    454e:	80 81       	ld	r24, Z
    4550:	91 81       	ldd	r25, Z+1	; 0x01
    4552:	01 97       	sbiw	r24, 0x01	; 1
    4554:	11 96       	adiw	r26, 0x01	; 1
    4556:	9c 93       	st	X, r25
    4558:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    455a:	fe 01       	movw	r30, r28
    455c:	e1 56       	subi	r30, 0x61	; 97
    455e:	ff 4f       	sbci	r31, 0xFF	; 255
    4560:	80 81       	ld	r24, Z
    4562:	91 81       	ldd	r25, Z+1	; 0x01
    4564:	00 97       	sbiw	r24, 0x00	; 0
    4566:	d1 f6       	brne	.-76     	; 0x451c <main+0x1bea>
    4568:	27 c0       	rjmp	.+78     	; 0x45b8 <main+0x1c86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    456a:	8e 01       	movw	r16, r28
    456c:	01 56       	subi	r16, 0x61	; 97
    456e:	1f 4f       	sbci	r17, 0xFF	; 255
    4570:	fe 01       	movw	r30, r28
    4572:	ef 55       	subi	r30, 0x5F	; 95
    4574:	ff 4f       	sbci	r31, 0xFF	; 255
    4576:	60 81       	ld	r22, Z
    4578:	71 81       	ldd	r23, Z+1	; 0x01
    457a:	82 81       	ldd	r24, Z+2	; 0x02
    457c:	93 81       	ldd	r25, Z+3	; 0x03
    457e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4582:	dc 01       	movw	r26, r24
    4584:	cb 01       	movw	r24, r22
    4586:	f8 01       	movw	r30, r16
    4588:	91 83       	std	Z+1, r25	; 0x01
    458a:	80 83       	st	Z, r24
    458c:	de 01       	movw	r26, r28
    458e:	a5 56       	subi	r26, 0x65	; 101
    4590:	bf 4f       	sbci	r27, 0xFF	; 255
    4592:	fe 01       	movw	r30, r28
    4594:	e1 56       	subi	r30, 0x61	; 97
    4596:	ff 4f       	sbci	r31, 0xFF	; 255
    4598:	80 81       	ld	r24, Z
    459a:	91 81       	ldd	r25, Z+1	; 0x01
    459c:	8d 93       	st	X+, r24
    459e:	9c 93       	st	X, r25
    45a0:	fe 01       	movw	r30, r28
    45a2:	e5 56       	subi	r30, 0x65	; 101
    45a4:	ff 4f       	sbci	r31, 0xFF	; 255
    45a6:	80 81       	ld	r24, Z
    45a8:	91 81       	ldd	r25, Z+1	; 0x01
    45aa:	01 97       	sbiw	r24, 0x01	; 1
    45ac:	f1 f7       	brne	.-4      	; 0x45aa <main+0x1c78>
    45ae:	fe 01       	movw	r30, r28
    45b0:	e5 56       	subi	r30, 0x65	; 101
    45b2:	ff 4f       	sbci	r31, 0xFF	; 255
    45b4:	91 83       	std	Z+1, r25	; 0x01
    45b6:	80 83       	st	Z, r24
			_delay_ms(10);
			HLED_voidLEDOff(LED3);
    45b8:	60 91 be 00 	lds	r22, 0x00BE
    45bc:	70 91 bf 00 	lds	r23, 0x00BF
    45c0:	80 91 c0 00 	lds	r24, 0x00C0
    45c4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <HLED_voidLEDOff>
    45c8:	fe 01       	movw	r30, r28
    45ca:	e9 56       	subi	r30, 0x69	; 105
    45cc:	ff 4f       	sbci	r31, 0xFF	; 255
    45ce:	80 e0       	ldi	r24, 0x00	; 0
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	a0 e2       	ldi	r26, 0x20	; 32
    45d4:	b1 e4       	ldi	r27, 0x41	; 65
    45d6:	80 83       	st	Z, r24
    45d8:	91 83       	std	Z+1, r25	; 0x01
    45da:	a2 83       	std	Z+2, r26	; 0x02
    45dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45de:	8e 01       	movw	r16, r28
    45e0:	0d 56       	subi	r16, 0x6D	; 109
    45e2:	1f 4f       	sbci	r17, 0xFF	; 255
    45e4:	fe 01       	movw	r30, r28
    45e6:	e9 56       	subi	r30, 0x69	; 105
    45e8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ea:	60 81       	ld	r22, Z
    45ec:	71 81       	ldd	r23, Z+1	; 0x01
    45ee:	82 81       	ldd	r24, Z+2	; 0x02
    45f0:	93 81       	ldd	r25, Z+3	; 0x03
    45f2:	20 e0       	ldi	r18, 0x00	; 0
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	4a ef       	ldi	r20, 0xFA	; 250
    45f8:	54 e4       	ldi	r21, 0x44	; 68
    45fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    45fe:	dc 01       	movw	r26, r24
    4600:	cb 01       	movw	r24, r22
    4602:	f8 01       	movw	r30, r16
    4604:	80 83       	st	Z, r24
    4606:	91 83       	std	Z+1, r25	; 0x01
    4608:	a2 83       	std	Z+2, r26	; 0x02
    460a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    460c:	fe 01       	movw	r30, r28
    460e:	ed 56       	subi	r30, 0x6D	; 109
    4610:	ff 4f       	sbci	r31, 0xFF	; 255
    4612:	60 81       	ld	r22, Z
    4614:	71 81       	ldd	r23, Z+1	; 0x01
    4616:	82 81       	ldd	r24, Z+2	; 0x02
    4618:	93 81       	ldd	r25, Z+3	; 0x03
    461a:	20 e0       	ldi	r18, 0x00	; 0
    461c:	30 e0       	ldi	r19, 0x00	; 0
    461e:	40 e8       	ldi	r20, 0x80	; 128
    4620:	5f e3       	ldi	r21, 0x3F	; 63
    4622:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    4626:	88 23       	and	r24, r24
    4628:	44 f4       	brge	.+16     	; 0x463a <main+0x1d08>
		__ticks = 1;
    462a:	fe 01       	movw	r30, r28
    462c:	ef 56       	subi	r30, 0x6F	; 111
    462e:	ff 4f       	sbci	r31, 0xFF	; 255
    4630:	81 e0       	ldi	r24, 0x01	; 1
    4632:	90 e0       	ldi	r25, 0x00	; 0
    4634:	91 83       	std	Z+1, r25	; 0x01
    4636:	80 83       	st	Z, r24
    4638:	64 c0       	rjmp	.+200    	; 0x4702 <main+0x1dd0>
	else if (__tmp > 65535)
    463a:	fe 01       	movw	r30, r28
    463c:	ed 56       	subi	r30, 0x6D	; 109
    463e:	ff 4f       	sbci	r31, 0xFF	; 255
    4640:	60 81       	ld	r22, Z
    4642:	71 81       	ldd	r23, Z+1	; 0x01
    4644:	82 81       	ldd	r24, Z+2	; 0x02
    4646:	93 81       	ldd	r25, Z+3	; 0x03
    4648:	20 e0       	ldi	r18, 0x00	; 0
    464a:	3f ef       	ldi	r19, 0xFF	; 255
    464c:	4f e7       	ldi	r20, 0x7F	; 127
    464e:	57 e4       	ldi	r21, 0x47	; 71
    4650:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    4654:	18 16       	cp	r1, r24
    4656:	0c f0       	brlt	.+2      	; 0x465a <main+0x1d28>
    4658:	43 c0       	rjmp	.+134    	; 0x46e0 <main+0x1dae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    465a:	fe 01       	movw	r30, r28
    465c:	e9 56       	subi	r30, 0x69	; 105
    465e:	ff 4f       	sbci	r31, 0xFF	; 255
    4660:	60 81       	ld	r22, Z
    4662:	71 81       	ldd	r23, Z+1	; 0x01
    4664:	82 81       	ldd	r24, Z+2	; 0x02
    4666:	93 81       	ldd	r25, Z+3	; 0x03
    4668:	20 e0       	ldi	r18, 0x00	; 0
    466a:	30 e0       	ldi	r19, 0x00	; 0
    466c:	40 e2       	ldi	r20, 0x20	; 32
    466e:	51 e4       	ldi	r21, 0x41	; 65
    4670:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4674:	dc 01       	movw	r26, r24
    4676:	cb 01       	movw	r24, r22
    4678:	8e 01       	movw	r16, r28
    467a:	0f 56       	subi	r16, 0x6F	; 111
    467c:	1f 4f       	sbci	r17, 0xFF	; 255
    467e:	bc 01       	movw	r22, r24
    4680:	cd 01       	movw	r24, r26
    4682:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4686:	dc 01       	movw	r26, r24
    4688:	cb 01       	movw	r24, r22
    468a:	f8 01       	movw	r30, r16
    468c:	91 83       	std	Z+1, r25	; 0x01
    468e:	80 83       	st	Z, r24
    4690:	1f c0       	rjmp	.+62     	; 0x46d0 <main+0x1d9e>
    4692:	fe 01       	movw	r30, r28
    4694:	e1 57       	subi	r30, 0x71	; 113
    4696:	ff 4f       	sbci	r31, 0xFF	; 255
    4698:	88 ec       	ldi	r24, 0xC8	; 200
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	91 83       	std	Z+1, r25	; 0x01
    469e:	80 83       	st	Z, r24
    46a0:	fe 01       	movw	r30, r28
    46a2:	e1 57       	subi	r30, 0x71	; 113
    46a4:	ff 4f       	sbci	r31, 0xFF	; 255
    46a6:	80 81       	ld	r24, Z
    46a8:	91 81       	ldd	r25, Z+1	; 0x01
    46aa:	01 97       	sbiw	r24, 0x01	; 1
    46ac:	f1 f7       	brne	.-4      	; 0x46aa <main+0x1d78>
    46ae:	fe 01       	movw	r30, r28
    46b0:	e1 57       	subi	r30, 0x71	; 113
    46b2:	ff 4f       	sbci	r31, 0xFF	; 255
    46b4:	91 83       	std	Z+1, r25	; 0x01
    46b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46b8:	de 01       	movw	r26, r28
    46ba:	af 56       	subi	r26, 0x6F	; 111
    46bc:	bf 4f       	sbci	r27, 0xFF	; 255
    46be:	fe 01       	movw	r30, r28
    46c0:	ef 56       	subi	r30, 0x6F	; 111
    46c2:	ff 4f       	sbci	r31, 0xFF	; 255
    46c4:	80 81       	ld	r24, Z
    46c6:	91 81       	ldd	r25, Z+1	; 0x01
    46c8:	01 97       	sbiw	r24, 0x01	; 1
    46ca:	11 96       	adiw	r26, 0x01	; 1
    46cc:	9c 93       	st	X, r25
    46ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46d0:	fe 01       	movw	r30, r28
    46d2:	ef 56       	subi	r30, 0x6F	; 111
    46d4:	ff 4f       	sbci	r31, 0xFF	; 255
    46d6:	80 81       	ld	r24, Z
    46d8:	91 81       	ldd	r25, Z+1	; 0x01
    46da:	00 97       	sbiw	r24, 0x00	; 0
    46dc:	d1 f6       	brne	.-76     	; 0x4692 <main+0x1d60>
    46de:	27 c0       	rjmp	.+78     	; 0x472e <main+0x1dfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46e0:	8e 01       	movw	r16, r28
    46e2:	0f 56       	subi	r16, 0x6F	; 111
    46e4:	1f 4f       	sbci	r17, 0xFF	; 255
    46e6:	fe 01       	movw	r30, r28
    46e8:	ed 56       	subi	r30, 0x6D	; 109
    46ea:	ff 4f       	sbci	r31, 0xFF	; 255
    46ec:	60 81       	ld	r22, Z
    46ee:	71 81       	ldd	r23, Z+1	; 0x01
    46f0:	82 81       	ldd	r24, Z+2	; 0x02
    46f2:	93 81       	ldd	r25, Z+3	; 0x03
    46f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    46f8:	dc 01       	movw	r26, r24
    46fa:	cb 01       	movw	r24, r22
    46fc:	f8 01       	movw	r30, r16
    46fe:	91 83       	std	Z+1, r25	; 0x01
    4700:	80 83       	st	Z, r24
    4702:	de 01       	movw	r26, r28
    4704:	a3 57       	subi	r26, 0x73	; 115
    4706:	bf 4f       	sbci	r27, 0xFF	; 255
    4708:	fe 01       	movw	r30, r28
    470a:	ef 56       	subi	r30, 0x6F	; 111
    470c:	ff 4f       	sbci	r31, 0xFF	; 255
    470e:	80 81       	ld	r24, Z
    4710:	91 81       	ldd	r25, Z+1	; 0x01
    4712:	8d 93       	st	X+, r24
    4714:	9c 93       	st	X, r25
    4716:	fe 01       	movw	r30, r28
    4718:	e3 57       	subi	r30, 0x73	; 115
    471a:	ff 4f       	sbci	r31, 0xFF	; 255
    471c:	80 81       	ld	r24, Z
    471e:	91 81       	ldd	r25, Z+1	; 0x01
    4720:	01 97       	sbiw	r24, 0x01	; 1
    4722:	f1 f7       	brne	.-4      	; 0x4720 <main+0x1dee>
    4724:	fe 01       	movw	r30, r28
    4726:	e3 57       	subi	r30, 0x73	; 115
    4728:	ff 4f       	sbci	r31, 0xFF	; 255
    472a:	91 83       	std	Z+1, r25	; 0x01
    472c:	80 83       	st	Z, r24
			_delay_ms(10);
			HLED_voidLEDOff(LED2);
    472e:	60 91 bb 00 	lds	r22, 0x00BB
    4732:	70 91 bc 00 	lds	r23, 0x00BC
    4736:	80 91 bd 00 	lds	r24, 0x00BD
    473a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <HLED_voidLEDOff>
    473e:	fe 01       	movw	r30, r28
    4740:	e7 57       	subi	r30, 0x77	; 119
    4742:	ff 4f       	sbci	r31, 0xFF	; 255
    4744:	80 e0       	ldi	r24, 0x00	; 0
    4746:	90 e0       	ldi	r25, 0x00	; 0
    4748:	a0 e2       	ldi	r26, 0x20	; 32
    474a:	b1 e4       	ldi	r27, 0x41	; 65
    474c:	80 83       	st	Z, r24
    474e:	91 83       	std	Z+1, r25	; 0x01
    4750:	a2 83       	std	Z+2, r26	; 0x02
    4752:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4754:	8e 01       	movw	r16, r28
    4756:	0b 57       	subi	r16, 0x7B	; 123
    4758:	1f 4f       	sbci	r17, 0xFF	; 255
    475a:	fe 01       	movw	r30, r28
    475c:	e7 57       	subi	r30, 0x77	; 119
    475e:	ff 4f       	sbci	r31, 0xFF	; 255
    4760:	60 81       	ld	r22, Z
    4762:	71 81       	ldd	r23, Z+1	; 0x01
    4764:	82 81       	ldd	r24, Z+2	; 0x02
    4766:	93 81       	ldd	r25, Z+3	; 0x03
    4768:	20 e0       	ldi	r18, 0x00	; 0
    476a:	30 e0       	ldi	r19, 0x00	; 0
    476c:	4a ef       	ldi	r20, 0xFA	; 250
    476e:	54 e4       	ldi	r21, 0x44	; 68
    4770:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4774:	dc 01       	movw	r26, r24
    4776:	cb 01       	movw	r24, r22
    4778:	f8 01       	movw	r30, r16
    477a:	80 83       	st	Z, r24
    477c:	91 83       	std	Z+1, r25	; 0x01
    477e:	a2 83       	std	Z+2, r26	; 0x02
    4780:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4782:	fe 01       	movw	r30, r28
    4784:	eb 57       	subi	r30, 0x7B	; 123
    4786:	ff 4f       	sbci	r31, 0xFF	; 255
    4788:	60 81       	ld	r22, Z
    478a:	71 81       	ldd	r23, Z+1	; 0x01
    478c:	82 81       	ldd	r24, Z+2	; 0x02
    478e:	93 81       	ldd	r25, Z+3	; 0x03
    4790:	20 e0       	ldi	r18, 0x00	; 0
    4792:	30 e0       	ldi	r19, 0x00	; 0
    4794:	40 e8       	ldi	r20, 0x80	; 128
    4796:	5f e3       	ldi	r21, 0x3F	; 63
    4798:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    479c:	88 23       	and	r24, r24
    479e:	44 f4       	brge	.+16     	; 0x47b0 <main+0x1e7e>
		__ticks = 1;
    47a0:	fe 01       	movw	r30, r28
    47a2:	ed 57       	subi	r30, 0x7D	; 125
    47a4:	ff 4f       	sbci	r31, 0xFF	; 255
    47a6:	81 e0       	ldi	r24, 0x01	; 1
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	91 83       	std	Z+1, r25	; 0x01
    47ac:	80 83       	st	Z, r24
    47ae:	64 c0       	rjmp	.+200    	; 0x4878 <main+0x1f46>
	else if (__tmp > 65535)
    47b0:	fe 01       	movw	r30, r28
    47b2:	eb 57       	subi	r30, 0x7B	; 123
    47b4:	ff 4f       	sbci	r31, 0xFF	; 255
    47b6:	60 81       	ld	r22, Z
    47b8:	71 81       	ldd	r23, Z+1	; 0x01
    47ba:	82 81       	ldd	r24, Z+2	; 0x02
    47bc:	93 81       	ldd	r25, Z+3	; 0x03
    47be:	20 e0       	ldi	r18, 0x00	; 0
    47c0:	3f ef       	ldi	r19, 0xFF	; 255
    47c2:	4f e7       	ldi	r20, 0x7F	; 127
    47c4:	57 e4       	ldi	r21, 0x47	; 71
    47c6:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    47ca:	18 16       	cp	r1, r24
    47cc:	0c f0       	brlt	.+2      	; 0x47d0 <main+0x1e9e>
    47ce:	43 c0       	rjmp	.+134    	; 0x4856 <main+0x1f24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47d0:	fe 01       	movw	r30, r28
    47d2:	e7 57       	subi	r30, 0x77	; 119
    47d4:	ff 4f       	sbci	r31, 0xFF	; 255
    47d6:	60 81       	ld	r22, Z
    47d8:	71 81       	ldd	r23, Z+1	; 0x01
    47da:	82 81       	ldd	r24, Z+2	; 0x02
    47dc:	93 81       	ldd	r25, Z+3	; 0x03
    47de:	20 e0       	ldi	r18, 0x00	; 0
    47e0:	30 e0       	ldi	r19, 0x00	; 0
    47e2:	40 e2       	ldi	r20, 0x20	; 32
    47e4:	51 e4       	ldi	r21, 0x41	; 65
    47e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    47ea:	dc 01       	movw	r26, r24
    47ec:	cb 01       	movw	r24, r22
    47ee:	8e 01       	movw	r16, r28
    47f0:	0d 57       	subi	r16, 0x7D	; 125
    47f2:	1f 4f       	sbci	r17, 0xFF	; 255
    47f4:	bc 01       	movw	r22, r24
    47f6:	cd 01       	movw	r24, r26
    47f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    47fc:	dc 01       	movw	r26, r24
    47fe:	cb 01       	movw	r24, r22
    4800:	f8 01       	movw	r30, r16
    4802:	91 83       	std	Z+1, r25	; 0x01
    4804:	80 83       	st	Z, r24
    4806:	1f c0       	rjmp	.+62     	; 0x4846 <main+0x1f14>
    4808:	fe 01       	movw	r30, r28
    480a:	ef 57       	subi	r30, 0x7F	; 127
    480c:	ff 4f       	sbci	r31, 0xFF	; 255
    480e:	88 ec       	ldi	r24, 0xC8	; 200
    4810:	90 e0       	ldi	r25, 0x00	; 0
    4812:	91 83       	std	Z+1, r25	; 0x01
    4814:	80 83       	st	Z, r24
    4816:	fe 01       	movw	r30, r28
    4818:	ef 57       	subi	r30, 0x7F	; 127
    481a:	ff 4f       	sbci	r31, 0xFF	; 255
    481c:	80 81       	ld	r24, Z
    481e:	91 81       	ldd	r25, Z+1	; 0x01
    4820:	01 97       	sbiw	r24, 0x01	; 1
    4822:	f1 f7       	brne	.-4      	; 0x4820 <main+0x1eee>
    4824:	fe 01       	movw	r30, r28
    4826:	ef 57       	subi	r30, 0x7F	; 127
    4828:	ff 4f       	sbci	r31, 0xFF	; 255
    482a:	91 83       	std	Z+1, r25	; 0x01
    482c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    482e:	de 01       	movw	r26, r28
    4830:	ad 57       	subi	r26, 0x7D	; 125
    4832:	bf 4f       	sbci	r27, 0xFF	; 255
    4834:	fe 01       	movw	r30, r28
    4836:	ed 57       	subi	r30, 0x7D	; 125
    4838:	ff 4f       	sbci	r31, 0xFF	; 255
    483a:	80 81       	ld	r24, Z
    483c:	91 81       	ldd	r25, Z+1	; 0x01
    483e:	01 97       	sbiw	r24, 0x01	; 1
    4840:	11 96       	adiw	r26, 0x01	; 1
    4842:	9c 93       	st	X, r25
    4844:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4846:	fe 01       	movw	r30, r28
    4848:	ed 57       	subi	r30, 0x7D	; 125
    484a:	ff 4f       	sbci	r31, 0xFF	; 255
    484c:	80 81       	ld	r24, Z
    484e:	91 81       	ldd	r25, Z+1	; 0x01
    4850:	00 97       	sbiw	r24, 0x00	; 0
    4852:	d1 f6       	brne	.-76     	; 0x4808 <main+0x1ed6>
    4854:	27 c0       	rjmp	.+78     	; 0x48a4 <main+0x1f72>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4856:	8e 01       	movw	r16, r28
    4858:	0d 57       	subi	r16, 0x7D	; 125
    485a:	1f 4f       	sbci	r17, 0xFF	; 255
    485c:	fe 01       	movw	r30, r28
    485e:	eb 57       	subi	r30, 0x7B	; 123
    4860:	ff 4f       	sbci	r31, 0xFF	; 255
    4862:	60 81       	ld	r22, Z
    4864:	71 81       	ldd	r23, Z+1	; 0x01
    4866:	82 81       	ldd	r24, Z+2	; 0x02
    4868:	93 81       	ldd	r25, Z+3	; 0x03
    486a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    486e:	dc 01       	movw	r26, r24
    4870:	cb 01       	movw	r24, r22
    4872:	f8 01       	movw	r30, r16
    4874:	91 83       	std	Z+1, r25	; 0x01
    4876:	80 83       	st	Z, r24
    4878:	de 01       	movw	r26, r28
    487a:	a1 58       	subi	r26, 0x81	; 129
    487c:	bf 4f       	sbci	r27, 0xFF	; 255
    487e:	fe 01       	movw	r30, r28
    4880:	ed 57       	subi	r30, 0x7D	; 125
    4882:	ff 4f       	sbci	r31, 0xFF	; 255
    4884:	80 81       	ld	r24, Z
    4886:	91 81       	ldd	r25, Z+1	; 0x01
    4888:	8d 93       	st	X+, r24
    488a:	9c 93       	st	X, r25
    488c:	fe 01       	movw	r30, r28
    488e:	e1 58       	subi	r30, 0x81	; 129
    4890:	ff 4f       	sbci	r31, 0xFF	; 255
    4892:	80 81       	ld	r24, Z
    4894:	91 81       	ldd	r25, Z+1	; 0x01
    4896:	01 97       	sbiw	r24, 0x01	; 1
    4898:	f1 f7       	brne	.-4      	; 0x4896 <main+0x1f64>
    489a:	fe 01       	movw	r30, r28
    489c:	e1 58       	subi	r30, 0x81	; 129
    489e:	ff 4f       	sbci	r31, 0xFF	; 255
    48a0:	91 83       	std	Z+1, r25	; 0x01
    48a2:	80 83       	st	Z, r24
			_delay_ms(10);
			HLED_voidLEDOff(LED1);
    48a4:	60 91 b8 00 	lds	r22, 0x00B8
    48a8:	70 91 b9 00 	lds	r23, 0x00B9
    48ac:	80 91 ba 00 	lds	r24, 0x00BA
    48b0:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <HLED_voidLEDOff>
    48b4:	fe 01       	movw	r30, r28
    48b6:	e5 58       	subi	r30, 0x85	; 133
    48b8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ba:	80 e0       	ldi	r24, 0x00	; 0
    48bc:	90 e0       	ldi	r25, 0x00	; 0
    48be:	a0 e2       	ldi	r26, 0x20	; 32
    48c0:	b1 e4       	ldi	r27, 0x41	; 65
    48c2:	80 83       	st	Z, r24
    48c4:	91 83       	std	Z+1, r25	; 0x01
    48c6:	a2 83       	std	Z+2, r26	; 0x02
    48c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48ca:	8e 01       	movw	r16, r28
    48cc:	09 58       	subi	r16, 0x89	; 137
    48ce:	1f 4f       	sbci	r17, 0xFF	; 255
    48d0:	fe 01       	movw	r30, r28
    48d2:	e5 58       	subi	r30, 0x85	; 133
    48d4:	ff 4f       	sbci	r31, 0xFF	; 255
    48d6:	60 81       	ld	r22, Z
    48d8:	71 81       	ldd	r23, Z+1	; 0x01
    48da:	82 81       	ldd	r24, Z+2	; 0x02
    48dc:	93 81       	ldd	r25, Z+3	; 0x03
    48de:	20 e0       	ldi	r18, 0x00	; 0
    48e0:	30 e0       	ldi	r19, 0x00	; 0
    48e2:	4a ef       	ldi	r20, 0xFA	; 250
    48e4:	54 e4       	ldi	r21, 0x44	; 68
    48e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    48ea:	dc 01       	movw	r26, r24
    48ec:	cb 01       	movw	r24, r22
    48ee:	f8 01       	movw	r30, r16
    48f0:	80 83       	st	Z, r24
    48f2:	91 83       	std	Z+1, r25	; 0x01
    48f4:	a2 83       	std	Z+2, r26	; 0x02
    48f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48f8:	fe 01       	movw	r30, r28
    48fa:	e9 58       	subi	r30, 0x89	; 137
    48fc:	ff 4f       	sbci	r31, 0xFF	; 255
    48fe:	60 81       	ld	r22, Z
    4900:	71 81       	ldd	r23, Z+1	; 0x01
    4902:	82 81       	ldd	r24, Z+2	; 0x02
    4904:	93 81       	ldd	r25, Z+3	; 0x03
    4906:	20 e0       	ldi	r18, 0x00	; 0
    4908:	30 e0       	ldi	r19, 0x00	; 0
    490a:	40 e8       	ldi	r20, 0x80	; 128
    490c:	5f e3       	ldi	r21, 0x3F	; 63
    490e:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    4912:	88 23       	and	r24, r24
    4914:	44 f4       	brge	.+16     	; 0x4926 <main+0x1ff4>
		__ticks = 1;
    4916:	fe 01       	movw	r30, r28
    4918:	eb 58       	subi	r30, 0x8B	; 139
    491a:	ff 4f       	sbci	r31, 0xFF	; 255
    491c:	81 e0       	ldi	r24, 0x01	; 1
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	91 83       	std	Z+1, r25	; 0x01
    4922:	80 83       	st	Z, r24
    4924:	64 c0       	rjmp	.+200    	; 0x49ee <main+0x20bc>
	else if (__tmp > 65535)
    4926:	fe 01       	movw	r30, r28
    4928:	e9 58       	subi	r30, 0x89	; 137
    492a:	ff 4f       	sbci	r31, 0xFF	; 255
    492c:	60 81       	ld	r22, Z
    492e:	71 81       	ldd	r23, Z+1	; 0x01
    4930:	82 81       	ldd	r24, Z+2	; 0x02
    4932:	93 81       	ldd	r25, Z+3	; 0x03
    4934:	20 e0       	ldi	r18, 0x00	; 0
    4936:	3f ef       	ldi	r19, 0xFF	; 255
    4938:	4f e7       	ldi	r20, 0x7F	; 127
    493a:	57 e4       	ldi	r21, 0x47	; 71
    493c:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    4940:	18 16       	cp	r1, r24
    4942:	0c f0       	brlt	.+2      	; 0x4946 <main+0x2014>
    4944:	43 c0       	rjmp	.+134    	; 0x49cc <main+0x209a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4946:	fe 01       	movw	r30, r28
    4948:	e5 58       	subi	r30, 0x85	; 133
    494a:	ff 4f       	sbci	r31, 0xFF	; 255
    494c:	60 81       	ld	r22, Z
    494e:	71 81       	ldd	r23, Z+1	; 0x01
    4950:	82 81       	ldd	r24, Z+2	; 0x02
    4952:	93 81       	ldd	r25, Z+3	; 0x03
    4954:	20 e0       	ldi	r18, 0x00	; 0
    4956:	30 e0       	ldi	r19, 0x00	; 0
    4958:	40 e2       	ldi	r20, 0x20	; 32
    495a:	51 e4       	ldi	r21, 0x41	; 65
    495c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4960:	dc 01       	movw	r26, r24
    4962:	cb 01       	movw	r24, r22
    4964:	8e 01       	movw	r16, r28
    4966:	0b 58       	subi	r16, 0x8B	; 139
    4968:	1f 4f       	sbci	r17, 0xFF	; 255
    496a:	bc 01       	movw	r22, r24
    496c:	cd 01       	movw	r24, r26
    496e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4972:	dc 01       	movw	r26, r24
    4974:	cb 01       	movw	r24, r22
    4976:	f8 01       	movw	r30, r16
    4978:	91 83       	std	Z+1, r25	; 0x01
    497a:	80 83       	st	Z, r24
    497c:	1f c0       	rjmp	.+62     	; 0x49bc <main+0x208a>
    497e:	fe 01       	movw	r30, r28
    4980:	ed 58       	subi	r30, 0x8D	; 141
    4982:	ff 4f       	sbci	r31, 0xFF	; 255
    4984:	88 ec       	ldi	r24, 0xC8	; 200
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	91 83       	std	Z+1, r25	; 0x01
    498a:	80 83       	st	Z, r24
    498c:	fe 01       	movw	r30, r28
    498e:	ed 58       	subi	r30, 0x8D	; 141
    4990:	ff 4f       	sbci	r31, 0xFF	; 255
    4992:	80 81       	ld	r24, Z
    4994:	91 81       	ldd	r25, Z+1	; 0x01
    4996:	01 97       	sbiw	r24, 0x01	; 1
    4998:	f1 f7       	brne	.-4      	; 0x4996 <main+0x2064>
    499a:	fe 01       	movw	r30, r28
    499c:	ed 58       	subi	r30, 0x8D	; 141
    499e:	ff 4f       	sbci	r31, 0xFF	; 255
    49a0:	91 83       	std	Z+1, r25	; 0x01
    49a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49a4:	de 01       	movw	r26, r28
    49a6:	ab 58       	subi	r26, 0x8B	; 139
    49a8:	bf 4f       	sbci	r27, 0xFF	; 255
    49aa:	fe 01       	movw	r30, r28
    49ac:	eb 58       	subi	r30, 0x8B	; 139
    49ae:	ff 4f       	sbci	r31, 0xFF	; 255
    49b0:	80 81       	ld	r24, Z
    49b2:	91 81       	ldd	r25, Z+1	; 0x01
    49b4:	01 97       	sbiw	r24, 0x01	; 1
    49b6:	11 96       	adiw	r26, 0x01	; 1
    49b8:	9c 93       	st	X, r25
    49ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49bc:	fe 01       	movw	r30, r28
    49be:	eb 58       	subi	r30, 0x8B	; 139
    49c0:	ff 4f       	sbci	r31, 0xFF	; 255
    49c2:	80 81       	ld	r24, Z
    49c4:	91 81       	ldd	r25, Z+1	; 0x01
    49c6:	00 97       	sbiw	r24, 0x00	; 0
    49c8:	d1 f6       	brne	.-76     	; 0x497e <main+0x204c>
    49ca:	28 c0       	rjmp	.+80     	; 0x4a1c <main+0x20ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49cc:	8e 01       	movw	r16, r28
    49ce:	0b 58       	subi	r16, 0x8B	; 139
    49d0:	1f 4f       	sbci	r17, 0xFF	; 255
    49d2:	fe 01       	movw	r30, r28
    49d4:	e9 58       	subi	r30, 0x89	; 137
    49d6:	ff 4f       	sbci	r31, 0xFF	; 255
    49d8:	60 81       	ld	r22, Z
    49da:	71 81       	ldd	r23, Z+1	; 0x01
    49dc:	82 81       	ldd	r24, Z+2	; 0x02
    49de:	93 81       	ldd	r25, Z+3	; 0x03
    49e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    49e4:	dc 01       	movw	r26, r24
    49e6:	cb 01       	movw	r24, r22
    49e8:	f8 01       	movw	r30, r16
    49ea:	91 83       	std	Z+1, r25	; 0x01
    49ec:	80 83       	st	Z, r24
    49ee:	de 01       	movw	r26, r28
    49f0:	af 58       	subi	r26, 0x8F	; 143
    49f2:	bf 4f       	sbci	r27, 0xFF	; 255
    49f4:	fe 01       	movw	r30, r28
    49f6:	eb 58       	subi	r30, 0x8B	; 139
    49f8:	ff 4f       	sbci	r31, 0xFF	; 255
    49fa:	80 81       	ld	r24, Z
    49fc:	91 81       	ldd	r25, Z+1	; 0x01
    49fe:	11 96       	adiw	r26, 0x01	; 1
    4a00:	9c 93       	st	X, r25
    4a02:	8e 93       	st	-X, r24
    4a04:	fe 01       	movw	r30, r28
    4a06:	ef 58       	subi	r30, 0x8F	; 143
    4a08:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0a:	80 81       	ld	r24, Z
    4a0c:	91 81       	ldd	r25, Z+1	; 0x01
    4a0e:	01 97       	sbiw	r24, 0x01	; 1
    4a10:	f1 f7       	brne	.-4      	; 0x4a0e <main+0x20dc>
    4a12:	fe 01       	movw	r30, r28
    4a14:	ef 58       	subi	r30, 0x8F	; 143
    4a16:	ff 4f       	sbci	r31, 0xFF	; 255
    4a18:	91 83       	std	Z+1, r25	; 0x01
    4a1a:	80 83       	st	Z, r24
			_delay_ms(10);

		}
		if(keyPressed=='4')
    4a1c:	fe 01       	movw	r30, r28
    4a1e:	eb 55       	subi	r30, 0x5B	; 91
    4a20:	fe 4f       	sbci	r31, 0xFE	; 254
    4a22:	80 81       	ld	r24, Z
    4a24:	84 33       	cpi	r24, 0x34	; 52
    4a26:	11 f0       	breq	.+4      	; 0x4a2c <main+0x20fa>
    4a28:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <main+0x376>
		{
			HLED_voidLEDOn(LED1);
    4a2c:	60 91 b8 00 	lds	r22, 0x00B8
    4a30:	70 91 b9 00 	lds	r23, 0x00B9
    4a34:	80 91 ba 00 	lds	r24, 0x00BA
    4a38:	0e 94 cb 0b 	call	0x1796	; 0x1796 <HLED_voidLEDOn>
    4a3c:	fe 01       	movw	r30, r28
    4a3e:	e3 59       	subi	r30, 0x93	; 147
    4a40:	ff 4f       	sbci	r31, 0xFF	; 255
    4a42:	80 e0       	ldi	r24, 0x00	; 0
    4a44:	90 e0       	ldi	r25, 0x00	; 0
    4a46:	a8 e4       	ldi	r26, 0x48	; 72
    4a48:	b2 e4       	ldi	r27, 0x42	; 66
    4a4a:	80 83       	st	Z, r24
    4a4c:	91 83       	std	Z+1, r25	; 0x01
    4a4e:	a2 83       	std	Z+2, r26	; 0x02
    4a50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a52:	8e 01       	movw	r16, r28
    4a54:	07 59       	subi	r16, 0x97	; 151
    4a56:	1f 4f       	sbci	r17, 0xFF	; 255
    4a58:	fe 01       	movw	r30, r28
    4a5a:	e3 59       	subi	r30, 0x93	; 147
    4a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5e:	60 81       	ld	r22, Z
    4a60:	71 81       	ldd	r23, Z+1	; 0x01
    4a62:	82 81       	ldd	r24, Z+2	; 0x02
    4a64:	93 81       	ldd	r25, Z+3	; 0x03
    4a66:	20 e0       	ldi	r18, 0x00	; 0
    4a68:	30 e0       	ldi	r19, 0x00	; 0
    4a6a:	4a ef       	ldi	r20, 0xFA	; 250
    4a6c:	54 e4       	ldi	r21, 0x44	; 68
    4a6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4a72:	dc 01       	movw	r26, r24
    4a74:	cb 01       	movw	r24, r22
    4a76:	f8 01       	movw	r30, r16
    4a78:	80 83       	st	Z, r24
    4a7a:	91 83       	std	Z+1, r25	; 0x01
    4a7c:	a2 83       	std	Z+2, r26	; 0x02
    4a7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a80:	fe 01       	movw	r30, r28
    4a82:	e7 59       	subi	r30, 0x97	; 151
    4a84:	ff 4f       	sbci	r31, 0xFF	; 255
    4a86:	60 81       	ld	r22, Z
    4a88:	71 81       	ldd	r23, Z+1	; 0x01
    4a8a:	82 81       	ldd	r24, Z+2	; 0x02
    4a8c:	93 81       	ldd	r25, Z+3	; 0x03
    4a8e:	20 e0       	ldi	r18, 0x00	; 0
    4a90:	30 e0       	ldi	r19, 0x00	; 0
    4a92:	40 e8       	ldi	r20, 0x80	; 128
    4a94:	5f e3       	ldi	r21, 0x3F	; 63
    4a96:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    4a9a:	88 23       	and	r24, r24
    4a9c:	44 f4       	brge	.+16     	; 0x4aae <main+0x217c>
		__ticks = 1;
    4a9e:	fe 01       	movw	r30, r28
    4aa0:	e9 59       	subi	r30, 0x99	; 153
    4aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa4:	81 e0       	ldi	r24, 0x01	; 1
    4aa6:	90 e0       	ldi	r25, 0x00	; 0
    4aa8:	91 83       	std	Z+1, r25	; 0x01
    4aaa:	80 83       	st	Z, r24
    4aac:	64 c0       	rjmp	.+200    	; 0x4b76 <main+0x2244>
	else if (__tmp > 65535)
    4aae:	fe 01       	movw	r30, r28
    4ab0:	e7 59       	subi	r30, 0x97	; 151
    4ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab4:	60 81       	ld	r22, Z
    4ab6:	71 81       	ldd	r23, Z+1	; 0x01
    4ab8:	82 81       	ldd	r24, Z+2	; 0x02
    4aba:	93 81       	ldd	r25, Z+3	; 0x03
    4abc:	20 e0       	ldi	r18, 0x00	; 0
    4abe:	3f ef       	ldi	r19, 0xFF	; 255
    4ac0:	4f e7       	ldi	r20, 0x7F	; 127
    4ac2:	57 e4       	ldi	r21, 0x47	; 71
    4ac4:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    4ac8:	18 16       	cp	r1, r24
    4aca:	0c f0       	brlt	.+2      	; 0x4ace <main+0x219c>
    4acc:	43 c0       	rjmp	.+134    	; 0x4b54 <main+0x2222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ace:	fe 01       	movw	r30, r28
    4ad0:	e3 59       	subi	r30, 0x93	; 147
    4ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad4:	60 81       	ld	r22, Z
    4ad6:	71 81       	ldd	r23, Z+1	; 0x01
    4ad8:	82 81       	ldd	r24, Z+2	; 0x02
    4ada:	93 81       	ldd	r25, Z+3	; 0x03
    4adc:	20 e0       	ldi	r18, 0x00	; 0
    4ade:	30 e0       	ldi	r19, 0x00	; 0
    4ae0:	40 e2       	ldi	r20, 0x20	; 32
    4ae2:	51 e4       	ldi	r21, 0x41	; 65
    4ae4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ae8:	dc 01       	movw	r26, r24
    4aea:	cb 01       	movw	r24, r22
    4aec:	8e 01       	movw	r16, r28
    4aee:	09 59       	subi	r16, 0x99	; 153
    4af0:	1f 4f       	sbci	r17, 0xFF	; 255
    4af2:	bc 01       	movw	r22, r24
    4af4:	cd 01       	movw	r24, r26
    4af6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4afa:	dc 01       	movw	r26, r24
    4afc:	cb 01       	movw	r24, r22
    4afe:	f8 01       	movw	r30, r16
    4b00:	91 83       	std	Z+1, r25	; 0x01
    4b02:	80 83       	st	Z, r24
    4b04:	1f c0       	rjmp	.+62     	; 0x4b44 <main+0x2212>
    4b06:	fe 01       	movw	r30, r28
    4b08:	eb 59       	subi	r30, 0x9B	; 155
    4b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0c:	88 ec       	ldi	r24, 0xC8	; 200
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	91 83       	std	Z+1, r25	; 0x01
    4b12:	80 83       	st	Z, r24
    4b14:	fe 01       	movw	r30, r28
    4b16:	eb 59       	subi	r30, 0x9B	; 155
    4b18:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1a:	80 81       	ld	r24, Z
    4b1c:	91 81       	ldd	r25, Z+1	; 0x01
    4b1e:	01 97       	sbiw	r24, 0x01	; 1
    4b20:	f1 f7       	brne	.-4      	; 0x4b1e <main+0x21ec>
    4b22:	fe 01       	movw	r30, r28
    4b24:	eb 59       	subi	r30, 0x9B	; 155
    4b26:	ff 4f       	sbci	r31, 0xFF	; 255
    4b28:	91 83       	std	Z+1, r25	; 0x01
    4b2a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b2c:	de 01       	movw	r26, r28
    4b2e:	a9 59       	subi	r26, 0x99	; 153
    4b30:	bf 4f       	sbci	r27, 0xFF	; 255
    4b32:	fe 01       	movw	r30, r28
    4b34:	e9 59       	subi	r30, 0x99	; 153
    4b36:	ff 4f       	sbci	r31, 0xFF	; 255
    4b38:	80 81       	ld	r24, Z
    4b3a:	91 81       	ldd	r25, Z+1	; 0x01
    4b3c:	01 97       	sbiw	r24, 0x01	; 1
    4b3e:	11 96       	adiw	r26, 0x01	; 1
    4b40:	9c 93       	st	X, r25
    4b42:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b44:	fe 01       	movw	r30, r28
    4b46:	e9 59       	subi	r30, 0x99	; 153
    4b48:	ff 4f       	sbci	r31, 0xFF	; 255
    4b4a:	80 81       	ld	r24, Z
    4b4c:	91 81       	ldd	r25, Z+1	; 0x01
    4b4e:	00 97       	sbiw	r24, 0x00	; 0
    4b50:	d1 f6       	brne	.-76     	; 0x4b06 <main+0x21d4>
    4b52:	27 c0       	rjmp	.+78     	; 0x4ba2 <main+0x2270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b54:	8e 01       	movw	r16, r28
    4b56:	09 59       	subi	r16, 0x99	; 153
    4b58:	1f 4f       	sbci	r17, 0xFF	; 255
    4b5a:	fe 01       	movw	r30, r28
    4b5c:	e7 59       	subi	r30, 0x97	; 151
    4b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b60:	60 81       	ld	r22, Z
    4b62:	71 81       	ldd	r23, Z+1	; 0x01
    4b64:	82 81       	ldd	r24, Z+2	; 0x02
    4b66:	93 81       	ldd	r25, Z+3	; 0x03
    4b68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4b6c:	dc 01       	movw	r26, r24
    4b6e:	cb 01       	movw	r24, r22
    4b70:	f8 01       	movw	r30, r16
    4b72:	91 83       	std	Z+1, r25	; 0x01
    4b74:	80 83       	st	Z, r24
    4b76:	de 01       	movw	r26, r28
    4b78:	ad 59       	subi	r26, 0x9D	; 157
    4b7a:	bf 4f       	sbci	r27, 0xFF	; 255
    4b7c:	fe 01       	movw	r30, r28
    4b7e:	e9 59       	subi	r30, 0x99	; 153
    4b80:	ff 4f       	sbci	r31, 0xFF	; 255
    4b82:	80 81       	ld	r24, Z
    4b84:	91 81       	ldd	r25, Z+1	; 0x01
    4b86:	8d 93       	st	X+, r24
    4b88:	9c 93       	st	X, r25
    4b8a:	fe 01       	movw	r30, r28
    4b8c:	ed 59       	subi	r30, 0x9D	; 157
    4b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b90:	80 81       	ld	r24, Z
    4b92:	91 81       	ldd	r25, Z+1	; 0x01
    4b94:	01 97       	sbiw	r24, 0x01	; 1
    4b96:	f1 f7       	brne	.-4      	; 0x4b94 <main+0x2262>
    4b98:	fe 01       	movw	r30, r28
    4b9a:	ed 59       	subi	r30, 0x9D	; 157
    4b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9e:	91 83       	std	Z+1, r25	; 0x01
    4ba0:	80 83       	st	Z, r24
			_delay_ms(50);
			HLED_voidLEDOff(LED2);
    4ba2:	60 91 bb 00 	lds	r22, 0x00BB
    4ba6:	70 91 bc 00 	lds	r23, 0x00BC
    4baa:	80 91 bd 00 	lds	r24, 0x00BD
    4bae:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <HLED_voidLEDOff>
    4bb2:	fe 01       	movw	r30, r28
    4bb4:	e1 5a       	subi	r30, 0xA1	; 161
    4bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb8:	80 e0       	ldi	r24, 0x00	; 0
    4bba:	90 e0       	ldi	r25, 0x00	; 0
    4bbc:	a8 e4       	ldi	r26, 0x48	; 72
    4bbe:	b2 e4       	ldi	r27, 0x42	; 66
    4bc0:	80 83       	st	Z, r24
    4bc2:	91 83       	std	Z+1, r25	; 0x01
    4bc4:	a2 83       	std	Z+2, r26	; 0x02
    4bc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bc8:	8e 01       	movw	r16, r28
    4bca:	05 5a       	subi	r16, 0xA5	; 165
    4bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    4bce:	fe 01       	movw	r30, r28
    4bd0:	e1 5a       	subi	r30, 0xA1	; 161
    4bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd4:	60 81       	ld	r22, Z
    4bd6:	71 81       	ldd	r23, Z+1	; 0x01
    4bd8:	82 81       	ldd	r24, Z+2	; 0x02
    4bda:	93 81       	ldd	r25, Z+3	; 0x03
    4bdc:	20 e0       	ldi	r18, 0x00	; 0
    4bde:	30 e0       	ldi	r19, 0x00	; 0
    4be0:	4a ef       	ldi	r20, 0xFA	; 250
    4be2:	54 e4       	ldi	r21, 0x44	; 68
    4be4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4be8:	dc 01       	movw	r26, r24
    4bea:	cb 01       	movw	r24, r22
    4bec:	f8 01       	movw	r30, r16
    4bee:	80 83       	st	Z, r24
    4bf0:	91 83       	std	Z+1, r25	; 0x01
    4bf2:	a2 83       	std	Z+2, r26	; 0x02
    4bf4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4bf6:	fe 01       	movw	r30, r28
    4bf8:	e5 5a       	subi	r30, 0xA5	; 165
    4bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    4bfc:	60 81       	ld	r22, Z
    4bfe:	71 81       	ldd	r23, Z+1	; 0x01
    4c00:	82 81       	ldd	r24, Z+2	; 0x02
    4c02:	93 81       	ldd	r25, Z+3	; 0x03
    4c04:	20 e0       	ldi	r18, 0x00	; 0
    4c06:	30 e0       	ldi	r19, 0x00	; 0
    4c08:	40 e8       	ldi	r20, 0x80	; 128
    4c0a:	5f e3       	ldi	r21, 0x3F	; 63
    4c0c:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    4c10:	88 23       	and	r24, r24
    4c12:	44 f4       	brge	.+16     	; 0x4c24 <main+0x22f2>
		__ticks = 1;
    4c14:	fe 01       	movw	r30, r28
    4c16:	e7 5a       	subi	r30, 0xA7	; 167
    4c18:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1a:	81 e0       	ldi	r24, 0x01	; 1
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	91 83       	std	Z+1, r25	; 0x01
    4c20:	80 83       	st	Z, r24
    4c22:	64 c0       	rjmp	.+200    	; 0x4cec <main+0x23ba>
	else if (__tmp > 65535)
    4c24:	fe 01       	movw	r30, r28
    4c26:	e5 5a       	subi	r30, 0xA5	; 165
    4c28:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2a:	60 81       	ld	r22, Z
    4c2c:	71 81       	ldd	r23, Z+1	; 0x01
    4c2e:	82 81       	ldd	r24, Z+2	; 0x02
    4c30:	93 81       	ldd	r25, Z+3	; 0x03
    4c32:	20 e0       	ldi	r18, 0x00	; 0
    4c34:	3f ef       	ldi	r19, 0xFF	; 255
    4c36:	4f e7       	ldi	r20, 0x7F	; 127
    4c38:	57 e4       	ldi	r21, 0x47	; 71
    4c3a:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    4c3e:	18 16       	cp	r1, r24
    4c40:	0c f0       	brlt	.+2      	; 0x4c44 <main+0x2312>
    4c42:	43 c0       	rjmp	.+134    	; 0x4cca <main+0x2398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c44:	fe 01       	movw	r30, r28
    4c46:	e1 5a       	subi	r30, 0xA1	; 161
    4c48:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4a:	60 81       	ld	r22, Z
    4c4c:	71 81       	ldd	r23, Z+1	; 0x01
    4c4e:	82 81       	ldd	r24, Z+2	; 0x02
    4c50:	93 81       	ldd	r25, Z+3	; 0x03
    4c52:	20 e0       	ldi	r18, 0x00	; 0
    4c54:	30 e0       	ldi	r19, 0x00	; 0
    4c56:	40 e2       	ldi	r20, 0x20	; 32
    4c58:	51 e4       	ldi	r21, 0x41	; 65
    4c5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4c5e:	dc 01       	movw	r26, r24
    4c60:	cb 01       	movw	r24, r22
    4c62:	8e 01       	movw	r16, r28
    4c64:	07 5a       	subi	r16, 0xA7	; 167
    4c66:	1f 4f       	sbci	r17, 0xFF	; 255
    4c68:	bc 01       	movw	r22, r24
    4c6a:	cd 01       	movw	r24, r26
    4c6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4c70:	dc 01       	movw	r26, r24
    4c72:	cb 01       	movw	r24, r22
    4c74:	f8 01       	movw	r30, r16
    4c76:	91 83       	std	Z+1, r25	; 0x01
    4c78:	80 83       	st	Z, r24
    4c7a:	1f c0       	rjmp	.+62     	; 0x4cba <main+0x2388>
    4c7c:	fe 01       	movw	r30, r28
    4c7e:	e9 5a       	subi	r30, 0xA9	; 169
    4c80:	ff 4f       	sbci	r31, 0xFF	; 255
    4c82:	88 ec       	ldi	r24, 0xC8	; 200
    4c84:	90 e0       	ldi	r25, 0x00	; 0
    4c86:	91 83       	std	Z+1, r25	; 0x01
    4c88:	80 83       	st	Z, r24
    4c8a:	fe 01       	movw	r30, r28
    4c8c:	e9 5a       	subi	r30, 0xA9	; 169
    4c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c90:	80 81       	ld	r24, Z
    4c92:	91 81       	ldd	r25, Z+1	; 0x01
    4c94:	01 97       	sbiw	r24, 0x01	; 1
    4c96:	f1 f7       	brne	.-4      	; 0x4c94 <main+0x2362>
    4c98:	fe 01       	movw	r30, r28
    4c9a:	e9 5a       	subi	r30, 0xA9	; 169
    4c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9e:	91 83       	std	Z+1, r25	; 0x01
    4ca0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ca2:	de 01       	movw	r26, r28
    4ca4:	a7 5a       	subi	r26, 0xA7	; 167
    4ca6:	bf 4f       	sbci	r27, 0xFF	; 255
    4ca8:	fe 01       	movw	r30, r28
    4caa:	e7 5a       	subi	r30, 0xA7	; 167
    4cac:	ff 4f       	sbci	r31, 0xFF	; 255
    4cae:	80 81       	ld	r24, Z
    4cb0:	91 81       	ldd	r25, Z+1	; 0x01
    4cb2:	01 97       	sbiw	r24, 0x01	; 1
    4cb4:	11 96       	adiw	r26, 0x01	; 1
    4cb6:	9c 93       	st	X, r25
    4cb8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cba:	fe 01       	movw	r30, r28
    4cbc:	e7 5a       	subi	r30, 0xA7	; 167
    4cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc0:	80 81       	ld	r24, Z
    4cc2:	91 81       	ldd	r25, Z+1	; 0x01
    4cc4:	00 97       	sbiw	r24, 0x00	; 0
    4cc6:	d1 f6       	brne	.-76     	; 0x4c7c <main+0x234a>
    4cc8:	27 c0       	rjmp	.+78     	; 0x4d18 <main+0x23e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cca:	8e 01       	movw	r16, r28
    4ccc:	07 5a       	subi	r16, 0xA7	; 167
    4cce:	1f 4f       	sbci	r17, 0xFF	; 255
    4cd0:	fe 01       	movw	r30, r28
    4cd2:	e5 5a       	subi	r30, 0xA5	; 165
    4cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd6:	60 81       	ld	r22, Z
    4cd8:	71 81       	ldd	r23, Z+1	; 0x01
    4cda:	82 81       	ldd	r24, Z+2	; 0x02
    4cdc:	93 81       	ldd	r25, Z+3	; 0x03
    4cde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ce2:	dc 01       	movw	r26, r24
    4ce4:	cb 01       	movw	r24, r22
    4ce6:	f8 01       	movw	r30, r16
    4ce8:	91 83       	std	Z+1, r25	; 0x01
    4cea:	80 83       	st	Z, r24
    4cec:	de 01       	movw	r26, r28
    4cee:	ab 5a       	subi	r26, 0xAB	; 171
    4cf0:	bf 4f       	sbci	r27, 0xFF	; 255
    4cf2:	fe 01       	movw	r30, r28
    4cf4:	e7 5a       	subi	r30, 0xA7	; 167
    4cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf8:	80 81       	ld	r24, Z
    4cfa:	91 81       	ldd	r25, Z+1	; 0x01
    4cfc:	8d 93       	st	X+, r24
    4cfe:	9c 93       	st	X, r25
    4d00:	fe 01       	movw	r30, r28
    4d02:	eb 5a       	subi	r30, 0xAB	; 171
    4d04:	ff 4f       	sbci	r31, 0xFF	; 255
    4d06:	80 81       	ld	r24, Z
    4d08:	91 81       	ldd	r25, Z+1	; 0x01
    4d0a:	01 97       	sbiw	r24, 0x01	; 1
    4d0c:	f1 f7       	brne	.-4      	; 0x4d0a <main+0x23d8>
    4d0e:	fe 01       	movw	r30, r28
    4d10:	eb 5a       	subi	r30, 0xAB	; 171
    4d12:	ff 4f       	sbci	r31, 0xFF	; 255
    4d14:	91 83       	std	Z+1, r25	; 0x01
    4d16:	80 83       	st	Z, r24
			_delay_ms(50);
			HLED_voidLEDOff(LED3);
    4d18:	60 91 be 00 	lds	r22, 0x00BE
    4d1c:	70 91 bf 00 	lds	r23, 0x00BF
    4d20:	80 91 c0 00 	lds	r24, 0x00C0
    4d24:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <HLED_voidLEDOff>
    4d28:	fe 01       	movw	r30, r28
    4d2a:	ef 5a       	subi	r30, 0xAF	; 175
    4d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d2e:	80 e0       	ldi	r24, 0x00	; 0
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	a8 e4       	ldi	r26, 0x48	; 72
    4d34:	b2 e4       	ldi	r27, 0x42	; 66
    4d36:	80 83       	st	Z, r24
    4d38:	91 83       	std	Z+1, r25	; 0x01
    4d3a:	a2 83       	std	Z+2, r26	; 0x02
    4d3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d3e:	8e 01       	movw	r16, r28
    4d40:	03 5b       	subi	r16, 0xB3	; 179
    4d42:	1f 4f       	sbci	r17, 0xFF	; 255
    4d44:	fe 01       	movw	r30, r28
    4d46:	ef 5a       	subi	r30, 0xAF	; 175
    4d48:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4a:	60 81       	ld	r22, Z
    4d4c:	71 81       	ldd	r23, Z+1	; 0x01
    4d4e:	82 81       	ldd	r24, Z+2	; 0x02
    4d50:	93 81       	ldd	r25, Z+3	; 0x03
    4d52:	20 e0       	ldi	r18, 0x00	; 0
    4d54:	30 e0       	ldi	r19, 0x00	; 0
    4d56:	4a ef       	ldi	r20, 0xFA	; 250
    4d58:	54 e4       	ldi	r21, 0x44	; 68
    4d5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4d5e:	dc 01       	movw	r26, r24
    4d60:	cb 01       	movw	r24, r22
    4d62:	f8 01       	movw	r30, r16
    4d64:	80 83       	st	Z, r24
    4d66:	91 83       	std	Z+1, r25	; 0x01
    4d68:	a2 83       	std	Z+2, r26	; 0x02
    4d6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d6c:	fe 01       	movw	r30, r28
    4d6e:	e3 5b       	subi	r30, 0xB3	; 179
    4d70:	ff 4f       	sbci	r31, 0xFF	; 255
    4d72:	60 81       	ld	r22, Z
    4d74:	71 81       	ldd	r23, Z+1	; 0x01
    4d76:	82 81       	ldd	r24, Z+2	; 0x02
    4d78:	93 81       	ldd	r25, Z+3	; 0x03
    4d7a:	20 e0       	ldi	r18, 0x00	; 0
    4d7c:	30 e0       	ldi	r19, 0x00	; 0
    4d7e:	40 e8       	ldi	r20, 0x80	; 128
    4d80:	5f e3       	ldi	r21, 0x3F	; 63
    4d82:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    4d86:	88 23       	and	r24, r24
    4d88:	44 f4       	brge	.+16     	; 0x4d9a <main+0x2468>
		__ticks = 1;
    4d8a:	fe 01       	movw	r30, r28
    4d8c:	e5 5b       	subi	r30, 0xB5	; 181
    4d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d90:	81 e0       	ldi	r24, 0x01	; 1
    4d92:	90 e0       	ldi	r25, 0x00	; 0
    4d94:	91 83       	std	Z+1, r25	; 0x01
    4d96:	80 83       	st	Z, r24
    4d98:	64 c0       	rjmp	.+200    	; 0x4e62 <main+0x2530>
	else if (__tmp > 65535)
    4d9a:	fe 01       	movw	r30, r28
    4d9c:	e3 5b       	subi	r30, 0xB3	; 179
    4d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4da0:	60 81       	ld	r22, Z
    4da2:	71 81       	ldd	r23, Z+1	; 0x01
    4da4:	82 81       	ldd	r24, Z+2	; 0x02
    4da6:	93 81       	ldd	r25, Z+3	; 0x03
    4da8:	20 e0       	ldi	r18, 0x00	; 0
    4daa:	3f ef       	ldi	r19, 0xFF	; 255
    4dac:	4f e7       	ldi	r20, 0x7F	; 127
    4dae:	57 e4       	ldi	r21, 0x47	; 71
    4db0:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    4db4:	18 16       	cp	r1, r24
    4db6:	0c f0       	brlt	.+2      	; 0x4dba <main+0x2488>
    4db8:	43 c0       	rjmp	.+134    	; 0x4e40 <main+0x250e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dba:	fe 01       	movw	r30, r28
    4dbc:	ef 5a       	subi	r30, 0xAF	; 175
    4dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc0:	60 81       	ld	r22, Z
    4dc2:	71 81       	ldd	r23, Z+1	; 0x01
    4dc4:	82 81       	ldd	r24, Z+2	; 0x02
    4dc6:	93 81       	ldd	r25, Z+3	; 0x03
    4dc8:	20 e0       	ldi	r18, 0x00	; 0
    4dca:	30 e0       	ldi	r19, 0x00	; 0
    4dcc:	40 e2       	ldi	r20, 0x20	; 32
    4dce:	51 e4       	ldi	r21, 0x41	; 65
    4dd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4dd4:	dc 01       	movw	r26, r24
    4dd6:	cb 01       	movw	r24, r22
    4dd8:	8e 01       	movw	r16, r28
    4dda:	05 5b       	subi	r16, 0xB5	; 181
    4ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    4dde:	bc 01       	movw	r22, r24
    4de0:	cd 01       	movw	r24, r26
    4de2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4de6:	dc 01       	movw	r26, r24
    4de8:	cb 01       	movw	r24, r22
    4dea:	f8 01       	movw	r30, r16
    4dec:	91 83       	std	Z+1, r25	; 0x01
    4dee:	80 83       	st	Z, r24
    4df0:	1f c0       	rjmp	.+62     	; 0x4e30 <main+0x24fe>
    4df2:	fe 01       	movw	r30, r28
    4df4:	e7 5b       	subi	r30, 0xB7	; 183
    4df6:	ff 4f       	sbci	r31, 0xFF	; 255
    4df8:	88 ec       	ldi	r24, 0xC8	; 200
    4dfa:	90 e0       	ldi	r25, 0x00	; 0
    4dfc:	91 83       	std	Z+1, r25	; 0x01
    4dfe:	80 83       	st	Z, r24
    4e00:	fe 01       	movw	r30, r28
    4e02:	e7 5b       	subi	r30, 0xB7	; 183
    4e04:	ff 4f       	sbci	r31, 0xFF	; 255
    4e06:	80 81       	ld	r24, Z
    4e08:	91 81       	ldd	r25, Z+1	; 0x01
    4e0a:	01 97       	sbiw	r24, 0x01	; 1
    4e0c:	f1 f7       	brne	.-4      	; 0x4e0a <main+0x24d8>
    4e0e:	fe 01       	movw	r30, r28
    4e10:	e7 5b       	subi	r30, 0xB7	; 183
    4e12:	ff 4f       	sbci	r31, 0xFF	; 255
    4e14:	91 83       	std	Z+1, r25	; 0x01
    4e16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e18:	de 01       	movw	r26, r28
    4e1a:	a5 5b       	subi	r26, 0xB5	; 181
    4e1c:	bf 4f       	sbci	r27, 0xFF	; 255
    4e1e:	fe 01       	movw	r30, r28
    4e20:	e5 5b       	subi	r30, 0xB5	; 181
    4e22:	ff 4f       	sbci	r31, 0xFF	; 255
    4e24:	80 81       	ld	r24, Z
    4e26:	91 81       	ldd	r25, Z+1	; 0x01
    4e28:	01 97       	sbiw	r24, 0x01	; 1
    4e2a:	11 96       	adiw	r26, 0x01	; 1
    4e2c:	9c 93       	st	X, r25
    4e2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e30:	fe 01       	movw	r30, r28
    4e32:	e5 5b       	subi	r30, 0xB5	; 181
    4e34:	ff 4f       	sbci	r31, 0xFF	; 255
    4e36:	80 81       	ld	r24, Z
    4e38:	91 81       	ldd	r25, Z+1	; 0x01
    4e3a:	00 97       	sbiw	r24, 0x00	; 0
    4e3c:	d1 f6       	brne	.-76     	; 0x4df2 <main+0x24c0>
    4e3e:	27 c0       	rjmp	.+78     	; 0x4e8e <main+0x255c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e40:	8e 01       	movw	r16, r28
    4e42:	05 5b       	subi	r16, 0xB5	; 181
    4e44:	1f 4f       	sbci	r17, 0xFF	; 255
    4e46:	fe 01       	movw	r30, r28
    4e48:	e3 5b       	subi	r30, 0xB3	; 179
    4e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e4c:	60 81       	ld	r22, Z
    4e4e:	71 81       	ldd	r23, Z+1	; 0x01
    4e50:	82 81       	ldd	r24, Z+2	; 0x02
    4e52:	93 81       	ldd	r25, Z+3	; 0x03
    4e54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e58:	dc 01       	movw	r26, r24
    4e5a:	cb 01       	movw	r24, r22
    4e5c:	f8 01       	movw	r30, r16
    4e5e:	91 83       	std	Z+1, r25	; 0x01
    4e60:	80 83       	st	Z, r24
    4e62:	de 01       	movw	r26, r28
    4e64:	a9 5b       	subi	r26, 0xB9	; 185
    4e66:	bf 4f       	sbci	r27, 0xFF	; 255
    4e68:	fe 01       	movw	r30, r28
    4e6a:	e5 5b       	subi	r30, 0xB5	; 181
    4e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e6e:	80 81       	ld	r24, Z
    4e70:	91 81       	ldd	r25, Z+1	; 0x01
    4e72:	8d 93       	st	X+, r24
    4e74:	9c 93       	st	X, r25
    4e76:	fe 01       	movw	r30, r28
    4e78:	e9 5b       	subi	r30, 0xB9	; 185
    4e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e7c:	80 81       	ld	r24, Z
    4e7e:	91 81       	ldd	r25, Z+1	; 0x01
    4e80:	01 97       	sbiw	r24, 0x01	; 1
    4e82:	f1 f7       	brne	.-4      	; 0x4e80 <main+0x254e>
    4e84:	fe 01       	movw	r30, r28
    4e86:	e9 5b       	subi	r30, 0xB9	; 185
    4e88:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8a:	91 83       	std	Z+1, r25	; 0x01
    4e8c:	80 83       	st	Z, r24
			_delay_ms(50);
			HLED_voidLEDOn(LED4);
    4e8e:	60 91 c1 00 	lds	r22, 0x00C1
    4e92:	70 91 c2 00 	lds	r23, 0x00C2
    4e96:	80 91 c3 00 	lds	r24, 0x00C3
    4e9a:	0e 94 cb 0b 	call	0x1796	; 0x1796 <HLED_voidLEDOn>
    4e9e:	fe 01       	movw	r30, r28
    4ea0:	ed 5b       	subi	r30, 0xBD	; 189
    4ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea4:	80 e0       	ldi	r24, 0x00	; 0
    4ea6:	90 e0       	ldi	r25, 0x00	; 0
    4ea8:	a0 e2       	ldi	r26, 0x20	; 32
    4eaa:	b1 e4       	ldi	r27, 0x41	; 65
    4eac:	80 83       	st	Z, r24
    4eae:	91 83       	std	Z+1, r25	; 0x01
    4eb0:	a2 83       	std	Z+2, r26	; 0x02
    4eb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4eb4:	8e 01       	movw	r16, r28
    4eb6:	01 5c       	subi	r16, 0xC1	; 193
    4eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    4eba:	fe 01       	movw	r30, r28
    4ebc:	ed 5b       	subi	r30, 0xBD	; 189
    4ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec0:	60 81       	ld	r22, Z
    4ec2:	71 81       	ldd	r23, Z+1	; 0x01
    4ec4:	82 81       	ldd	r24, Z+2	; 0x02
    4ec6:	93 81       	ldd	r25, Z+3	; 0x03
    4ec8:	20 e0       	ldi	r18, 0x00	; 0
    4eca:	30 e0       	ldi	r19, 0x00	; 0
    4ecc:	4a ef       	ldi	r20, 0xFA	; 250
    4ece:	54 e4       	ldi	r21, 0x44	; 68
    4ed0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ed4:	dc 01       	movw	r26, r24
    4ed6:	cb 01       	movw	r24, r22
    4ed8:	f8 01       	movw	r30, r16
    4eda:	80 83       	st	Z, r24
    4edc:	91 83       	std	Z+1, r25	; 0x01
    4ede:	a2 83       	std	Z+2, r26	; 0x02
    4ee0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ee2:	fe 01       	movw	r30, r28
    4ee4:	ff 96       	adiw	r30, 0x3f	; 63
    4ee6:	60 81       	ld	r22, Z
    4ee8:	71 81       	ldd	r23, Z+1	; 0x01
    4eea:	82 81       	ldd	r24, Z+2	; 0x02
    4eec:	93 81       	ldd	r25, Z+3	; 0x03
    4eee:	20 e0       	ldi	r18, 0x00	; 0
    4ef0:	30 e0       	ldi	r19, 0x00	; 0
    4ef2:	40 e8       	ldi	r20, 0x80	; 128
    4ef4:	5f e3       	ldi	r21, 0x3F	; 63
    4ef6:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    4efa:	88 23       	and	r24, r24
    4efc:	2c f4       	brge	.+10     	; 0x4f08 <main+0x25d6>
		__ticks = 1;
    4efe:	81 e0       	ldi	r24, 0x01	; 1
    4f00:	90 e0       	ldi	r25, 0x00	; 0
    4f02:	9e af       	std	Y+62, r25	; 0x3e
    4f04:	8d af       	std	Y+61, r24	; 0x3d
    4f06:	46 c0       	rjmp	.+140    	; 0x4f94 <main+0x2662>
	else if (__tmp > 65535)
    4f08:	fe 01       	movw	r30, r28
    4f0a:	ff 96       	adiw	r30, 0x3f	; 63
    4f0c:	60 81       	ld	r22, Z
    4f0e:	71 81       	ldd	r23, Z+1	; 0x01
    4f10:	82 81       	ldd	r24, Z+2	; 0x02
    4f12:	93 81       	ldd	r25, Z+3	; 0x03
    4f14:	20 e0       	ldi	r18, 0x00	; 0
    4f16:	3f ef       	ldi	r19, 0xFF	; 255
    4f18:	4f e7       	ldi	r20, 0x7F	; 127
    4f1a:	57 e4       	ldi	r21, 0x47	; 71
    4f1c:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    4f20:	18 16       	cp	r1, r24
    4f22:	64 f5       	brge	.+88     	; 0x4f7c <main+0x264a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f24:	fe 01       	movw	r30, r28
    4f26:	ed 5b       	subi	r30, 0xBD	; 189
    4f28:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2a:	60 81       	ld	r22, Z
    4f2c:	71 81       	ldd	r23, Z+1	; 0x01
    4f2e:	82 81       	ldd	r24, Z+2	; 0x02
    4f30:	93 81       	ldd	r25, Z+3	; 0x03
    4f32:	20 e0       	ldi	r18, 0x00	; 0
    4f34:	30 e0       	ldi	r19, 0x00	; 0
    4f36:	40 e2       	ldi	r20, 0x20	; 32
    4f38:	51 e4       	ldi	r21, 0x41	; 65
    4f3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4f3e:	dc 01       	movw	r26, r24
    4f40:	cb 01       	movw	r24, r22
    4f42:	bc 01       	movw	r22, r24
    4f44:	cd 01       	movw	r24, r26
    4f46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4f4a:	dc 01       	movw	r26, r24
    4f4c:	cb 01       	movw	r24, r22
    4f4e:	9e af       	std	Y+62, r25	; 0x3e
    4f50:	8d af       	std	Y+61, r24	; 0x3d
    4f52:	0f c0       	rjmp	.+30     	; 0x4f72 <main+0x2640>
    4f54:	88 ec       	ldi	r24, 0xC8	; 200
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	9c af       	std	Y+60, r25	; 0x3c
    4f5a:	8b af       	std	Y+59, r24	; 0x3b
    4f5c:	8b ad       	ldd	r24, Y+59	; 0x3b
    4f5e:	9c ad       	ldd	r25, Y+60	; 0x3c
    4f60:	01 97       	sbiw	r24, 0x01	; 1
    4f62:	f1 f7       	brne	.-4      	; 0x4f60 <main+0x262e>
    4f64:	9c af       	std	Y+60, r25	; 0x3c
    4f66:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f68:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f6c:	01 97       	sbiw	r24, 0x01	; 1
    4f6e:	9e af       	std	Y+62, r25	; 0x3e
    4f70:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f72:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f74:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f76:	00 97       	sbiw	r24, 0x00	; 0
    4f78:	69 f7       	brne	.-38     	; 0x4f54 <main+0x2622>
    4f7a:	16 c0       	rjmp	.+44     	; 0x4fa8 <main+0x2676>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f7c:	fe 01       	movw	r30, r28
    4f7e:	ff 96       	adiw	r30, 0x3f	; 63
    4f80:	60 81       	ld	r22, Z
    4f82:	71 81       	ldd	r23, Z+1	; 0x01
    4f84:	82 81       	ldd	r24, Z+2	; 0x02
    4f86:	93 81       	ldd	r25, Z+3	; 0x03
    4f88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4f8c:	dc 01       	movw	r26, r24
    4f8e:	cb 01       	movw	r24, r22
    4f90:	9e af       	std	Y+62, r25	; 0x3e
    4f92:	8d af       	std	Y+61, r24	; 0x3d
    4f94:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f96:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f98:	9a af       	std	Y+58, r25	; 0x3a
    4f9a:	89 af       	std	Y+57, r24	; 0x39
    4f9c:	89 ad       	ldd	r24, Y+57	; 0x39
    4f9e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4fa0:	01 97       	sbiw	r24, 0x01	; 1
    4fa2:	f1 f7       	brne	.-4      	; 0x4fa0 <main+0x266e>
    4fa4:	9a af       	std	Y+58, r25	; 0x3a
    4fa6:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(10);
			HLED_voidLEDOff(LED1);
    4fa8:	60 91 b8 00 	lds	r22, 0x00B8
    4fac:	70 91 b9 00 	lds	r23, 0x00B9
    4fb0:	80 91 ba 00 	lds	r24, 0x00BA
    4fb4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <HLED_voidLEDOff>
    4fb8:	80 e0       	ldi	r24, 0x00	; 0
    4fba:	90 e0       	ldi	r25, 0x00	; 0
    4fbc:	a0 e2       	ldi	r26, 0x20	; 32
    4fbe:	b1 e4       	ldi	r27, 0x41	; 65
    4fc0:	8d ab       	std	Y+53, r24	; 0x35
    4fc2:	9e ab       	std	Y+54, r25	; 0x36
    4fc4:	af ab       	std	Y+55, r26	; 0x37
    4fc6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fc8:	6d a9       	ldd	r22, Y+53	; 0x35
    4fca:	7e a9       	ldd	r23, Y+54	; 0x36
    4fcc:	8f a9       	ldd	r24, Y+55	; 0x37
    4fce:	98 ad       	ldd	r25, Y+56	; 0x38
    4fd0:	20 e0       	ldi	r18, 0x00	; 0
    4fd2:	30 e0       	ldi	r19, 0x00	; 0
    4fd4:	4a ef       	ldi	r20, 0xFA	; 250
    4fd6:	54 e4       	ldi	r21, 0x44	; 68
    4fd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4fdc:	dc 01       	movw	r26, r24
    4fde:	cb 01       	movw	r24, r22
    4fe0:	89 ab       	std	Y+49, r24	; 0x31
    4fe2:	9a ab       	std	Y+50, r25	; 0x32
    4fe4:	ab ab       	std	Y+51, r26	; 0x33
    4fe6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4fe8:	69 a9       	ldd	r22, Y+49	; 0x31
    4fea:	7a a9       	ldd	r23, Y+50	; 0x32
    4fec:	8b a9       	ldd	r24, Y+51	; 0x33
    4fee:	9c a9       	ldd	r25, Y+52	; 0x34
    4ff0:	20 e0       	ldi	r18, 0x00	; 0
    4ff2:	30 e0       	ldi	r19, 0x00	; 0
    4ff4:	40 e8       	ldi	r20, 0x80	; 128
    4ff6:	5f e3       	ldi	r21, 0x3F	; 63
    4ff8:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    4ffc:	88 23       	and	r24, r24
    4ffe:	2c f4       	brge	.+10     	; 0x500a <main+0x26d8>
		__ticks = 1;
    5000:	81 e0       	ldi	r24, 0x01	; 1
    5002:	90 e0       	ldi	r25, 0x00	; 0
    5004:	98 ab       	std	Y+48, r25	; 0x30
    5006:	8f a7       	std	Y+47, r24	; 0x2f
    5008:	3f c0       	rjmp	.+126    	; 0x5088 <main+0x2756>
	else if (__tmp > 65535)
    500a:	69 a9       	ldd	r22, Y+49	; 0x31
    500c:	7a a9       	ldd	r23, Y+50	; 0x32
    500e:	8b a9       	ldd	r24, Y+51	; 0x33
    5010:	9c a9       	ldd	r25, Y+52	; 0x34
    5012:	20 e0       	ldi	r18, 0x00	; 0
    5014:	3f ef       	ldi	r19, 0xFF	; 255
    5016:	4f e7       	ldi	r20, 0x7F	; 127
    5018:	57 e4       	ldi	r21, 0x47	; 71
    501a:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    501e:	18 16       	cp	r1, r24
    5020:	4c f5       	brge	.+82     	; 0x5074 <main+0x2742>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5022:	6d a9       	ldd	r22, Y+53	; 0x35
    5024:	7e a9       	ldd	r23, Y+54	; 0x36
    5026:	8f a9       	ldd	r24, Y+55	; 0x37
    5028:	98 ad       	ldd	r25, Y+56	; 0x38
    502a:	20 e0       	ldi	r18, 0x00	; 0
    502c:	30 e0       	ldi	r19, 0x00	; 0
    502e:	40 e2       	ldi	r20, 0x20	; 32
    5030:	51 e4       	ldi	r21, 0x41	; 65
    5032:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5036:	dc 01       	movw	r26, r24
    5038:	cb 01       	movw	r24, r22
    503a:	bc 01       	movw	r22, r24
    503c:	cd 01       	movw	r24, r26
    503e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5042:	dc 01       	movw	r26, r24
    5044:	cb 01       	movw	r24, r22
    5046:	98 ab       	std	Y+48, r25	; 0x30
    5048:	8f a7       	std	Y+47, r24	; 0x2f
    504a:	0f c0       	rjmp	.+30     	; 0x506a <main+0x2738>
    504c:	88 ec       	ldi	r24, 0xC8	; 200
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	9e a7       	std	Y+46, r25	; 0x2e
    5052:	8d a7       	std	Y+45, r24	; 0x2d
    5054:	8d a5       	ldd	r24, Y+45	; 0x2d
    5056:	9e a5       	ldd	r25, Y+46	; 0x2e
    5058:	01 97       	sbiw	r24, 0x01	; 1
    505a:	f1 f7       	brne	.-4      	; 0x5058 <main+0x2726>
    505c:	9e a7       	std	Y+46, r25	; 0x2e
    505e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5060:	8f a5       	ldd	r24, Y+47	; 0x2f
    5062:	98 a9       	ldd	r25, Y+48	; 0x30
    5064:	01 97       	sbiw	r24, 0x01	; 1
    5066:	98 ab       	std	Y+48, r25	; 0x30
    5068:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    506a:	8f a5       	ldd	r24, Y+47	; 0x2f
    506c:	98 a9       	ldd	r25, Y+48	; 0x30
    506e:	00 97       	sbiw	r24, 0x00	; 0
    5070:	69 f7       	brne	.-38     	; 0x504c <main+0x271a>
    5072:	14 c0       	rjmp	.+40     	; 0x509c <main+0x276a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5074:	69 a9       	ldd	r22, Y+49	; 0x31
    5076:	7a a9       	ldd	r23, Y+50	; 0x32
    5078:	8b a9       	ldd	r24, Y+51	; 0x33
    507a:	9c a9       	ldd	r25, Y+52	; 0x34
    507c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5080:	dc 01       	movw	r26, r24
    5082:	cb 01       	movw	r24, r22
    5084:	98 ab       	std	Y+48, r25	; 0x30
    5086:	8f a7       	std	Y+47, r24	; 0x2f
    5088:	8f a5       	ldd	r24, Y+47	; 0x2f
    508a:	98 a9       	ldd	r25, Y+48	; 0x30
    508c:	9c a7       	std	Y+44, r25	; 0x2c
    508e:	8b a7       	std	Y+43, r24	; 0x2b
    5090:	8b a5       	ldd	r24, Y+43	; 0x2b
    5092:	9c a5       	ldd	r25, Y+44	; 0x2c
    5094:	01 97       	sbiw	r24, 0x01	; 1
    5096:	f1 f7       	brne	.-4      	; 0x5094 <main+0x2762>
    5098:	9c a7       	std	Y+44, r25	; 0x2c
    509a:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(10);
			HLED_voidLEDOn(LED2);
    509c:	60 91 bb 00 	lds	r22, 0x00BB
    50a0:	70 91 bc 00 	lds	r23, 0x00BC
    50a4:	80 91 bd 00 	lds	r24, 0x00BD
    50a8:	0e 94 cb 0b 	call	0x1796	; 0x1796 <HLED_voidLEDOn>
    50ac:	80 e0       	ldi	r24, 0x00	; 0
    50ae:	90 e0       	ldi	r25, 0x00	; 0
    50b0:	a0 e2       	ldi	r26, 0x20	; 32
    50b2:	b1 e4       	ldi	r27, 0x41	; 65
    50b4:	8f a3       	std	Y+39, r24	; 0x27
    50b6:	98 a7       	std	Y+40, r25	; 0x28
    50b8:	a9 a7       	std	Y+41, r26	; 0x29
    50ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50bc:	6f a1       	ldd	r22, Y+39	; 0x27
    50be:	78 a5       	ldd	r23, Y+40	; 0x28
    50c0:	89 a5       	ldd	r24, Y+41	; 0x29
    50c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    50c4:	20 e0       	ldi	r18, 0x00	; 0
    50c6:	30 e0       	ldi	r19, 0x00	; 0
    50c8:	4a ef       	ldi	r20, 0xFA	; 250
    50ca:	54 e4       	ldi	r21, 0x44	; 68
    50cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    50d0:	dc 01       	movw	r26, r24
    50d2:	cb 01       	movw	r24, r22
    50d4:	8b a3       	std	Y+35, r24	; 0x23
    50d6:	9c a3       	std	Y+36, r25	; 0x24
    50d8:	ad a3       	std	Y+37, r26	; 0x25
    50da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    50dc:	6b a1       	ldd	r22, Y+35	; 0x23
    50de:	7c a1       	ldd	r23, Y+36	; 0x24
    50e0:	8d a1       	ldd	r24, Y+37	; 0x25
    50e2:	9e a1       	ldd	r25, Y+38	; 0x26
    50e4:	20 e0       	ldi	r18, 0x00	; 0
    50e6:	30 e0       	ldi	r19, 0x00	; 0
    50e8:	40 e8       	ldi	r20, 0x80	; 128
    50ea:	5f e3       	ldi	r21, 0x3F	; 63
    50ec:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    50f0:	88 23       	and	r24, r24
    50f2:	2c f4       	brge	.+10     	; 0x50fe <main+0x27cc>
		__ticks = 1;
    50f4:	81 e0       	ldi	r24, 0x01	; 1
    50f6:	90 e0       	ldi	r25, 0x00	; 0
    50f8:	9a a3       	std	Y+34, r25	; 0x22
    50fa:	89 a3       	std	Y+33, r24	; 0x21
    50fc:	3f c0       	rjmp	.+126    	; 0x517c <main+0x284a>
	else if (__tmp > 65535)
    50fe:	6b a1       	ldd	r22, Y+35	; 0x23
    5100:	7c a1       	ldd	r23, Y+36	; 0x24
    5102:	8d a1       	ldd	r24, Y+37	; 0x25
    5104:	9e a1       	ldd	r25, Y+38	; 0x26
    5106:	20 e0       	ldi	r18, 0x00	; 0
    5108:	3f ef       	ldi	r19, 0xFF	; 255
    510a:	4f e7       	ldi	r20, 0x7F	; 127
    510c:	57 e4       	ldi	r21, 0x47	; 71
    510e:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    5112:	18 16       	cp	r1, r24
    5114:	4c f5       	brge	.+82     	; 0x5168 <main+0x2836>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5116:	6f a1       	ldd	r22, Y+39	; 0x27
    5118:	78 a5       	ldd	r23, Y+40	; 0x28
    511a:	89 a5       	ldd	r24, Y+41	; 0x29
    511c:	9a a5       	ldd	r25, Y+42	; 0x2a
    511e:	20 e0       	ldi	r18, 0x00	; 0
    5120:	30 e0       	ldi	r19, 0x00	; 0
    5122:	40 e2       	ldi	r20, 0x20	; 32
    5124:	51 e4       	ldi	r21, 0x41	; 65
    5126:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    512a:	dc 01       	movw	r26, r24
    512c:	cb 01       	movw	r24, r22
    512e:	bc 01       	movw	r22, r24
    5130:	cd 01       	movw	r24, r26
    5132:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5136:	dc 01       	movw	r26, r24
    5138:	cb 01       	movw	r24, r22
    513a:	9a a3       	std	Y+34, r25	; 0x22
    513c:	89 a3       	std	Y+33, r24	; 0x21
    513e:	0f c0       	rjmp	.+30     	; 0x515e <main+0x282c>
    5140:	88 ec       	ldi	r24, 0xC8	; 200
    5142:	90 e0       	ldi	r25, 0x00	; 0
    5144:	98 a3       	std	Y+32, r25	; 0x20
    5146:	8f 8f       	std	Y+31, r24	; 0x1f
    5148:	8f 8d       	ldd	r24, Y+31	; 0x1f
    514a:	98 a1       	ldd	r25, Y+32	; 0x20
    514c:	01 97       	sbiw	r24, 0x01	; 1
    514e:	f1 f7       	brne	.-4      	; 0x514c <main+0x281a>
    5150:	98 a3       	std	Y+32, r25	; 0x20
    5152:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5154:	89 a1       	ldd	r24, Y+33	; 0x21
    5156:	9a a1       	ldd	r25, Y+34	; 0x22
    5158:	01 97       	sbiw	r24, 0x01	; 1
    515a:	9a a3       	std	Y+34, r25	; 0x22
    515c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    515e:	89 a1       	ldd	r24, Y+33	; 0x21
    5160:	9a a1       	ldd	r25, Y+34	; 0x22
    5162:	00 97       	sbiw	r24, 0x00	; 0
    5164:	69 f7       	brne	.-38     	; 0x5140 <main+0x280e>
    5166:	14 c0       	rjmp	.+40     	; 0x5190 <main+0x285e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5168:	6b a1       	ldd	r22, Y+35	; 0x23
    516a:	7c a1       	ldd	r23, Y+36	; 0x24
    516c:	8d a1       	ldd	r24, Y+37	; 0x25
    516e:	9e a1       	ldd	r25, Y+38	; 0x26
    5170:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5174:	dc 01       	movw	r26, r24
    5176:	cb 01       	movw	r24, r22
    5178:	9a a3       	std	Y+34, r25	; 0x22
    517a:	89 a3       	std	Y+33, r24	; 0x21
    517c:	89 a1       	ldd	r24, Y+33	; 0x21
    517e:	9a a1       	ldd	r25, Y+34	; 0x22
    5180:	9e 8f       	std	Y+30, r25	; 0x1e
    5182:	8d 8f       	std	Y+29, r24	; 0x1d
    5184:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5186:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5188:	01 97       	sbiw	r24, 0x01	; 1
    518a:	f1 f7       	brne	.-4      	; 0x5188 <main+0x2856>
    518c:	9e 8f       	std	Y+30, r25	; 0x1e
    518e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);
			HLED_voidLEDOn(LED3);
    5190:	60 91 be 00 	lds	r22, 0x00BE
    5194:	70 91 bf 00 	lds	r23, 0x00BF
    5198:	80 91 c0 00 	lds	r24, 0x00C0
    519c:	0e 94 cb 0b 	call	0x1796	; 0x1796 <HLED_voidLEDOn>
    51a0:	80 e0       	ldi	r24, 0x00	; 0
    51a2:	90 e0       	ldi	r25, 0x00	; 0
    51a4:	a0 e2       	ldi	r26, 0x20	; 32
    51a6:	b1 e4       	ldi	r27, 0x41	; 65
    51a8:	89 8f       	std	Y+25, r24	; 0x19
    51aa:	9a 8f       	std	Y+26, r25	; 0x1a
    51ac:	ab 8f       	std	Y+27, r26	; 0x1b
    51ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51b0:	69 8d       	ldd	r22, Y+25	; 0x19
    51b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51b8:	20 e0       	ldi	r18, 0x00	; 0
    51ba:	30 e0       	ldi	r19, 0x00	; 0
    51bc:	4a ef       	ldi	r20, 0xFA	; 250
    51be:	54 e4       	ldi	r21, 0x44	; 68
    51c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    51c4:	dc 01       	movw	r26, r24
    51c6:	cb 01       	movw	r24, r22
    51c8:	8d 8b       	std	Y+21, r24	; 0x15
    51ca:	9e 8b       	std	Y+22, r25	; 0x16
    51cc:	af 8b       	std	Y+23, r26	; 0x17
    51ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    51d0:	6d 89       	ldd	r22, Y+21	; 0x15
    51d2:	7e 89       	ldd	r23, Y+22	; 0x16
    51d4:	8f 89       	ldd	r24, Y+23	; 0x17
    51d6:	98 8d       	ldd	r25, Y+24	; 0x18
    51d8:	20 e0       	ldi	r18, 0x00	; 0
    51da:	30 e0       	ldi	r19, 0x00	; 0
    51dc:	40 e8       	ldi	r20, 0x80	; 128
    51de:	5f e3       	ldi	r21, 0x3F	; 63
    51e0:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    51e4:	88 23       	and	r24, r24
    51e6:	2c f4       	brge	.+10     	; 0x51f2 <main+0x28c0>
		__ticks = 1;
    51e8:	81 e0       	ldi	r24, 0x01	; 1
    51ea:	90 e0       	ldi	r25, 0x00	; 0
    51ec:	9c 8b       	std	Y+20, r25	; 0x14
    51ee:	8b 8b       	std	Y+19, r24	; 0x13
    51f0:	3f c0       	rjmp	.+126    	; 0x5270 <main+0x293e>
	else if (__tmp > 65535)
    51f2:	6d 89       	ldd	r22, Y+21	; 0x15
    51f4:	7e 89       	ldd	r23, Y+22	; 0x16
    51f6:	8f 89       	ldd	r24, Y+23	; 0x17
    51f8:	98 8d       	ldd	r25, Y+24	; 0x18
    51fa:	20 e0       	ldi	r18, 0x00	; 0
    51fc:	3f ef       	ldi	r19, 0xFF	; 255
    51fe:	4f e7       	ldi	r20, 0x7F	; 127
    5200:	57 e4       	ldi	r21, 0x47	; 71
    5202:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    5206:	18 16       	cp	r1, r24
    5208:	4c f5       	brge	.+82     	; 0x525c <main+0x292a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    520a:	69 8d       	ldd	r22, Y+25	; 0x19
    520c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    520e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5210:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5212:	20 e0       	ldi	r18, 0x00	; 0
    5214:	30 e0       	ldi	r19, 0x00	; 0
    5216:	40 e2       	ldi	r20, 0x20	; 32
    5218:	51 e4       	ldi	r21, 0x41	; 65
    521a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    521e:	dc 01       	movw	r26, r24
    5220:	cb 01       	movw	r24, r22
    5222:	bc 01       	movw	r22, r24
    5224:	cd 01       	movw	r24, r26
    5226:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    522a:	dc 01       	movw	r26, r24
    522c:	cb 01       	movw	r24, r22
    522e:	9c 8b       	std	Y+20, r25	; 0x14
    5230:	8b 8b       	std	Y+19, r24	; 0x13
    5232:	0f c0       	rjmp	.+30     	; 0x5252 <main+0x2920>
    5234:	88 ec       	ldi	r24, 0xC8	; 200
    5236:	90 e0       	ldi	r25, 0x00	; 0
    5238:	9a 8b       	std	Y+18, r25	; 0x12
    523a:	89 8b       	std	Y+17, r24	; 0x11
    523c:	89 89       	ldd	r24, Y+17	; 0x11
    523e:	9a 89       	ldd	r25, Y+18	; 0x12
    5240:	01 97       	sbiw	r24, 0x01	; 1
    5242:	f1 f7       	brne	.-4      	; 0x5240 <main+0x290e>
    5244:	9a 8b       	std	Y+18, r25	; 0x12
    5246:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5248:	8b 89       	ldd	r24, Y+19	; 0x13
    524a:	9c 89       	ldd	r25, Y+20	; 0x14
    524c:	01 97       	sbiw	r24, 0x01	; 1
    524e:	9c 8b       	std	Y+20, r25	; 0x14
    5250:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5252:	8b 89       	ldd	r24, Y+19	; 0x13
    5254:	9c 89       	ldd	r25, Y+20	; 0x14
    5256:	00 97       	sbiw	r24, 0x00	; 0
    5258:	69 f7       	brne	.-38     	; 0x5234 <main+0x2902>
    525a:	14 c0       	rjmp	.+40     	; 0x5284 <main+0x2952>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    525c:	6d 89       	ldd	r22, Y+21	; 0x15
    525e:	7e 89       	ldd	r23, Y+22	; 0x16
    5260:	8f 89       	ldd	r24, Y+23	; 0x17
    5262:	98 8d       	ldd	r25, Y+24	; 0x18
    5264:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5268:	dc 01       	movw	r26, r24
    526a:	cb 01       	movw	r24, r22
    526c:	9c 8b       	std	Y+20, r25	; 0x14
    526e:	8b 8b       	std	Y+19, r24	; 0x13
    5270:	8b 89       	ldd	r24, Y+19	; 0x13
    5272:	9c 89       	ldd	r25, Y+20	; 0x14
    5274:	98 8b       	std	Y+16, r25	; 0x10
    5276:	8f 87       	std	Y+15, r24	; 0x0f
    5278:	8f 85       	ldd	r24, Y+15	; 0x0f
    527a:	98 89       	ldd	r25, Y+16	; 0x10
    527c:	01 97       	sbiw	r24, 0x01	; 1
    527e:	f1 f7       	brne	.-4      	; 0x527c <main+0x294a>
    5280:	98 8b       	std	Y+16, r25	; 0x10
    5282:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			HLED_voidLEDOff(LED4);
    5284:	60 91 c1 00 	lds	r22, 0x00C1
    5288:	70 91 c2 00 	lds	r23, 0x00C2
    528c:	80 91 c3 00 	lds	r24, 0x00C3
    5290:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <HLED_voidLEDOff>
    5294:	80 e0       	ldi	r24, 0x00	; 0
    5296:	90 e0       	ldi	r25, 0x00	; 0
    5298:	a0 e2       	ldi	r26, 0x20	; 32
    529a:	b1 e4       	ldi	r27, 0x41	; 65
    529c:	8b 87       	std	Y+11, r24	; 0x0b
    529e:	9c 87       	std	Y+12, r25	; 0x0c
    52a0:	ad 87       	std	Y+13, r26	; 0x0d
    52a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    52a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    52a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    52aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    52ac:	20 e0       	ldi	r18, 0x00	; 0
    52ae:	30 e0       	ldi	r19, 0x00	; 0
    52b0:	4a ef       	ldi	r20, 0xFA	; 250
    52b2:	54 e4       	ldi	r21, 0x44	; 68
    52b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    52b8:	dc 01       	movw	r26, r24
    52ba:	cb 01       	movw	r24, r22
    52bc:	8f 83       	std	Y+7, r24	; 0x07
    52be:	98 87       	std	Y+8, r25	; 0x08
    52c0:	a9 87       	std	Y+9, r26	; 0x09
    52c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    52c4:	6f 81       	ldd	r22, Y+7	; 0x07
    52c6:	78 85       	ldd	r23, Y+8	; 0x08
    52c8:	89 85       	ldd	r24, Y+9	; 0x09
    52ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    52cc:	20 e0       	ldi	r18, 0x00	; 0
    52ce:	30 e0       	ldi	r19, 0x00	; 0
    52d0:	40 e8       	ldi	r20, 0x80	; 128
    52d2:	5f e3       	ldi	r21, 0x3F	; 63
    52d4:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    52d8:	88 23       	and	r24, r24
    52da:	2c f4       	brge	.+10     	; 0x52e6 <main+0x29b4>
		__ticks = 1;
    52dc:	81 e0       	ldi	r24, 0x01	; 1
    52de:	90 e0       	ldi	r25, 0x00	; 0
    52e0:	9e 83       	std	Y+6, r25	; 0x06
    52e2:	8d 83       	std	Y+5, r24	; 0x05
    52e4:	40 c0       	rjmp	.+128    	; 0x5366 <main+0x2a34>
	else if (__tmp > 65535)
    52e6:	6f 81       	ldd	r22, Y+7	; 0x07
    52e8:	78 85       	ldd	r23, Y+8	; 0x08
    52ea:	89 85       	ldd	r24, Y+9	; 0x09
    52ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    52ee:	20 e0       	ldi	r18, 0x00	; 0
    52f0:	3f ef       	ldi	r19, 0xFF	; 255
    52f2:	4f e7       	ldi	r20, 0x7F	; 127
    52f4:	57 e4       	ldi	r21, 0x47	; 71
    52f6:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    52fa:	18 16       	cp	r1, r24
    52fc:	54 f5       	brge	.+84     	; 0x5352 <main+0x2a20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    5300:	7c 85       	ldd	r23, Y+12	; 0x0c
    5302:	8d 85       	ldd	r24, Y+13	; 0x0d
    5304:	9e 85       	ldd	r25, Y+14	; 0x0e
    5306:	20 e0       	ldi	r18, 0x00	; 0
    5308:	30 e0       	ldi	r19, 0x00	; 0
    530a:	40 e2       	ldi	r20, 0x20	; 32
    530c:	51 e4       	ldi	r21, 0x41	; 65
    530e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5312:	dc 01       	movw	r26, r24
    5314:	cb 01       	movw	r24, r22
    5316:	bc 01       	movw	r22, r24
    5318:	cd 01       	movw	r24, r26
    531a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    531e:	dc 01       	movw	r26, r24
    5320:	cb 01       	movw	r24, r22
    5322:	9e 83       	std	Y+6, r25	; 0x06
    5324:	8d 83       	std	Y+5, r24	; 0x05
    5326:	0f c0       	rjmp	.+30     	; 0x5346 <main+0x2a14>
    5328:	88 ec       	ldi	r24, 0xC8	; 200
    532a:	90 e0       	ldi	r25, 0x00	; 0
    532c:	9c 83       	std	Y+4, r25	; 0x04
    532e:	8b 83       	std	Y+3, r24	; 0x03
    5330:	8b 81       	ldd	r24, Y+3	; 0x03
    5332:	9c 81       	ldd	r25, Y+4	; 0x04
    5334:	01 97       	sbiw	r24, 0x01	; 1
    5336:	f1 f7       	brne	.-4      	; 0x5334 <main+0x2a02>
    5338:	9c 83       	std	Y+4, r25	; 0x04
    533a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    533c:	8d 81       	ldd	r24, Y+5	; 0x05
    533e:	9e 81       	ldd	r25, Y+6	; 0x06
    5340:	01 97       	sbiw	r24, 0x01	; 1
    5342:	9e 83       	std	Y+6, r25	; 0x06
    5344:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5346:	8d 81       	ldd	r24, Y+5	; 0x05
    5348:	9e 81       	ldd	r25, Y+6	; 0x06
    534a:	00 97       	sbiw	r24, 0x00	; 0
    534c:	69 f7       	brne	.-38     	; 0x5328 <main+0x29f6>
    534e:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <main+0x376>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5352:	6f 81       	ldd	r22, Y+7	; 0x07
    5354:	78 85       	ldd	r23, Y+8	; 0x08
    5356:	89 85       	ldd	r24, Y+9	; 0x09
    5358:	9a 85       	ldd	r25, Y+10	; 0x0a
    535a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    535e:	dc 01       	movw	r26, r24
    5360:	cb 01       	movw	r24, r22
    5362:	9e 83       	std	Y+6, r25	; 0x06
    5364:	8d 83       	std	Y+5, r24	; 0x05
    5366:	8d 81       	ldd	r24, Y+5	; 0x05
    5368:	9e 81       	ldd	r25, Y+6	; 0x06
    536a:	9a 83       	std	Y+2, r25	; 0x02
    536c:	89 83       	std	Y+1, r24	; 0x01
    536e:	89 81       	ldd	r24, Y+1	; 0x01
    5370:	9a 81       	ldd	r25, Y+2	; 0x02
    5372:	01 97       	sbiw	r24, 0x01	; 1
    5374:	f1 f7       	brne	.-4      	; 0x5372 <main+0x2a40>
    5376:	9a 83       	std	Y+2, r25	; 0x02
    5378:	89 83       	std	Y+1, r24	; 0x01
    537a:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <main+0x376>

0000537e <__mulsi3>:
    537e:	62 9f       	mul	r22, r18
    5380:	d0 01       	movw	r26, r0
    5382:	73 9f       	mul	r23, r19
    5384:	f0 01       	movw	r30, r0
    5386:	82 9f       	mul	r24, r18
    5388:	e0 0d       	add	r30, r0
    538a:	f1 1d       	adc	r31, r1
    538c:	64 9f       	mul	r22, r20
    538e:	e0 0d       	add	r30, r0
    5390:	f1 1d       	adc	r31, r1
    5392:	92 9f       	mul	r25, r18
    5394:	f0 0d       	add	r31, r0
    5396:	83 9f       	mul	r24, r19
    5398:	f0 0d       	add	r31, r0
    539a:	74 9f       	mul	r23, r20
    539c:	f0 0d       	add	r31, r0
    539e:	65 9f       	mul	r22, r21
    53a0:	f0 0d       	add	r31, r0
    53a2:	99 27       	eor	r25, r25
    53a4:	72 9f       	mul	r23, r18
    53a6:	b0 0d       	add	r27, r0
    53a8:	e1 1d       	adc	r30, r1
    53aa:	f9 1f       	adc	r31, r25
    53ac:	63 9f       	mul	r22, r19
    53ae:	b0 0d       	add	r27, r0
    53b0:	e1 1d       	adc	r30, r1
    53b2:	f9 1f       	adc	r31, r25
    53b4:	bd 01       	movw	r22, r26
    53b6:	cf 01       	movw	r24, r30
    53b8:	11 24       	eor	r1, r1
    53ba:	08 95       	ret

000053bc <__udivmodsi4>:
    53bc:	a1 e2       	ldi	r26, 0x21	; 33
    53be:	1a 2e       	mov	r1, r26
    53c0:	aa 1b       	sub	r26, r26
    53c2:	bb 1b       	sub	r27, r27
    53c4:	fd 01       	movw	r30, r26
    53c6:	0d c0       	rjmp	.+26     	; 0x53e2 <__udivmodsi4_ep>

000053c8 <__udivmodsi4_loop>:
    53c8:	aa 1f       	adc	r26, r26
    53ca:	bb 1f       	adc	r27, r27
    53cc:	ee 1f       	adc	r30, r30
    53ce:	ff 1f       	adc	r31, r31
    53d0:	a2 17       	cp	r26, r18
    53d2:	b3 07       	cpc	r27, r19
    53d4:	e4 07       	cpc	r30, r20
    53d6:	f5 07       	cpc	r31, r21
    53d8:	20 f0       	brcs	.+8      	; 0x53e2 <__udivmodsi4_ep>
    53da:	a2 1b       	sub	r26, r18
    53dc:	b3 0b       	sbc	r27, r19
    53de:	e4 0b       	sbc	r30, r20
    53e0:	f5 0b       	sbc	r31, r21

000053e2 <__udivmodsi4_ep>:
    53e2:	66 1f       	adc	r22, r22
    53e4:	77 1f       	adc	r23, r23
    53e6:	88 1f       	adc	r24, r24
    53e8:	99 1f       	adc	r25, r25
    53ea:	1a 94       	dec	r1
    53ec:	69 f7       	brne	.-38     	; 0x53c8 <__udivmodsi4_loop>
    53ee:	60 95       	com	r22
    53f0:	70 95       	com	r23
    53f2:	80 95       	com	r24
    53f4:	90 95       	com	r25
    53f6:	9b 01       	movw	r18, r22
    53f8:	ac 01       	movw	r20, r24
    53fa:	bd 01       	movw	r22, r26
    53fc:	cf 01       	movw	r24, r30
    53fe:	08 95       	ret

00005400 <__divmodsi4>:
    5400:	97 fb       	bst	r25, 7
    5402:	09 2e       	mov	r0, r25
    5404:	05 26       	eor	r0, r21
    5406:	0e d0       	rcall	.+28     	; 0x5424 <__divmodsi4_neg1>
    5408:	57 fd       	sbrc	r21, 7
    540a:	04 d0       	rcall	.+8      	; 0x5414 <__divmodsi4_neg2>
    540c:	d7 df       	rcall	.-82     	; 0x53bc <__udivmodsi4>
    540e:	0a d0       	rcall	.+20     	; 0x5424 <__divmodsi4_neg1>
    5410:	00 1c       	adc	r0, r0
    5412:	38 f4       	brcc	.+14     	; 0x5422 <__divmodsi4_exit>

00005414 <__divmodsi4_neg2>:
    5414:	50 95       	com	r21
    5416:	40 95       	com	r20
    5418:	30 95       	com	r19
    541a:	21 95       	neg	r18
    541c:	3f 4f       	sbci	r19, 0xFF	; 255
    541e:	4f 4f       	sbci	r20, 0xFF	; 255
    5420:	5f 4f       	sbci	r21, 0xFF	; 255

00005422 <__divmodsi4_exit>:
    5422:	08 95       	ret

00005424 <__divmodsi4_neg1>:
    5424:	f6 f7       	brtc	.-4      	; 0x5422 <__divmodsi4_exit>
    5426:	90 95       	com	r25
    5428:	80 95       	com	r24
    542a:	70 95       	com	r23
    542c:	61 95       	neg	r22
    542e:	7f 4f       	sbci	r23, 0xFF	; 255
    5430:	8f 4f       	sbci	r24, 0xFF	; 255
    5432:	9f 4f       	sbci	r25, 0xFF	; 255
    5434:	08 95       	ret

00005436 <__prologue_saves__>:
    5436:	2f 92       	push	r2
    5438:	3f 92       	push	r3
    543a:	4f 92       	push	r4
    543c:	5f 92       	push	r5
    543e:	6f 92       	push	r6
    5440:	7f 92       	push	r7
    5442:	8f 92       	push	r8
    5444:	9f 92       	push	r9
    5446:	af 92       	push	r10
    5448:	bf 92       	push	r11
    544a:	cf 92       	push	r12
    544c:	df 92       	push	r13
    544e:	ef 92       	push	r14
    5450:	ff 92       	push	r15
    5452:	0f 93       	push	r16
    5454:	1f 93       	push	r17
    5456:	cf 93       	push	r28
    5458:	df 93       	push	r29
    545a:	cd b7       	in	r28, 0x3d	; 61
    545c:	de b7       	in	r29, 0x3e	; 62
    545e:	ca 1b       	sub	r28, r26
    5460:	db 0b       	sbc	r29, r27
    5462:	0f b6       	in	r0, 0x3f	; 63
    5464:	f8 94       	cli
    5466:	de bf       	out	0x3e, r29	; 62
    5468:	0f be       	out	0x3f, r0	; 63
    546a:	cd bf       	out	0x3d, r28	; 61
    546c:	09 94       	ijmp

0000546e <__epilogue_restores__>:
    546e:	2a 88       	ldd	r2, Y+18	; 0x12
    5470:	39 88       	ldd	r3, Y+17	; 0x11
    5472:	48 88       	ldd	r4, Y+16	; 0x10
    5474:	5f 84       	ldd	r5, Y+15	; 0x0f
    5476:	6e 84       	ldd	r6, Y+14	; 0x0e
    5478:	7d 84       	ldd	r7, Y+13	; 0x0d
    547a:	8c 84       	ldd	r8, Y+12	; 0x0c
    547c:	9b 84       	ldd	r9, Y+11	; 0x0b
    547e:	aa 84       	ldd	r10, Y+10	; 0x0a
    5480:	b9 84       	ldd	r11, Y+9	; 0x09
    5482:	c8 84       	ldd	r12, Y+8	; 0x08
    5484:	df 80       	ldd	r13, Y+7	; 0x07
    5486:	ee 80       	ldd	r14, Y+6	; 0x06
    5488:	fd 80       	ldd	r15, Y+5	; 0x05
    548a:	0c 81       	ldd	r16, Y+4	; 0x04
    548c:	1b 81       	ldd	r17, Y+3	; 0x03
    548e:	aa 81       	ldd	r26, Y+2	; 0x02
    5490:	b9 81       	ldd	r27, Y+1	; 0x01
    5492:	ce 0f       	add	r28, r30
    5494:	d1 1d       	adc	r29, r1
    5496:	0f b6       	in	r0, 0x3f	; 63
    5498:	f8 94       	cli
    549a:	de bf       	out	0x3e, r29	; 62
    549c:	0f be       	out	0x3f, r0	; 63
    549e:	cd bf       	out	0x3d, r28	; 61
    54a0:	ed 01       	movw	r28, r26
    54a2:	08 95       	ret

000054a4 <_exit>:
    54a4:	f8 94       	cli

000054a6 <__stop_program>:
    54a6:	ff cf       	rjmp	.-2      	; 0x54a6 <__stop_program>
